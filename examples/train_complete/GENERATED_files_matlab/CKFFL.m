function CKFFL_ = CKFFL(q,qaux,dq,time,param)

xWAG = q( 1 ); 
yWAG = q( 2 ); 
zWAG = q( 3 ); 
aWAG = q( 4 ); 
bWAG = q( 5 ); 
cWAG = q( 6 ); 
cRSLD = q( 7 ); 
cFSLD = q( 8 ); 
zRBOG = q( 9 ); 
aRBOG = q( 10 ); 
bRBOG = q( 11 ); 
zFBOG = q( 12 ); 
aFBOG = q( 13 ); 
bFBOG = q( 14 ); 
zRWHSF = q( 15 ); 
aRWHSF = q( 16 ); 
bRWHSF = q( 17 ); 
zRWHSR = q( 18 ); 
aRWHSR = q( 19 ); 
bRWHSR = q( 20 ); 
zFWHSF = q( 21 ); 
aFWHSF = q( 22 ); 
bFWHSF = q( 23 ); 
zFWHSR = q( 24 ); 
aFWHSR = q( 25 ); 
bFWHSR = q( 26 ); 
bRAXBFL = q( 27 ); 
bRAXBFR = q( 28 ); 
bRAXBRL = q( 29 ); 
bRAXBRR = q( 30 ); 
bFAXBFL = q( 31 ); 
bFAXBFR = q( 32 ); 
bFAXBRL = q( 33 ); 
bFAXBRR = q( 34 ); 
xRMOTF = q( 35 ); 
yRMOTF = q( 36 ); 
zRMOTF = q( 37 ); 
bRMOTF = q( 38 ); 
xRMOTR = q( 39 ); 
yRMOTR = q( 40 ); 
zRMOTR = q( 41 ); 
bRMOTR = q( 42 ); 
bRROTF = q( 43 ); 
bRROTR = q( 44 ); 

thetaW_RFR = qaux( 1 ); 
uW_RFR = qaux( 2 ); 
uR_RFR = qaux( 3 ); 
xR_RFR = qaux( 4 ); 
thetaW_RFL = qaux( 5 ); 
uW_RFL = qaux( 6 ); 
uR_RFL = qaux( 7 ); 
xR_RFL = qaux( 8 ); 
thetaW_RRR = qaux( 9 ); 
uW_RRR = qaux( 10 ); 
uR_RRR = qaux( 11 ); 
xR_RRR = qaux( 12 ); 
thetaW_RRL = qaux( 13 ); 
uW_RRL = qaux( 14 ); 
uR_RRL = qaux( 15 ); 
xR_RRL = qaux( 16 ); 
thetaW_FFR = qaux( 17 ); 
uW_FFR = qaux( 18 ); 
uR_FFR = qaux( 19 ); 
xR_FFR = qaux( 20 ); 
thetaW_FFL = qaux( 21 ); 
uW_FFL = qaux( 22 ); 
uR_FFL = qaux( 23 ); 
xR_FFL = qaux( 24 ); 
thetaW_FRR = qaux( 25 ); 
uW_FRR = qaux( 26 ); 
uR_FRR = qaux( 27 ); 
xR_FRR = qaux( 28 ); 
thetaW_FRL = qaux( 29 ); 
uW_FRL = qaux( 30 ); 
uR_FRL = qaux( 31 ); 
xR_FRL = qaux( 32 ); 

dxWAG = dq( 1 ); 
dyWAG = dq( 2 ); 
dzWAG = dq( 3 ); 
daWAG = dq( 4 ); 
dbWAG = dq( 5 ); 
dcWAG = dq( 6 ); 
dcRSLD = dq( 7 ); 
dcFSLD = dq( 8 ); 
dzRBOG = dq( 9 ); 
daRBOG = dq( 10 ); 
dbRBOG = dq( 11 ); 
dzFBOG = dq( 12 ); 
daFBOG = dq( 13 ); 
dbFBOG = dq( 14 ); 
dzRWHSF = dq( 15 ); 
daRWHSF = dq( 16 ); 
dbRWHSF = dq( 17 ); 
dzRWHSR = dq( 18 ); 
daRWHSR = dq( 19 ); 
dbRWHSR = dq( 20 ); 
dzFWHSF = dq( 21 ); 
daFWHSF = dq( 22 ); 
dbFWHSF = dq( 23 ); 
dzFWHSR = dq( 24 ); 
daFWHSR = dq( 25 ); 
dbFWHSR = dq( 26 ); 
dbRAXBFL = dq( 27 ); 
dbRAXBFR = dq( 28 ); 
dbRAXBRL = dq( 29 ); 
dbRAXBRR = dq( 30 ); 
dbFAXBFL = dq( 31 ); 
dbFAXBFR = dq( 32 ); 
dbFAXBRL = dq( 33 ); 
dbFAXBRR = dq( 34 ); 
dxRMOTF = dq( 35 ); 
dyRMOTF = dq( 36 ); 
dzRMOTF = dq( 37 ); 
dbRMOTF = dq( 38 ); 
dxRMOTR = dq( 39 ); 
dyRMOTR = dq( 40 ); 
dzRMOTR = dq( 41 ); 
dbRMOTR = dq( 42 ); 
dbRROTF = dq( 43 ); 
dbRROTR = dq( 44 ); 

t= time ;

g = param( 1 ); 
L_OBOG_OAXBy = param( 2 ); 
L_OBOG_OAXBz = param( 3 ); 
L_OBOG_OSUSPy = param( 4 ); 
L_OBOG_OSUSPx = param( 5 ); 
L_OBOG_OSUSPz = param( 6 ); 
L_OBOG_OWHS = param( 7 ); 
L_OBOG_P1BOG = param( 8 ); 
L_MOT = param( 9 ); 
L_GEAR = param( 10 ); 
L_AXB1 = param( 11 ); 
L_AXB2 = param( 12 ); 
L_SUSP = param( 13 ); 
L_WHS = param( 14 ); 
L_RAIL = param( 15 ); 
L_WAG = param( 16 ); 
L_SUSPBEAM1 = param( 17 ); 
L_SUSPBEAM2 = param( 18 ); 
L_SLDx = param( 19 ); 
L_SLDy = param( 20 ); 
b_pend = param( 21 ); 
a_pend = param( 22 ); 
L0_1 = param( 23 ); 
L0_2 = param( 24 ); 
m_WAG = param( 25 ); 
I_WAGx = param( 26 ); 
I_WAGy = param( 27 ); 
I_WAGz = param( 28 ); 
xCGWAG = param( 29 ); 
yCGWAG = param( 30 ); 
zCGWAG = param( 31 ); 
G_BOGz = param( 32 ); 
m_BOG = param( 33 ); 
I_BOGx = param( 34 ); 
I_BOGy = param( 35 ); 
I_BOGz = param( 36 ); 
m_MOT = param( 37 ); 
I_MOTx = param( 38 ); 
I_MOTy = param( 39 ); 
I_MOTz = param( 40 ); 
m_ROT = param( 41 ); 
I_ROTx = param( 42 ); 
I_ROTy = param( 43 ); 
I_ROTz = param( 44 ); 
m_WHS = param( 45 ); 
I_WHSx = param( 46 ); 
I_WHSy = param( 47 ); 
I_WHSz = param( 48 ); 
I_CORy = param( 49 ); 
m_AXB = param( 50 ); 
I_AXBx = param( 51 ); 
I_AXBy = param( 52 ); 
I_AXBz = param( 53 ); 
m_SLD = param( 54 ); 
I_SLDx = param( 55 ); 
I_SLDy = param( 56 ); 
I_SLDz = param( 57 ); 
K_SSl = param( 58 ); 
C_SSl = param( 59 ); 
C_SSr = param( 60 ); 
K_SSr = param( 61 ); 
Kgear = param( 62 ); 
Cgear = param( 63 ); 
alpha_gear = param( 64 ); 
zROT = param( 65 ); 
zWHS = param( 66 ); 
K_S1 = param( 67 ); 
C_S1 = param( 68 ); 
K_S2 = param( 69 ); 
C_S2 = param( 70 ); 
aW_RFR = param( 71 ); 
bW_RFR = param( 72 ); 
cW_RFR = param( 73 ); 
dW_RFR = param( 74 ); 
lW_RFR = param( 75 ); 
aR_RFR = param( 76 ); 
bR_RFR = param( 77 ); 
cR_RFR = param( 78 ); 
dR_RFR = param( 79 ); 
lR_RFR = param( 80 ); 
RFRas = param( 81 ); 
RFRbs = param( 82 ); 
RFRcs = param( 83 ); 
RFRds = param( 84 ); 
RFRes = param( 85 ); 
RFRfs = param( 86 ); 
RFRstas = param( 87 ); 
RFRends = param( 88 ); 
irrRFRz = param( 89 ); 
aW_RFL = param( 90 ); 
bW_RFL = param( 91 ); 
cW_RFL = param( 92 ); 
dW_RFL = param( 93 ); 
lW_RFL = param( 94 ); 
aR_RFL = param( 95 ); 
bR_RFL = param( 96 ); 
cR_RFL = param( 97 ); 
dR_RFL = param( 98 ); 
lR_RFL = param( 99 ); 
RFLas = param( 100 ); 
RFLbs = param( 101 ); 
RFLcs = param( 102 ); 
RFLds = param( 103 ); 
RFLes = param( 104 ); 
RFLfs = param( 105 ); 
RFLstas = param( 106 ); 
RFLends = param( 107 ); 
irrRFLz = param( 108 ); 
aW_RRR = param( 109 ); 
bW_RRR = param( 110 ); 
cW_RRR = param( 111 ); 
dW_RRR = param( 112 ); 
lW_RRR = param( 113 ); 
aR_RRR = param( 114 ); 
bR_RRR = param( 115 ); 
cR_RRR = param( 116 ); 
dR_RRR = param( 117 ); 
lR_RRR = param( 118 ); 
RRRas = param( 119 ); 
RRRbs = param( 120 ); 
RRRcs = param( 121 ); 
RRRds = param( 122 ); 
RRRes = param( 123 ); 
RRRfs = param( 124 ); 
RRRstas = param( 125 ); 
RRRends = param( 126 ); 
irrRRRz = param( 127 ); 
aW_RRL = param( 128 ); 
bW_RRL = param( 129 ); 
cW_RRL = param( 130 ); 
dW_RRL = param( 131 ); 
lW_RRL = param( 132 ); 
aR_RRL = param( 133 ); 
bR_RRL = param( 134 ); 
cR_RRL = param( 135 ); 
dR_RRL = param( 136 ); 
lR_RRL = param( 137 ); 
RRLas = param( 138 ); 
RRLbs = param( 139 ); 
RRLcs = param( 140 ); 
RRLds = param( 141 ); 
RRLes = param( 142 ); 
RRLfs = param( 143 ); 
RRLstas = param( 144 ); 
RRLends = param( 145 ); 
irrRRLz = param( 146 ); 
aW_FFR = param( 147 ); 
bW_FFR = param( 148 ); 
cW_FFR = param( 149 ); 
dW_FFR = param( 150 ); 
lW_FFR = param( 151 ); 
aR_FFR = param( 152 ); 
bR_FFR = param( 153 ); 
cR_FFR = param( 154 ); 
dR_FFR = param( 155 ); 
lR_FFR = param( 156 ); 
FFRas = param( 157 ); 
FFRbs = param( 158 ); 
FFRcs = param( 159 ); 
FFRds = param( 160 ); 
FFRes = param( 161 ); 
FFRfs = param( 162 ); 
FFRstas = param( 163 ); 
FFRends = param( 164 ); 
irrFFRz = param( 165 ); 
aW_FFL = param( 166 ); 
bW_FFL = param( 167 ); 
cW_FFL = param( 168 ); 
dW_FFL = param( 169 ); 
lW_FFL = param( 170 ); 
aR_FFL = param( 171 ); 
bR_FFL = param( 172 ); 
cR_FFL = param( 173 ); 
dR_FFL = param( 174 ); 
lR_FFL = param( 175 ); 
FFLas = param( 176 ); 
FFLbs = param( 177 ); 
FFLcs = param( 178 ); 
FFLds = param( 179 ); 
FFLes = param( 180 ); 
FFLfs = param( 181 ); 
FFLstas = param( 182 ); 
FFLends = param( 183 ); 
irrFFLz = param( 184 ); 
aW_FRR = param( 185 ); 
bW_FRR = param( 186 ); 
cW_FRR = param( 187 ); 
dW_FRR = param( 188 ); 
lW_FRR = param( 189 ); 
aR_FRR = param( 190 ); 
bR_FRR = param( 191 ); 
cR_FRR = param( 192 ); 
dR_FRR = param( 193 ); 
lR_FRR = param( 194 ); 
FRRas = param( 195 ); 
FRRbs = param( 196 ); 
FRRcs = param( 197 ); 
FRRds = param( 198 ); 
FRRes = param( 199 ); 
FRRfs = param( 200 ); 
FRRstas = param( 201 ); 
FRRends = param( 202 ); 
irrFRRz = param( 203 ); 
aW_FRL = param( 204 ); 
bW_FRL = param( 205 ); 
cW_FRL = param( 206 ); 
dW_FRL = param( 207 ); 
lW_FRL = param( 208 ); 
aR_FRL = param( 209 ); 
bR_FRL = param( 210 ); 
cR_FRL = param( 211 ); 
dR_FRL = param( 212 ); 
lR_FRL = param( 213 ); 
FRLas = param( 214 ); 
FRLbs = param( 215 ); 
FRLcs = param( 216 ); 
FRLds = param( 217 ); 
FRLes = param( 218 ); 
FRLfs = param( 219 ); 
FRLstas = param( 220 ); 
FRLends = param( 221 ); 
irrFRLz = param( 222 ); 
E_elastic = param( 223 ); 
nu_poisson = param( 224 ); 
G_elastic = param( 225 ); 
aRFR = param( 226 ); 
bRFR = param( 227 ); 
C11RFR = param( 228 ); 
C22RFR = param( 229 ); 
C23RFR = param( 230 ); 
C33RFR = param( 231 ); 
aRFL = param( 232 ); 
bRFL = param( 233 ); 
C11RFL = param( 234 ); 
C22RFL = param( 235 ); 
C23RFL = param( 236 ); 
C33RFL = param( 237 ); 
aRRR = param( 238 ); 
bRRR = param( 239 ); 
C11RRR = param( 240 ); 
C22RRR = param( 241 ); 
C23RRR = param( 242 ); 
C33RRR = param( 243 ); 
aRRL = param( 244 ); 
bRRL = param( 245 ); 
C11RRL = param( 246 ); 
C22RRL = param( 247 ); 
C23RRL = param( 248 ); 
C33RRL = param( 249 ); 
aFFR = param( 250 ); 
bFFR = param( 251 ); 
C11FFR = param( 252 ); 
C22FFR = param( 253 ); 
C23FFR = param( 254 ); 
C33FFR = param( 255 ); 
aFFL = param( 256 ); 
bFFL = param( 257 ); 
C11FFL = param( 258 ); 
C22FFL = param( 259 ); 
C23FFL = param( 260 ); 
C33FFL = param( 261 ); 
aFRR = param( 262 ); 
bFRR = param( 263 ); 
C11FRR = param( 264 ); 
C22FRR = param( 265 ); 
C23FRR = param( 266 ); 
C33FRR = param( 267 ); 
aFRL = param( 268 ); 
bFRL = param( 269 ); 
C11FRL = param( 270 ); 
C22FRL = param( 271 ); 
C23FRL = param( 272 ); 
C33FRL = param( 273 ); 
epsiRFR = param( 274 ); 
epsiRFL = param( 275 ); 
epsiRRR = param( 276 ); 
epsiRRL = param( 277 ); 
epsiFFR = param( 278 ); 
epsiFFL = param( 279 ); 
epsiFRR = param( 280 ); 
epsiFRL = param( 281 ); 

atom3086 = (FFLstas-FFLends)^(-1);
atom3087 = (FFLstas-xR_FFL)*atom3086;
atom3098 = -FFLas*atom3086;
atom3089 = atom3087*FFLas+FFLbs;
atom3101 = atom3087*atom3098-atom3089*atom3086;
atom3091 = FFLcs+atom3087*atom3089;
atom3104 = atom3087*atom3101-atom3091*atom3086;
atom3124 = -atom3086*atom3101;
atom3121 = -atom3104*atom3086;
atom3093 = FFLds+atom3087*atom3091;
atom3107 = atom3087*atom3104-atom3093*atom3086;
atom3131 = -atom3107*atom3086;
atom3110 = atom3087*atom3107-(atom3087*atom3093+FFLes)*atom3086;
atom3112 = 1+atom3110^2;
atom3113 = sqrt(atom3112);
atom3134 = 2*atom3087*((atom3124-atom3087*atom3098*atom3086)*atom3087+atom3121)+2*atom3131;
atom3139 = -atom3134*atom3113^(-2)*atom3110*atom3112^(-1/2);
atom3143 = 1-(0.5)*atom3139*atom3110*L_RAIL-(0.5)*atom3134*atom3113^(-1)*L_RAIL;
atom3145 = atom3110+(0.5)*atom3139*L_RAIL;
atom3181 = atom3143^2;
atom3189 = (atom3181+atom3145^2)^(-1/2);
atom3190 = atom3189*atom3143;
atom65476 = -epsiFFL*atom3190*bFFL*G_elastic*C11FFL*aFFL;
atom3191 = atom3145*atom3189;
atom1019 = sin(bFBOG);
atom1018 = cos(bFBOG);
atom1016 = cos(aFBOG);
atom1023 = atom1018*atom1016;
atom2741 = -L_OBOG_OWHS*atom1019;
atom22217 = atom2741+atom1023*zFWHSF;
atom1172 = cos(bWAG);
atom1174 = cos(aWAG);
atom22218 = zFBOG+atom22217;
atom1195 = atom1172*atom1174;
atom1173 = sin(bWAG);
atom1021 = atom1019*atom1016;
atom2733 = atom1018*L_OBOG_OWHS;
atom22214 = atom1021*zFWHSF+atom2733;
atom1496 = cos(cFSLD);
atom1017 = sin(aFBOG);
atom1497 = sin(cFSLD);
atom22215 = -zFWHSF*atom1017;
atom0 = -1/2*L_WAG;
atom22221 = -atom1497*atom22215+atom22214*atom1496;
atom1194 = -atom1173*atom1174;
atom22225 = -atom0+atom22221;
atom1175 = sin(aWAG);
atom22224 = atom1496*atom22215+atom1497*atom22214;
atom22240 = atom1194*atom22225+atom22218*atom1195+atom1175*atom22224;
atom498 = sin(aFWHSF);
atom1702 = -(0.5)*L_WHS;
atom2988 = -atom498*atom1702+zFWHSF;
atom497 = cos(aFWHSF);
atom2730 = atom497*atom1702;
atom2993 = -atom1017*atom2988-atom1016*atom2730;
atom2991 = atom1021*atom2988+atom2733-atom1019*atom2730*atom1017;
atom3003 = atom1497*atom2991+atom2993*atom1496;
atom3004 = atom2991*atom1496-atom0-atom1497*atom2993;
atom1022 = atom1018*atom1017;
atom2997 = atom2741+zFBOG+atom1023*atom2988-atom2730*atom1022;
atom2978 = uW_FFL-lW_FFL;
atom2984 = dW_FFL+atom2978*(atom2978*(atom2978*aW_FFL+bW_FFL)+cW_FFL);
atom1512 = atom1194*atom1496+atom1497*atom1175;
atom1533 = atom1018*atom1195+atom1019*atom1512;
atom1514 = atom1175*atom1496;
atom1515 = atom1514-atom1497*atom1194;
atom1551 = -atom1515*atom1017+atom1016*atom1533;
atom1548 = atom1533*atom1017+atom1515*atom1016;
atom2987 = cos(thetaW_FFL)*atom2984;
atom1574 = -atom498*atom1548+atom497*atom1551;
atom1571 = atom497*atom1548+atom498*atom1551;
atom1530 = -atom1019*atom1195+atom1018*atom1512;
atom2985 = -sin(thetaW_FFL)*atom2984;
atom1176 = cos(cWAG);
atom22357 = uW_FFL*atom1571+atom3004*atom1194+atom1175*atom3003+atom2987*atom1574-atom22240+atom1530*atom2985+atom2997*atom1195;
atom58338 = -atom1176*atom22240;
atom65340 = atom58338-atom1176*atom22357;
atom1177 = sin(cWAG);
atom58337 = atom22240*atom1177;
atom65342 = (atom58337+atom22357*atom1177)*atom3190+atom3191*atom65340;
atom1181 = -atom1175*atom1176;
atom1191 = atom1177*atom1173;
atom1193 = atom1191+atom1172*atom1181;
atom1180 = atom1176*atom1174;
atom1190 = -atom1181*atom1173+atom1172*atom1177;
atom22235 = atom1193*atom22218+atom1180*atom22224+atom1190*atom22225;
atom1506 = atom1190*atom1496+atom1497*atom1180;
atom1527 = atom1019*atom1506+atom1193*atom1018;
atom1509 = atom1180*atom1496-atom1497*atom1190;
atom1545 = atom1527*atom1016-atom1017*atom1509;
atom1542 = atom1016*atom1509+atom1527*atom1017;
atom1565 = atom497*atom1542+atom498*atom1545;
atom1524 = -atom1193*atom1019+atom1018*atom1506;
atom1568 = atom497*atom1545-atom498*atom1542;
atom22356 = atom3004*atom1190+atom2987*atom1568+uW_FFL*atom1565+atom1193*atom2997+atom1180*atom3003-atom22235+atom2985*atom1524;
atom58345 = -atom1175*atom22235+atom1180*atom22240;
atom1178 = -atom1177*atom1174;
atom1179 = atom1175*atom1177;
atom1184 = atom1172*atom1176-atom1173*atom1179;
atom1185 = atom1176*atom1173;
atom1187 = atom1172*atom1179+atom1185;
atom22230 = atom22225*atom1184+atom22218*atom1187+atom22224*atom1178;
atom1500 = atom1496*atom1184+atom1497*atom1178;
atom1518 = atom1018*atom1500-atom1019*atom1187;
atom1521 = atom1019*atom1500+atom1018*atom1187;
atom1503 = atom1496*atom1178-atom1497*atom1184;
atom1536 = atom1521*atom1017+atom1503*atom1016;
atom1539 = -atom1503*atom1017+atom1016*atom1521;
atom1559 = atom497*atom1536+atom498*atom1539;
atom1562 = atom497*atom1539-atom498*atom1536;
atom22355 = atom2987*atom1562+uW_FFL*atom1559+atom2997*atom1187+atom2985*atom1518+atom3003*atom1178+atom3004*atom1184-atom22230;
atom58348 = -atom22240*atom1178+atom1175*atom22230;
atom65351 = atom58348+atom1175*atom22355-atom22357*atom1178;
atom65353 = atom65351*atom3191+atom3190*(atom1180*atom22357-atom22356*atom1175+atom58345);
atom65356 = atom22355+atom22230;
atom65358 = atom65356*atom3191-atom3190*(atom22356+atom22235);
atom3814 = -atom1175*atom1172;
atom60833 = -atom3814*atom1177+atom1185;
atom42760 = atom1180*atom22221-atom22224*atom1190;
atom65367 = -atom22357*atom60833+atom42760+atom1195*atom22355;
atom60839 = atom1191+atom1176*atom3814;
atom42906 = -atom22224*atom1184+atom22221*atom1178;
atom65369 = -atom3190*(atom22356*atom1195-atom42906-atom22357*atom60839)+atom65367*atom3191;
atom9193 = atom3190*atom1187+atom1193*atom3191;
atom58356 = -atom1019*atom22214-atom1018*atom22217;
atom58358 = -atom1019*atom22215;
atom58364 = -atom1497*atom58358+atom58356*atom1496;
atom58360 = -atom58358*atom1496-atom1497*atom58356;
atom58367 = atom1018*atom22215;
atom40899 = atom1497*atom1018;
atom41956 = atom1018*atom1496;
atom64442 = -atom1172*atom1019-atom41956*atom1173;
atom64453 = atom64442*atom1174+atom1175*atom40899;
atom40896 = -atom1019*atom1173;
atom64448 = atom40896+atom41956*atom1172;
atom64445 = atom40899*atom1174-atom1175*atom64442;
atom64450 = atom1176*atom64448-atom64445*atom1177;
atom58374 = atom1193*atom58367+atom58364*atom1180+atom1190*atom58360;
atom65377 = atom64453*atom22355-atom64450*atom22357;
atom65378 = atom58374+atom65377;
atom64461 = atom1176*atom64445+atom64448*atom1177;
atom58369 = atom58360*atom1184+atom58364*atom1178+atom1187*atom58367;
atom65372 = -atom22356*atom64453+atom22357*atom64461;
atom65380 = atom3190*(atom58369+atom65372)+atom3191*atom65378;
atom42824 = atom22217*atom1496;
atom42819 = atom1497*atom22217;
atom40804 = -atom1497*atom1172;
atom40806 = atom1497*atom1173;
atom64468 = atom1496*atom1174-atom1175*atom40806;
atom64471 = -atom1177*atom64468+atom1176*atom40804;
atom40875 = atom40806*atom1174+atom1514;
atom42841 = -atom1193*atom22214+atom1180*atom42819+atom42824*atom1190;
atom65389 = atom42841+atom40875*atom22355-atom22357*atom64471;
atom64480 = atom1176*atom64468+atom1177*atom40804;
atom42934 = atom42824*atom1184-atom22214*atom1187+atom1178*atom42819;
atom65391 = atom3190*(atom42934+atom22357*atom64480-atom40875*atom22356)+atom65389*atom3191;
atom6041 = atom1497*atom1017+atom1021*atom1496;
atom6036 = -atom1496*atom1017;
atom6037 = atom1497*atom1021+atom6036;
atom6044 = atom1193*atom1023+atom1190*atom6041+atom1180*atom6037;
atom9202 = atom3190*(atom1023*atom1187+atom6041*atom1184+atom6037*atom1178)+atom6044*atom3191;
atom65394 = atom65377*atom3191+atom3190*atom65372;
atom42093 = -atom497*atom1017-atom498*atom1016;
atom64491 = -atom1019*atom42093;
atom42081 = -atom498*atom1017+atom497*atom1016;
atom64500 = atom1497*atom64491+atom42081*atom1496;
atom64494 = atom64491*atom1496-atom1497*atom42081;
atom64489 = -atom1018*atom42093;
atom64496 = atom1172*atom64489-atom1173*atom64494;
atom64512 = atom1175*atom64500+atom64496*atom1174;
atom64506 = atom1172*atom64494+atom1173*atom64489;
atom64502 = -atom1175*atom64496+atom64500*atom1174;
atom64519 = atom1176*atom64502+atom64506*atom1177;
atom64508 = atom64506*atom1176-atom64502*atom1177;
atom65401 = -atom64508*atom22357+atom64512*atom22355;
atom65403 = atom3190*(atom22357*atom64519-atom22356*atom64512)+atom65401*atom3191;
atom65477 = -epsiFFL*bFFL*G_elastic*C11FFL*atom3191*aFFL;
atom3077 = uR_FFL-lR_FFL;
atom3078 = aR_FFL*atom3077;
atom3079 = atom3078+bR_FFL;
atom3148 = cR_FFL+atom3079*atom3077+atom3077*(atom3079+atom3078);
atom3194 = (1+atom3148^2)^(-1/2);
atom65478 = -epsiFFL*bFFL*atom3194*G_elastic*C22FFL*aFFL;
atom3195 = atom3194*atom3148;
atom58341 = atom1176*atom22235-atom1177*atom22230;
atom65410 = atom3194*atom65340+(atom22356*atom1176+atom58341-atom1177*atom22355)*atom3195;
atom3149 = atom3145*atom3148;
atom3150 = -atom3143*atom3148;
atom3183 = (atom3181+atom3149^2+atom3150^2)^(-1/2);
atom3185 = atom3150*atom3183;
atom3184 = atom3183*atom3149;
atom65480 = sqrt(bFFL*aFFL);
atom65451 = atom3185*atom1177+atom1176*atom3184;
atom65481 = -epsiFFL*C23FFL*bFFL*atom3194*G_elastic*atom65480*aFFL;
atom3186 = atom3183*atom3143;
atom65456 = atom1180*atom3185+atom1178*atom3184+atom3186*atom1175;
atom58351 = -atom1180*atom22230+atom22235*atom1178;
atom65417 = (atom58351-atom1180*atom22355+atom22356*atom1178)*atom3195+atom65351*atom3194;
atom65418 = atom65356*atom3194;
atom42756 = atom1175*atom22221-atom22224*atom1194;
atom65425 = atom65367*atom3194+(atom22356*atom60833-atom60839*atom22355+atom42756)*atom3195;
atom65460 = atom60833*atom3184+atom3186*atom1195+atom60839*atom3185;
atom9242 = atom1193*atom3194+atom1195*atom3195;
atom65465 = atom3186*atom64453+atom3185*atom64461+atom64450*atom3184;
atom58379 = atom1194*atom58360+atom1195*atom58367+atom58364*atom1175;
atom65428 = atom22356*atom64450-atom22355*atom64461;
atom65432 = (atom58379+atom65428)*atom3195+atom3194*atom65378;
atom65589 = atom65481*atom65465;
atom65470 = atom3185*atom64480+atom3186*atom40875+atom64471*atom3184;
atom42835 = atom1175*atom42819+atom42824*atom1194-atom22214*atom1195;
atom65439 = atom65389*atom3194+(atom42835-atom64480*atom22355+atom22356*atom64471)*atom3195;
atom9251 = (atom1175*atom6037+atom1194*atom6041+atom1023*atom1195)*atom3195+atom6044*atom3194;
atom65442 = atom3194*atom65377+atom65428*atom3195;
atom65448 = atom65401*atom3194+(atom22356*atom64508-atom64519*atom22355)*atom3195;
atom65475 = atom3185*atom64519+atom64508*atom3184+atom3186*atom64512;
atom65482 = -epsiFFL*bFFL*G_elastic*C22FFL*atom3195*aFFL;
atom65483 = -epsiFFL*C23FFL*bFFL*G_elastic*atom3195*atom65480*aFFL;
atom65624 = atom65465*atom65483;
atom40803 = atom1172*atom1496;
atom40902 = atom1019*atom40803+atom1018*atom1173;
atom41903 = -atom1017*atom40804+atom40902*atom1016;
atom41900 = atom40902*atom1017+atom1016*atom40804;
atom42084 = -atom41900*atom498+atom497*atom41903;
atom40898 = atom1018*atom40803+atom40896;
atom42072 = atom41900*atom497+atom41903*atom498;
atom59897 = atom40898*atom1518+atom1562*atom42084+atom1559*atom42072;
atom59883 = atom42072*atom1571+atom42084*atom1574+atom1530*atom40898;
atom60136 = atom59883*atom22355+atom58338-atom22357*atom59897;
atom59889 = atom40898*atom1524+atom42072*atom1565+atom42084*atom1568;
atom65484 = -epsiFFL*bFFL*G_elastic*C11FFL*(atom3190*(atom58337+atom22357*atom59889-atom22356*atom59883)+atom3191*atom60136)*aFFL;
atom65260 = (atom22356*atom59897+atom58341-atom59889*atom22355)*atom3195+atom3194*atom60136;
atom22354 = atom3186*atom1571+atom3185*atom1565+atom1559*atom3184;
atom65271 = atom3186*atom1530+atom3185*atom1524+atom3184*atom1518;
atom65265 = atom1562*atom3184+atom3185*atom1568+atom3186*atom1574;
atom65275 = atom22354*atom42072+atom65265*atom42084+atom40898*atom65271;
atom65487 = epsiFFL*atom65275*C23FFL*bFFL*G_elastic*atom65480*aFFL-epsiFFL*bFFL*G_elastic*C22FFL*atom65260*aFFL;
atom65489 = bFFL^2;
atom65490 = aFFL^2;
atom65492 = -epsiFFL*atom65275*G_elastic*atom65489*C33FFL*atom65490-epsiFFL*C23FFL*bFFL*G_elastic*atom65260*atom65480*aFFL;
atom65666 = atom65492*atom65465;
atom40903 = atom1497*atom1019;
atom41905 = atom40903*atom1017+atom1016*atom1496;
atom41907 = atom1016*atom40903+atom6036;
atom42075 = atom497*atom41905+atom498*atom41907;
atom42087 = atom497*atom41907-atom41905*atom498;
atom59920 = atom42087*atom1574+atom42075*atom1571+atom1530*atom40899;
atom59926 = atom1524*atom40899+atom42087*atom1568+atom42075*atom1565;
atom59934 = atom40899*atom1518+atom1562*atom42087+atom42075*atom1559;
atom60158 = -atom22357*atom59934+atom58348+atom59920*atom22355;
atom65493 = -epsiFFL*(atom3190*(atom22357*atom59926+atom58345-atom22356*atom59920)+atom3191*atom60158)*bFFL*G_elastic*C11FFL*aFFL;
atom65286 = atom22354*atom42075+atom65265*atom42087+atom65271*atom40899;
atom65281 = (atom58351-atom59926*atom22355+atom22356*atom59934)*atom3195+atom3194*atom60158;
atom65496 = -epsiFFL*atom65281*bFFL*G_elastic*C22FFL*aFFL+epsiFFL*atom65286*C23FFL*bFFL*G_elastic*atom65480*aFFL;
atom65499 = -epsiFFL*atom65281*C23FFL*bFFL*G_elastic*atom65480*aFFL-epsiFFL*atom65286*G_elastic*atom65489*C33FFL*atom65490;
atom65716 = atom65499*atom65465;
atom59955 = atom1530^2+atom1574^2+atom1571^2;
atom59959 = atom1571*atom1565+atom1530*atom1524+atom1574*atom1568;
atom59965 = atom1562*atom1574+atom1559*atom1571+atom1530*atom1518;
atom60180 = atom59955*atom22355-atom59965*atom22357+atom22230;
atom65500 = -epsiFFL*bFFL*G_elastic*(atom60180*atom3191+atom3190*(atom22357*atom59959-atom22356*atom59955-atom22235))*C11FFL*aFFL;
atom65297 = atom22354*atom1571+atom65265*atom1574+atom1530*atom65271;
atom65292 = atom60180*atom3194+atom3195*(atom22356*atom59965-atom59959*atom22355);
atom65503 = -epsiFFL*bFFL*G_elastic*C22FFL*atom65292*aFFL+epsiFFL*C23FFL*bFFL*G_elastic*atom65297*atom65480*aFFL;
atom65506 = -epsiFFL*G_elastic*atom65489*C33FFL*atom65297*atom65490-epsiFFL*C23FFL*bFFL*G_elastic*atom65292*atom65480*aFFL;
atom65766 = atom65506*atom65465;
atom42090 = atom497*atom1023-atom498*atom1022;
atom42078 = atom497*atom1022+atom1023*atom498;
atom59989 = atom42078*atom1565+atom42090*atom1568-atom1019*atom1524;
atom59985 = atom42078*atom1571+atom42090*atom1574-atom1530*atom1019;
atom59995 = atom1559*atom42078-atom1019*atom1518+atom1562*atom42090;
atom60201 = atom59985*atom22355-atom22357*atom59995+atom42760;
atom65507 = -((atom59989*atom22357+atom42906-atom22356*atom59985)*atom3190+atom60201*atom3191)*epsiFFL*bFFL*G_elastic*C11FFL*aFFL;
atom65303 = -(atom59989*atom22355-atom42756-atom22356*atom59995)*atom3195+atom60201*atom3194;
atom65308 = atom42090*atom65265-atom1019*atom65271+atom22354*atom42078;
atom65510 = -epsiFFL*atom65303*bFFL*G_elastic*C22FFL*aFFL+epsiFFL*C23FFL*bFFL*G_elastic*atom65480*aFFL*atom65308;
atom65513 = -epsiFFL*atom65303*C23FFL*bFFL*G_elastic*atom65480*aFFL-epsiFFL*G_elastic*atom65489*C33FFL*atom65490*atom65308;
atom65816 = atom65513*atom65465;
atom65514 = -epsiFFL*bFFL*G_elastic*atom9193*C11FFL*aFFL;
atom65515 = -epsiFFL*bFFL*atom9242*G_elastic*C22FFL*aFFL;
atom65516 = -epsiFFL*C23FFL*bFFL*atom9242*G_elastic*atom65480*aFFL;
atom65866 = atom65516*atom65465;
atom60218 = atom22357*atom1524-atom22356*atom1530;
atom60222 = -atom22357*atom1518+atom1530*atom22355;
atom60223 = atom58374+atom60222;
atom65517 = -epsiFFL*bFFL*(atom60223*atom3191+atom3190*(atom58369+atom60218))*G_elastic*C11FFL*aFFL;
atom60226 = atom22356*atom1518-atom1524*atom22355;
atom65314 = (atom60226+atom58379)*atom3195+atom60223*atom3194;
atom65519 = epsiFFL*C23FFL*bFFL*G_elastic*atom65271*atom65480*aFFL;
atom65520 = -epsiFFL*bFFL*G_elastic*atom65314*C22FFL*aFFL+atom65519;
atom65522 = -epsiFFL*G_elastic*atom65489*C33FFL*atom65271*atom65490;
atom65523 = -epsiFFL*C23FFL*bFFL*G_elastic*atom65314*atom65480*aFFL+atom65522;
atom65916 = atom65523*atom65465;
atom60036 = atom42081*atom1571+atom42093*atom1574;
atom60046 = atom1559*atom42081+atom1562*atom42093;
atom60243 = -atom60046*atom22357+atom42841+atom60036*atom22355;
atom60040 = atom42093*atom1568+atom42081*atom1565;
atom65524 = -epsiFFL*bFFL*(atom3191*atom60243+atom3190*(atom42934+atom60040*atom22357-atom22356*atom60036))*G_elastic*C11FFL*aFFL;
atom65320 = atom3194*atom60243+(atom42835-atom60040*atom22355+atom22356*atom60046)*atom3195;
atom65323 = atom65265*atom42093+atom22354*atom42081;
atom65527 = epsiFFL*C23FFL*bFFL*atom65323*G_elastic*atom65480*aFFL-epsiFFL*bFFL*G_elastic*atom65320*C22FFL*aFFL;
atom65530 = -epsiFFL*atom65323*G_elastic*atom65489*C33FFL*atom65490-epsiFFL*C23FFL*bFFL*G_elastic*atom65320*atom65480*aFFL;
atom65966 = atom65530*atom65465;
atom65531 = -epsiFFL*atom9202*bFFL*G_elastic*C11FFL*aFFL;
atom65532 = -epsiFFL*bFFL*G_elastic*C22FFL*atom9251*aFFL;
atom65533 = -epsiFFL*C23FFL*bFFL*G_elastic*atom9251*atom65480*aFFL;
atom66016 = atom65533*atom65465;
atom65534 = -epsiFFL*(atom3190*atom60218+atom60222*atom3191)*bFFL*G_elastic*C11FFL*aFFL;
atom65329 = atom60226*atom3195+atom3194*atom60222;
atom65536 = atom65519-epsiFFL*bFFL*G_elastic*atom65329*C22FFL*aFFL;
atom65538 = atom65522-epsiFFL*C23FFL*bFFL*G_elastic*atom65329*atom65480*aFFL;
atom66066 = atom65538*atom65465;
atom60268 = atom1571*atom22355-atom1559*atom22357;
atom65539 = epsiFFL*(atom3190*(atom22356*atom1571-atom22357*atom1565)-atom60268*atom3191)*bFFL*G_elastic*C11FFL*aFFL;
atom65335 = atom3194*atom60268+atom3195*(atom22356*atom1559-atom22355*atom1565);
atom65542 = -epsiFFL*bFFL*G_elastic*atom65335*C22FFL*aFFL+epsiFFL*C23FFL*bFFL*atom22354*G_elastic*atom65480*aFFL;
atom65545 = -epsiFFL*atom22354*G_elastic*atom65489*C33FFL*atom65490-epsiFFL*C23FFL*bFFL*G_elastic*atom65335*atom65480*aFFL;
atom66116 = atom65545*atom65465;

CKFFL_ = [atom3190*atom65476 , atom3191*atom65476 , 0 , atom65342*atom65476 , atom65353*atom65476 , atom65358*atom65476 , 0 , atom65369*atom65476 , 0 , 0 , 0 , atom9193*atom65476 , atom65380*atom65476 , atom65391*atom65476 , 0 , 0 , 0 , 0 , 0 , 0 , atom9202*atom65476 , atom65394*atom65476 , atom65403*atom65476 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom65477*atom3190 , atom65478*atom3194+atom65477*atom3191 , atom65478*atom3195 , atom65477*atom65342+atom65451*atom65481+atom65478*atom65410 , atom65477*atom65353+atom65456*atom65481+atom65417*atom65478 , atom3186*atom65481+atom65477*atom65358+atom65478*atom65418 , 0 , atom65478*atom65425+atom65477*atom65369+atom65460*atom65481 , 0 , 0 , 0 , atom65478*atom9242+atom65477*atom9193 , atom65589+atom65477*atom65380+atom65478*atom65432 , atom65481*atom65470+atom65478*atom65439+atom65477*atom65391 , 0 , 0 , 0 , 0 , 0 , 0 , atom65478*atom9251+atom65477*atom9202 , atom65477*atom65394+atom65478*atom65442+atom65589 , atom65481*atom65475+atom65478*atom65448+atom65477*atom65403 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , atom3194*atom65482 , atom65482*atom3195 , atom65410*atom65482+atom65451*atom65483 , atom65417*atom65482+atom65456*atom65483 , atom65418*atom65482+atom3186*atom65483 , 0 , atom65425*atom65482+atom65460*atom65483 , 0 , 0 , 0 , atom9242*atom65482 , atom65432*atom65482+atom65624 , atom65470*atom65483+atom65439*atom65482 , 0 , 0 , 0 , 0 , 0 , 0 , atom65482*atom9251 , atom65442*atom65482+atom65624 , atom65475*atom65483+atom65448*atom65482 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3190*atom65484 , atom3194*atom65487+atom3191*atom65484 , atom65487*atom3195 , atom65451*atom65492+atom65342*atom65484+atom65487*atom65410 , atom65456*atom65492+atom65417*atom65487+atom65353*atom65484 , atom65487*atom65418+atom3186*atom65492+atom65358*atom65484 , 0 , atom65369*atom65484+atom65492*atom65460+atom65425*atom65487 , 0 , 0 , 0 , atom9193*atom65484+atom9242*atom65487 , atom65487*atom65432+atom65380*atom65484+atom65666 , atom65439*atom65487+atom65492*atom65470+atom65391*atom65484 , 0 , 0 , 0 , 0 , 0 , 0 , atom9202*atom65484+atom65487*atom9251 , atom65394*atom65484+atom65666+atom65487*atom65442 , atom65487*atom65448+atom65403*atom65484+atom65492*atom65475 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3190*atom65493 , atom3194*atom65496+atom3191*atom65493 , atom65496*atom3195 , atom65342*atom65493+atom65496*atom65410+atom65499*atom65451 , atom65417*atom65496+atom65456*atom65499+atom65353*atom65493 , atom65496*atom65418+atom3186*atom65499+atom65358*atom65493 , 0 , atom65369*atom65493+atom65425*atom65496+atom65499*atom65460 , 0 , 0 , 0 , atom9242*atom65496+atom9193*atom65493 , atom65716+atom65380*atom65493+atom65496*atom65432 , atom65439*atom65496+atom65391*atom65493+atom65499*atom65470 , 0 , 0 , 0 , 0 , 0 , 0 , atom9202*atom65493+atom65496*atom9251 , atom65716+atom65394*atom65493+atom65496*atom65442 , atom65499*atom65475+atom65403*atom65493+atom65496*atom65448 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3190*atom65500 , atom3191*atom65500+atom65503*atom3194 , atom65503*atom3195 , atom65506*atom65451+atom65342*atom65500+atom65503*atom65410 , atom65353*atom65500+atom65456*atom65506+atom65417*atom65503 , atom65358*atom65500+atom65503*atom65418+atom3186*atom65506 , 0 , atom65506*atom65460+atom65369*atom65500+atom65503*atom65425 , 0 , 0 , 0 , atom9193*atom65500+atom65503*atom9242 , atom65503*atom65432+atom65766+atom65380*atom65500 , atom65391*atom65500+atom65506*atom65470+atom65439*atom65503 , 0 , 0 , 0 , 0 , 0 , 0 , atom9202*atom65500+atom65503*atom9251 , atom65766+atom65394*atom65500+atom65503*atom65442 , atom65403*atom65500+atom65506*atom65475+atom65503*atom65448 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3190*atom65507 , atom65510*atom3194+atom65507*atom3191 , atom65510*atom3195 , atom65510*atom65410+atom65513*atom65451+atom65342*atom65507 , atom65353*atom65507+atom65417*atom65510+atom65456*atom65513 , atom65358*atom65507+atom3186*atom65513+atom65510*atom65418 , 0 , atom65513*atom65460+atom65510*atom65425+atom65369*atom65507 , 0 , 0 , 0 , atom65510*atom9242+atom9193*atom65507 , atom65510*atom65432+atom65816+atom65380*atom65507 , atom65513*atom65470+atom65507*atom65391+atom65510*atom65439 , 0 , 0 , 0 , 0 , 0 , 0 , atom65510*atom9251+atom9202*atom65507 , atom65510*atom65442+atom65816+atom65394*atom65507 , atom65403*atom65507+atom65510*atom65448+atom65513*atom65475 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3190*atom65514 , atom65514*atom3191+atom3194*atom65515 , atom65515*atom3195 , atom65451*atom65516+atom65515*atom65410+atom65342*atom65514 , atom65456*atom65516+atom65353*atom65514+atom65417*atom65515 , atom3186*atom65516+atom65358*atom65514+atom65418*atom65515 , 0 , atom65460*atom65516+atom65369*atom65514+atom65425*atom65515 , 0 , 0 , 0 , atom9193*atom65514+atom9242*atom65515 , atom65432*atom65515+atom65866+atom65380*atom65514 , atom65514*atom65391+atom65516*atom65470+atom65439*atom65515 , 0 , 0 , 0 , 0 , 0 , 0 , atom9202*atom65514+atom65515*atom9251 , atom65394*atom65514+atom65866+atom65515*atom65442 , atom65403*atom65514+atom65475*atom65516+atom65515*atom65448 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3190*atom65517 , atom65517*atom3191+atom3194*atom65520 , atom65520*atom3195 , atom65520*atom65410+atom65342*atom65517+atom65451*atom65523 , atom65456*atom65523+atom65417*atom65520+atom65353*atom65517 , atom3186*atom65523+atom65520*atom65418+atom65358*atom65517 , 0 , atom65369*atom65517+atom65460*atom65523+atom65425*atom65520 , 0 , 0 , 0 , atom65517*atom9193+atom9242*atom65520 , atom65380*atom65517+atom65520*atom65432+atom65916 , atom65523*atom65470+atom65517*atom65391+atom65439*atom65520 , 0 , 0 , 0 , 0 , 0 , 0 , atom65520*atom9251+atom9202*atom65517 , atom65520*atom65442+atom65394*atom65517+atom65916 , atom65520*atom65448+atom65523*atom65475+atom65403*atom65517 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3190*atom65524 , atom65527*atom3194+atom65524*atom3191 , atom65527*atom3195 , atom65342*atom65524+atom65527*atom65410+atom65451*atom65530 , atom65417*atom65527+atom65456*atom65530+atom65524*atom65353 , atom3186*atom65530+atom65358*atom65524+atom65527*atom65418 , 0 , atom65425*atom65527+atom65369*atom65524+atom65530*atom65460 , 0 , 0 , 0 , atom9242*atom65527+atom65524*atom9193 , atom65966+atom65380*atom65524+atom65527*atom65432 , atom65439*atom65527+atom65530*atom65470+atom65524*atom65391 , 0 , 0 , 0 , 0 , 0 , 0 , atom65527*atom9251+atom9202*atom65524 , atom65966+atom65524*atom65394+atom65527*atom65442 , atom65530*atom65475+atom65527*atom65448+atom65403*atom65524 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3190*atom65531 , atom3191*atom65531+atom65532*atom3194 , atom65532*atom3195 , atom65451*atom65533+atom65342*atom65531+atom65532*atom65410 , atom65456*atom65533+atom65417*atom65532+atom65353*atom65531 , atom3186*atom65533+atom65532*atom65418+atom65358*atom65531 , 0 , atom65533*atom65460+atom65369*atom65531+atom65532*atom65425 , 0 , 0 , 0 , atom9193*atom65531+atom65532*atom9242 , atom65532*atom65432+atom65380*atom65531+atom66016 , atom65533*atom65470+atom65439*atom65532+atom65391*atom65531 , 0 , 0 , 0 , 0 , 0 , 0 , atom65532*atom9251+atom9202*atom65531 , atom65394*atom65531+atom66016+atom65532*atom65442 , atom65403*atom65531+atom65532*atom65448+atom65533*atom65475 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3190*atom65534 , atom3191*atom65534+atom3194*atom65536 , atom65536*atom3195 , atom65451*atom65538+atom65342*atom65534+atom65536*atom65410 , atom65456*atom65538+atom65353*atom65534+atom65417*atom65536 , atom3186*atom65538+atom65358*atom65534+atom65418*atom65536 , 0 , atom65369*atom65534+atom65460*atom65538+atom65425*atom65536 , 0 , 0 , 0 , atom9193*atom65534+atom9242*atom65536 , atom65536*atom65432+atom66066+atom65380*atom65534 , atom65391*atom65534+atom65538*atom65470+atom65439*atom65536 , 0 , 0 , 0 , 0 , 0 , 0 , atom9202*atom65534+atom65536*atom9251 , atom65394*atom65534+atom66066+atom65536*atom65442 , atom65403*atom65534+atom65475*atom65538+atom65536*atom65448 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3190*atom65539 , atom65539*atom3191+atom65542*atom3194 , atom65542*atom3195 , atom65545*atom65451+atom65342*atom65539+atom65542*atom65410 , atom65456*atom65545+atom65539*atom65353+atom65417*atom65542 , atom3186*atom65545+atom65542*atom65418+atom65358*atom65539 , 0 , atom65369*atom65539+atom65545*atom65460+atom65542*atom65425 , 0 , 0 , 0 , atom65539*atom9193+atom65542*atom9242 , atom65542*atom65432+atom66116+atom65380*atom65539 , atom65545*atom65470+atom65539*atom65391+atom65439*atom65542 , 0 , 0 , 0 , 0 , 0 , 0 , atom65542*atom9251+atom9202*atom65539 , atom66116+atom65394*atom65539+atom65542*atom65442 , atom65403*atom65539+atom65545*atom65475+atom65542*atom65448 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0];

%endfunction
