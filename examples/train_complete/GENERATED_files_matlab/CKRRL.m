function CKRRL_ = CKRRL(q,qaux,dq,time,param)

xWAG = q( 1 ); 
yWAG = q( 2 ); 
zWAG = q( 3 ); 
aWAG = q( 4 ); 
bWAG = q( 5 ); 
cWAG = q( 6 ); 
cRSLD = q( 7 ); 
cFSLD = q( 8 ); 
zRBOG = q( 9 ); 
aRBOG = q( 10 ); 
bRBOG = q( 11 ); 
zFBOG = q( 12 ); 
aFBOG = q( 13 ); 
bFBOG = q( 14 ); 
zRWHSF = q( 15 ); 
aRWHSF = q( 16 ); 
bRWHSF = q( 17 ); 
zRWHSR = q( 18 ); 
aRWHSR = q( 19 ); 
bRWHSR = q( 20 ); 
zFWHSF = q( 21 ); 
aFWHSF = q( 22 ); 
bFWHSF = q( 23 ); 
zFWHSR = q( 24 ); 
aFWHSR = q( 25 ); 
bFWHSR = q( 26 ); 
bRAXBFL = q( 27 ); 
bRAXBFR = q( 28 ); 
bRAXBRL = q( 29 ); 
bRAXBRR = q( 30 ); 
bFAXBFL = q( 31 ); 
bFAXBFR = q( 32 ); 
bFAXBRL = q( 33 ); 
bFAXBRR = q( 34 ); 
xRMOTF = q( 35 ); 
yRMOTF = q( 36 ); 
zRMOTF = q( 37 ); 
bRMOTF = q( 38 ); 
xRMOTR = q( 39 ); 
yRMOTR = q( 40 ); 
zRMOTR = q( 41 ); 
bRMOTR = q( 42 ); 
bRROTF = q( 43 ); 
bRROTR = q( 44 ); 

thetaW_RFR = qaux( 1 ); 
uW_RFR = qaux( 2 ); 
uR_RFR = qaux( 3 ); 
xR_RFR = qaux( 4 ); 
thetaW_RFL = qaux( 5 ); 
uW_RFL = qaux( 6 ); 
uR_RFL = qaux( 7 ); 
xR_RFL = qaux( 8 ); 
thetaW_RRR = qaux( 9 ); 
uW_RRR = qaux( 10 ); 
uR_RRR = qaux( 11 ); 
xR_RRR = qaux( 12 ); 
thetaW_RRL = qaux( 13 ); 
uW_RRL = qaux( 14 ); 
uR_RRL = qaux( 15 ); 
xR_RRL = qaux( 16 ); 
thetaW_FFR = qaux( 17 ); 
uW_FFR = qaux( 18 ); 
uR_FFR = qaux( 19 ); 
xR_FFR = qaux( 20 ); 
thetaW_FFL = qaux( 21 ); 
uW_FFL = qaux( 22 ); 
uR_FFL = qaux( 23 ); 
xR_FFL = qaux( 24 ); 
thetaW_FRR = qaux( 25 ); 
uW_FRR = qaux( 26 ); 
uR_FRR = qaux( 27 ); 
xR_FRR = qaux( 28 ); 
thetaW_FRL = qaux( 29 ); 
uW_FRL = qaux( 30 ); 
uR_FRL = qaux( 31 ); 
xR_FRL = qaux( 32 ); 

dxWAG = dq( 1 ); 
dyWAG = dq( 2 ); 
dzWAG = dq( 3 ); 
daWAG = dq( 4 ); 
dbWAG = dq( 5 ); 
dcWAG = dq( 6 ); 
dcRSLD = dq( 7 ); 
dcFSLD = dq( 8 ); 
dzRBOG = dq( 9 ); 
daRBOG = dq( 10 ); 
dbRBOG = dq( 11 ); 
dzFBOG = dq( 12 ); 
daFBOG = dq( 13 ); 
dbFBOG = dq( 14 ); 
dzRWHSF = dq( 15 ); 
daRWHSF = dq( 16 ); 
dbRWHSF = dq( 17 ); 
dzRWHSR = dq( 18 ); 
daRWHSR = dq( 19 ); 
dbRWHSR = dq( 20 ); 
dzFWHSF = dq( 21 ); 
daFWHSF = dq( 22 ); 
dbFWHSF = dq( 23 ); 
dzFWHSR = dq( 24 ); 
daFWHSR = dq( 25 ); 
dbFWHSR = dq( 26 ); 
dbRAXBFL = dq( 27 ); 
dbRAXBFR = dq( 28 ); 
dbRAXBRL = dq( 29 ); 
dbRAXBRR = dq( 30 ); 
dbFAXBFL = dq( 31 ); 
dbFAXBFR = dq( 32 ); 
dbFAXBRL = dq( 33 ); 
dbFAXBRR = dq( 34 ); 
dxRMOTF = dq( 35 ); 
dyRMOTF = dq( 36 ); 
dzRMOTF = dq( 37 ); 
dbRMOTF = dq( 38 ); 
dxRMOTR = dq( 39 ); 
dyRMOTR = dq( 40 ); 
dzRMOTR = dq( 41 ); 
dbRMOTR = dq( 42 ); 
dbRROTF = dq( 43 ); 
dbRROTR = dq( 44 ); 

t= time ;

g = param( 1 ); 
L_OBOG_OAXBy = param( 2 ); 
L_OBOG_OAXBz = param( 3 ); 
L_OBOG_OSUSPy = param( 4 ); 
L_OBOG_OSUSPx = param( 5 ); 
L_OBOG_OSUSPz = param( 6 ); 
L_OBOG_OWHS = param( 7 ); 
L_OBOG_P1BOG = param( 8 ); 
L_MOT = param( 9 ); 
L_GEAR = param( 10 ); 
L_AXB1 = param( 11 ); 
L_AXB2 = param( 12 ); 
L_SUSP = param( 13 ); 
L_WHS = param( 14 ); 
L_RAIL = param( 15 ); 
L_WAG = param( 16 ); 
L_SUSPBEAM1 = param( 17 ); 
L_SUSPBEAM2 = param( 18 ); 
L_SLDx = param( 19 ); 
L_SLDy = param( 20 ); 
b_pend = param( 21 ); 
a_pend = param( 22 ); 
L0_1 = param( 23 ); 
L0_2 = param( 24 ); 
m_WAG = param( 25 ); 
I_WAGx = param( 26 ); 
I_WAGy = param( 27 ); 
I_WAGz = param( 28 ); 
xCGWAG = param( 29 ); 
yCGWAG = param( 30 ); 
zCGWAG = param( 31 ); 
G_BOGz = param( 32 ); 
m_BOG = param( 33 ); 
I_BOGx = param( 34 ); 
I_BOGy = param( 35 ); 
I_BOGz = param( 36 ); 
m_MOT = param( 37 ); 
I_MOTx = param( 38 ); 
I_MOTy = param( 39 ); 
I_MOTz = param( 40 ); 
m_ROT = param( 41 ); 
I_ROTx = param( 42 ); 
I_ROTy = param( 43 ); 
I_ROTz = param( 44 ); 
m_WHS = param( 45 ); 
I_WHSx = param( 46 ); 
I_WHSy = param( 47 ); 
I_WHSz = param( 48 ); 
I_CORy = param( 49 ); 
m_AXB = param( 50 ); 
I_AXBx = param( 51 ); 
I_AXBy = param( 52 ); 
I_AXBz = param( 53 ); 
m_SLD = param( 54 ); 
I_SLDx = param( 55 ); 
I_SLDy = param( 56 ); 
I_SLDz = param( 57 ); 
K_SSl = param( 58 ); 
C_SSl = param( 59 ); 
C_SSr = param( 60 ); 
K_SSr = param( 61 ); 
Kgear = param( 62 ); 
Cgear = param( 63 ); 
alpha_gear = param( 64 ); 
zROT = param( 65 ); 
zWHS = param( 66 ); 
K_S1 = param( 67 ); 
C_S1 = param( 68 ); 
K_S2 = param( 69 ); 
C_S2 = param( 70 ); 
aW_RFR = param( 71 ); 
bW_RFR = param( 72 ); 
cW_RFR = param( 73 ); 
dW_RFR = param( 74 ); 
lW_RFR = param( 75 ); 
aR_RFR = param( 76 ); 
bR_RFR = param( 77 ); 
cR_RFR = param( 78 ); 
dR_RFR = param( 79 ); 
lR_RFR = param( 80 ); 
RFRas = param( 81 ); 
RFRbs = param( 82 ); 
RFRcs = param( 83 ); 
RFRds = param( 84 ); 
RFRes = param( 85 ); 
RFRfs = param( 86 ); 
RFRstas = param( 87 ); 
RFRends = param( 88 ); 
irrRFRz = param( 89 ); 
aW_RFL = param( 90 ); 
bW_RFL = param( 91 ); 
cW_RFL = param( 92 ); 
dW_RFL = param( 93 ); 
lW_RFL = param( 94 ); 
aR_RFL = param( 95 ); 
bR_RFL = param( 96 ); 
cR_RFL = param( 97 ); 
dR_RFL = param( 98 ); 
lR_RFL = param( 99 ); 
RFLas = param( 100 ); 
RFLbs = param( 101 ); 
RFLcs = param( 102 ); 
RFLds = param( 103 ); 
RFLes = param( 104 ); 
RFLfs = param( 105 ); 
RFLstas = param( 106 ); 
RFLends = param( 107 ); 
irrRFLz = param( 108 ); 
aW_RRR = param( 109 ); 
bW_RRR = param( 110 ); 
cW_RRR = param( 111 ); 
dW_RRR = param( 112 ); 
lW_RRR = param( 113 ); 
aR_RRR = param( 114 ); 
bR_RRR = param( 115 ); 
cR_RRR = param( 116 ); 
dR_RRR = param( 117 ); 
lR_RRR = param( 118 ); 
RRRas = param( 119 ); 
RRRbs = param( 120 ); 
RRRcs = param( 121 ); 
RRRds = param( 122 ); 
RRRes = param( 123 ); 
RRRfs = param( 124 ); 
RRRstas = param( 125 ); 
RRRends = param( 126 ); 
irrRRRz = param( 127 ); 
aW_RRL = param( 128 ); 
bW_RRL = param( 129 ); 
cW_RRL = param( 130 ); 
dW_RRL = param( 131 ); 
lW_RRL = param( 132 ); 
aR_RRL = param( 133 ); 
bR_RRL = param( 134 ); 
cR_RRL = param( 135 ); 
dR_RRL = param( 136 ); 
lR_RRL = param( 137 ); 
RRLas = param( 138 ); 
RRLbs = param( 139 ); 
RRLcs = param( 140 ); 
RRLds = param( 141 ); 
RRLes = param( 142 ); 
RRLfs = param( 143 ); 
RRLstas = param( 144 ); 
RRLends = param( 145 ); 
irrRRLz = param( 146 ); 
aW_FFR = param( 147 ); 
bW_FFR = param( 148 ); 
cW_FFR = param( 149 ); 
dW_FFR = param( 150 ); 
lW_FFR = param( 151 ); 
aR_FFR = param( 152 ); 
bR_FFR = param( 153 ); 
cR_FFR = param( 154 ); 
dR_FFR = param( 155 ); 
lR_FFR = param( 156 ); 
FFRas = param( 157 ); 
FFRbs = param( 158 ); 
FFRcs = param( 159 ); 
FFRds = param( 160 ); 
FFRes = param( 161 ); 
FFRfs = param( 162 ); 
FFRstas = param( 163 ); 
FFRends = param( 164 ); 
irrFFRz = param( 165 ); 
aW_FFL = param( 166 ); 
bW_FFL = param( 167 ); 
cW_FFL = param( 168 ); 
dW_FFL = param( 169 ); 
lW_FFL = param( 170 ); 
aR_FFL = param( 171 ); 
bR_FFL = param( 172 ); 
cR_FFL = param( 173 ); 
dR_FFL = param( 174 ); 
lR_FFL = param( 175 ); 
FFLas = param( 176 ); 
FFLbs = param( 177 ); 
FFLcs = param( 178 ); 
FFLds = param( 179 ); 
FFLes = param( 180 ); 
FFLfs = param( 181 ); 
FFLstas = param( 182 ); 
FFLends = param( 183 ); 
irrFFLz = param( 184 ); 
aW_FRR = param( 185 ); 
bW_FRR = param( 186 ); 
cW_FRR = param( 187 ); 
dW_FRR = param( 188 ); 
lW_FRR = param( 189 ); 
aR_FRR = param( 190 ); 
bR_FRR = param( 191 ); 
cR_FRR = param( 192 ); 
dR_FRR = param( 193 ); 
lR_FRR = param( 194 ); 
FRRas = param( 195 ); 
FRRbs = param( 196 ); 
FRRcs = param( 197 ); 
FRRds = param( 198 ); 
FRRes = param( 199 ); 
FRRfs = param( 200 ); 
FRRstas = param( 201 ); 
FRRends = param( 202 ); 
irrFRRz = param( 203 ); 
aW_FRL = param( 204 ); 
bW_FRL = param( 205 ); 
cW_FRL = param( 206 ); 
dW_FRL = param( 207 ); 
lW_FRL = param( 208 ); 
aR_FRL = param( 209 ); 
bR_FRL = param( 210 ); 
cR_FRL = param( 211 ); 
dR_FRL = param( 212 ); 
lR_FRL = param( 213 ); 
FRLas = param( 214 ); 
FRLbs = param( 215 ); 
FRLcs = param( 216 ); 
FRLds = param( 217 ); 
FRLes = param( 218 ); 
FRLfs = param( 219 ); 
FRLstas = param( 220 ); 
FRLends = param( 221 ); 
irrFRLz = param( 222 ); 
E_elastic = param( 223 ); 
nu_poisson = param( 224 ); 
G_elastic = param( 225 ); 
aRFR = param( 226 ); 
bRFR = param( 227 ); 
C11RFR = param( 228 ); 
C22RFR = param( 229 ); 
C23RFR = param( 230 ); 
C33RFR = param( 231 ); 
aRFL = param( 232 ); 
bRFL = param( 233 ); 
C11RFL = param( 234 ); 
C22RFL = param( 235 ); 
C23RFL = param( 236 ); 
C33RFL = param( 237 ); 
aRRR = param( 238 ); 
bRRR = param( 239 ); 
C11RRR = param( 240 ); 
C22RRR = param( 241 ); 
C23RRR = param( 242 ); 
C33RRR = param( 243 ); 
aRRL = param( 244 ); 
bRRL = param( 245 ); 
C11RRL = param( 246 ); 
C22RRL = param( 247 ); 
C23RRL = param( 248 ); 
C33RRL = param( 249 ); 
aFFR = param( 250 ); 
bFFR = param( 251 ); 
C11FFR = param( 252 ); 
C22FFR = param( 253 ); 
C23FFR = param( 254 ); 
C33FFR = param( 255 ); 
aFFL = param( 256 ); 
bFFL = param( 257 ); 
C11FFL = param( 258 ); 
C22FFL = param( 259 ); 
C23FFL = param( 260 ); 
C33FFL = param( 261 ); 
aFRR = param( 262 ); 
bFRR = param( 263 ); 
C11FRR = param( 264 ); 
C22FRR = param( 265 ); 
C23FRR = param( 266 ); 
C33FRR = param( 267 ); 
aFRL = param( 268 ); 
bFRL = param( 269 ); 
C11FRL = param( 270 ); 
C22FRL = param( 271 ); 
C23FRL = param( 272 ); 
C33FRL = param( 273 ); 
epsiRFR = param( 274 ); 
epsiRFL = param( 275 ); 
epsiRRR = param( 276 ); 
epsiRRL = param( 277 ); 
epsiFFR = param( 278 ); 
epsiFFL = param( 279 ); 
epsiFRR = param( 280 ); 
epsiFRL = param( 281 ); 

atom2577 = (RRLstas-RRLends)^(-1);
atom2578 = (RRLstas-xR_RRL)*atom2577;
atom2580 = atom2578*RRLas+RRLbs;
atom2582 = RRLcs+atom2578*atom2580;
atom2584 = atom2578*atom2582+RRLds;
atom2589 = -RRLas*atom2577;
atom2592 = atom2578*atom2589-atom2580*atom2577;
atom2595 = -atom2582*atom2577+atom2578*atom2592;
atom2598 = atom2578*atom2595-atom2584*atom2577;
atom2601 = atom2578*atom2598-(atom2578*atom2584+RRLes)*atom2577;
atom2603 = 1+atom2601^2;
atom2604 = sqrt(atom2603);
atom2616 = -atom2592*atom2577;
atom2612 = -atom2595*atom2577;
atom2623 = -atom2598*atom2577;
atom2625 = 2*atom2623-2*atom2578*(atom2578*(atom2578*atom2589*atom2577-atom2616)-atom2612);
atom2630 = -atom2603^(-1/2)*atom2601*atom2625*atom2604^(-2);
atom2634 = 1-(0.5)*atom2601*atom2630*L_RAIL-(0.5)*atom2625*L_RAIL*atom2604^(-1);
atom2636 = (0.5)*atom2630*L_RAIL+atom2601;
atom2672 = atom2634^2;
atom2680 = (atom2672+atom2636^2)^(-1/2);
atom2681 = atom2634*atom2680;
atom63667 = -aRRL*atom2681*G_elastic*epsiRRL*bRRL*C11RRL;
atom2682 = atom2680*atom2636;
atom865 = sin(bRBOG);
atom862 = cos(aRBOG);
atom864 = cos(bRBOG);
atom869 = atom862*atom864;
atom1725 = -L_OBOG_OWHS*atom865;
atom21988 = zRWHSR*atom869-atom1725;
atom1172 = cos(bWAG);
atom1174 = cos(aWAG);
atom21989 = atom21988+zRBOG;
atom1195 = atom1172*atom1174;
atom863 = sin(aRBOG);
atom21986 = -atom863*zRWHSR;
atom1209 = cos(cRSLD);
atom867 = atom862*atom865;
atom1717 = L_OBOG_OWHS*atom864;
atom21985 = -atom1717+atom867*zRWHSR;
atom1210 = sin(cRSLD);
atom1175 = sin(aWAG);
atom21995 = atom21986*atom1209+atom21985*atom1210;
atom1173 = sin(bWAG);
atom0 = -1/2*L_WAG;
atom21992 = -atom21986*atom1210+atom1209*atom21985;
atom1194 = -atom1173*atom1174;
atom21996 = atom0+atom21992;
atom22011 = atom1175*atom21995+atom1194*atom21996+atom21989*atom1195;
atom2469 = uW_RRL-lW_RRL;
atom2475 = dW_RRL+atom2469*(cW_RRL+atom2469*(atom2469*aW_RRL+bW_RRL));
atom1225 = atom1194*atom1209+atom1175*atom1210;
atom1246 = atom1195*atom864+atom1225*atom865;
atom1227 = atom1175*atom1209;
atom1228 = atom1227-atom1194*atom1210;
atom49 = cos(aRWHSR);
atom1264 = atom862*atom1246-atom863*atom1228;
atom50 = sin(aRWHSR);
atom1261 = atom862*atom1228+atom863*atom1246;
atom2478 = atom2475*cos(thetaW_RRL);
atom1325 = atom49*atom1264-atom50*atom1261;
atom1322 = atom49*atom1261+atom50*atom1264;
atom2476 = -sin(thetaW_RRL)*atom2475;
atom1243 = atom1225*atom864-atom1195*atom865;
atom1702 = -(0.5)*L_WHS;
atom2223 = atom49*atom1702;
atom2479 = -atom50*atom1702+zRWHSR;
atom2482 = -atom1717+atom867*atom2479-atom863*atom2223*atom865;
atom2484 = -atom863*atom2479-atom862*atom2223;
atom2494 = atom1209*atom2484+atom2482*atom1210;
atom2495 = -atom2484*atom1210+atom2482*atom1209+atom0;
atom868 = atom863*atom864;
atom2488 = zRBOG-atom868*atom2223+atom2479*atom869-atom1725;
atom1176 = cos(cWAG);
atom22128 = atom1195*atom2488+uW_RRL*atom1322+atom2476*atom1243+atom2478*atom1325+atom1175*atom2494-atom22011+atom1194*atom2495;
atom52551 = -atom1176*atom22011;
atom63531 = -atom1176*atom22128+atom52551;
atom1177 = sin(cWAG);
atom52415 = atom1177*atom22011;
atom63533 = atom2681*(atom52415+atom22128*atom1177)+atom63531*atom2682;
atom1181 = -atom1175*atom1176;
atom1191 = atom1177*atom1173;
atom1193 = atom1191+atom1172*atom1181;
atom1180 = atom1176*atom1174;
atom1190 = -atom1181*atom1173+atom1172*atom1177;
atom22006 = atom1193*atom21989+atom1180*atom21995+atom1190*atom21996;
atom1219 = atom1180*atom1210+atom1190*atom1209;
atom1237 = atom864*atom1219-atom1193*atom865;
atom1222 = atom1180*atom1209-atom1190*atom1210;
atom1240 = atom1219*atom865+atom1193*atom864;
atom1255 = atom862*atom1222+atom863*atom1240;
atom1258 = -atom863*atom1222+atom862*atom1240;
atom1316 = atom1255*atom49+atom1258*atom50;
atom1319 = -atom1255*atom50+atom1258*atom49;
atom22127 = -atom22006+atom1180*atom2494+atom2476*atom1237+atom1316*uW_RRL+atom1193*atom2488+atom1190*atom2495+atom1319*atom2478;
atom52439 = atom1180*atom22011-atom22006*atom1175;
atom1178 = -atom1177*atom1174;
atom1179 = atom1175*atom1177;
atom1184 = atom1172*atom1176-atom1173*atom1179;
atom1185 = atom1176*atom1173;
atom1187 = atom1172*atom1179+atom1185;
atom22001 = atom21996*atom1184+atom21989*atom1187+atom21995*atom1178;
atom1213 = atom1209*atom1184+atom1178*atom1210;
atom1231 = atom1213*atom864-atom1187*atom865;
atom1234 = atom1213*atom865+atom864*atom1187;
atom1216 = -atom1184*atom1210+atom1209*atom1178;
atom1252 = atom862*atom1234-atom863*atom1216;
atom1249 = atom863*atom1234+atom862*atom1216;
atom1310 = atom49*atom1249+atom50*atom1252;
atom1313 = -atom50*atom1249+atom49*atom1252;
atom22126 = atom1184*atom2495-atom22001+uW_RRL*atom1310+atom2488*atom1187+atom2476*atom1231+atom2478*atom1313+atom2494*atom1178;
atom52560 = atom1175*atom22001-atom1178*atom22011;
atom63542 = -atom22128*atom1178+atom52560+atom22126*atom1175;
atom63544 = atom2682*atom63542-atom2681*(atom1175*atom22127-atom52439-atom1180*atom22128);
atom63547 = atom22126+atom22001;
atom63549 = -atom2681*(atom22006+atom22127)+atom63547*atom2682;
atom3814 = -atom1175*atom1172;
atom60839 = atom1191+atom1176*atom3814;
atom26287 = -atom21995*atom1184+atom21992*atom1178;
atom60833 = -atom3814*atom1177+atom1185;
atom26169 = atom1180*atom21992-atom21995*atom1190;
atom63558 = atom26169+atom22126*atom1195-atom22128*atom60833;
atom63560 = atom63558*atom2682+atom2681*(atom60839*atom22128+atom26287-atom22127*atom1195);
atom8581 = atom1193*atom2682+atom2681*atom1187;
atom22967 = atom864*atom1210;
atom24052 = atom864*atom1209;
atom60847 = -atom1172*atom865-atom1173*atom24052;
atom60849 = atom60847*atom1174+atom1175*atom22967;
atom60853 = -atom1175*atom60847+atom22967*atom1174;
atom22964 = -atom1173*atom865;
atom60856 = atom1172*atom24052+atom22964;
atom60865 = atom1176*atom60853+atom60856*atom1177;
atom52501 = -atom865*atom21985-atom21988*atom864;
atom52503 = -atom21986*atom865;
atom52505 = -atom52501*atom1210-atom1209*atom52503;
atom52509 = atom1209*atom52501-atom52503*atom1210;
atom52512 = atom21986*atom864;
atom63563 = atom22128*atom60865-atom22127*atom60849;
atom52514 = atom52509*atom1178+atom52505*atom1184+atom1187*atom52512;
atom60858 = atom1176*atom60856-atom60853*atom1177;
atom63568 = atom22126*atom60849-atom22128*atom60858;
atom52581 = atom1193*atom52512+atom1180*atom52509+atom52505*atom1190;
atom63569 = atom63568+atom52581;
atom63571 = atom2682*atom63569+atom2681*(atom63563+atom52514);
atom26224 = atom21988*atom1210;
atom26233 = atom21988*atom1209;
atom22863 = atom1173*atom1210;
atom22942 = atom22863*atom1174+atom1227;
atom22861 = -atom1172*atom1210;
atom60874 = atom1209*atom1174-atom1175*atom22863;
atom60884 = atom22861*atom1177+atom60874*atom1176;
atom26315 = atom26233*atom1184-atom1187*atom21985+atom1178*atom26224;
atom60877 = atom22861*atom1176-atom60874*atom1177;
atom26250 = -atom1193*atom21985+atom1180*atom26224+atom1190*atom26233;
atom63580 = -atom60877*atom22128+atom22942*atom22126+atom26250;
atom63582 = atom63580*atom2682+(atom60884*atom22128-atom22942*atom22127+atom26315)*atom2681;
atom4143 = atom867*atom1209+atom863*atom1210;
atom4138 = -atom863*atom1209;
atom4139 = atom4138+atom867*atom1210;
atom4152 = atom1193*atom869+atom1180*atom4139+atom4143*atom1190;
atom8590 = (atom4143*atom1184+atom4139*atom1178+atom1187*atom869)*atom2681+atom4152*atom2682;
atom63585 = atom63568*atom2682+atom2681*atom63563;
atom25584 = -atom863*atom50+atom862*atom49;
atom25596 = -atom49*atom863-atom862*atom50;
atom62682 = -atom25596*atom865;
atom62691 = atom62682*atom1210+atom1209*atom25584;
atom62685 = atom62682*atom1209-atom25584*atom1210;
atom62680 = -atom25596*atom864;
atom62687 = atom1172*atom62680-atom1173*atom62685;
atom62703 = atom1175*atom62691+atom62687*atom1174;
atom62693 = -atom1175*atom62687+atom62691*atom1174;
atom62697 = atom1172*atom62685+atom62680*atom1173;
atom62709 = -atom1177*atom62693+atom1176*atom62697;
atom63592 = -atom62709*atom22128+atom22126*atom62703;
atom62699 = atom1176*atom62693+atom1177*atom62697;
atom63594 = atom2682*atom63592+(atom22128*atom62699-atom22127*atom62703)*atom2681;
atom63668 = -aRRL*G_elastic*epsiRRL*bRRL*C11RRL*atom2682;
atom2568 = uR_RRL-lR_RRL;
atom2569 = atom2568*aR_RRL;
atom2570 = bR_RRL+atom2569;
atom2639 = atom2570*atom2568+(atom2570+atom2569)*atom2568+cR_RRL;
atom2685 = (1+atom2639^2)^(-1/2);
atom63669 = -C22RRL*aRRL*G_elastic*epsiRRL*bRRL*atom2685;
atom2686 = atom2639*atom2685;
atom63671 = sqrt(aRRL*bRRL);
atom2641 = -atom2639*atom2634;
atom2640 = atom2639*atom2636;
atom2674 = (atom2672+atom2641^2+atom2640^2)^(-1/2);
atom2676 = atom2641*atom2674;
atom2675 = atom2674*atom2640;
atom63672 = -aRRL*G_elastic*epsiRRL*C23RRL*bRRL*atom63671*atom2685;
atom63642 = atom2675*atom1176+atom2676*atom1177;
atom52596 = atom22006*atom1176-atom22001*atom1177;
atom63601 = atom2686*(atom52596+atom22127*atom1176-atom22126*atom1177)+atom2685*atom63531;
atom52605 = atom22006*atom1178-atom1180*atom22001;
atom63608 = atom2686*(atom52605-atom22126*atom1180+atom22127*atom1178)+atom2685*atom63542;
atom2677 = atom2634*atom2674;
atom63647 = atom2675*atom1178+atom2677*atom1175+atom1180*atom2676;
atom63609 = atom63547*atom2685;
atom63651 = atom2675*atom60833+atom60839*atom2676+atom2677*atom1195;
atom26165 = -atom21995*atom1194+atom1175*atom21992;
atom63616 = -atom2686*(atom22126*atom60839-atom26165-atom22127*atom60833)+atom63558*atom2685;
atom8630 = atom2686*atom1195+atom1193*atom2685;
atom63656 = atom2676*atom60865+atom2677*atom60849+atom2675*atom60858;
atom63619 = atom22127*atom60858-atom22126*atom60865;
atom52627 = atom1195*atom52512+atom52505*atom1194+atom1175*atom52509;
atom63623 = atom2685*atom63569+(atom63619+atom52627)*atom2686;
atom63780 = atom63672*atom63656;
atom63661 = atom60884*atom2676+atom2675*atom60877+atom22942*atom2677;
atom26244 = atom1194*atom26233+atom1175*atom26224-atom1195*atom21985;
atom63630 = atom63580*atom2685+atom2686*(atom26244-atom22126*atom60884+atom22127*atom60877);
atom8639 = (atom4139*atom1175+atom1195*atom869+atom4143*atom1194)*atom2686+atom4152*atom2685;
atom63633 = atom63568*atom2685+atom2686*atom63619;
atom63666 = atom2675*atom62709+atom2676*atom62699+atom2677*atom62703;
atom63639 = -atom2686*(atom22126*atom62699-atom62709*atom22127)+atom2685*atom63592;
atom63673 = -C22RRL*aRRL*atom2686*G_elastic*epsiRRL*bRRL;
atom63674 = -aRRL*atom2686*G_elastic*epsiRRL*C23RRL*bRRL*atom63671;
atom63815 = atom63674*atom63656;
atom22860 = atom1172*atom1209;
atom22966 = atom864*atom22860+atom22964;
atom22970 = atom864*atom1173+atom22860*atom865;
atom23996 = atom862*atom22861+atom22970*atom863;
atom23999 = atom862*atom22970-atom22861*atom863;
atom25575 = atom23999*atom50+atom23996*atom49;
atom25587 = -atom23996*atom50+atom23999*atom49;
atom59445 = atom22966*atom1243+atom1325*atom25587+atom25575*atom1322;
atom59450 = atom1319*atom25587+atom22966*atom1237+atom1316*atom25575;
atom59458 = atom25587*atom1313+atom1231*atom22966+atom25575*atom1310;
atom59693 = -atom59458*atom22128+atom22126*atom59445+atom52551;
atom63675 = -aRRL*(atom2681*(atom52415+atom59450*atom22128-atom22127*atom59445)+atom59693*atom2682)*G_elastic*epsiRRL*bRRL*C11RRL;
atom63451 = atom2686*(atom52596-atom22126*atom59450+atom22127*atom59458)+atom59693*atom2685;
atom22125 = atom2675*atom1310+atom1316*atom2676+atom2677*atom1322;
atom63457 = atom2676*atom1237+atom2677*atom1243+atom1231*atom2675;
atom63464 = atom2675*atom1313+atom1319*atom2676+atom2677*atom1325;
atom63466 = atom22125*atom25575+atom25587*atom63464+atom22966*atom63457;
atom63678 = -C22RRL*aRRL*G_elastic*epsiRRL*bRRL*atom63451+aRRL*G_elastic*epsiRRL*C23RRL*bRRL*atom63671*atom63466;
atom63681 = bRRL^2;
atom63680 = aRRL^2;
atom63683 = -G_elastic*epsiRRL*atom63681*C33RRL*atom63466*atom63680-aRRL*G_elastic*epsiRRL*C23RRL*bRRL*atom63671*atom63451;
atom63857 = atom63683*atom63656;
atom22971 = atom865*atom1210;
atom24003 = atom4138+atom862*atom22971;
atom24001 = atom862*atom1209+atom863*atom22971;
atom25590 = -atom24001*atom50+atom24003*atom49;
atom25578 = atom49*atom24001+atom24003*atom50;
atom59479 = atom1243*atom22967+atom25578*atom1322+atom25590*atom1325;
atom59484 = atom22967*atom1237+atom1319*atom25590+atom1316*atom25578;
atom59492 = atom25590*atom1313+atom25578*atom1310+atom1231*atom22967;
atom59715 = -atom22128*atom59492+atom22126*atom59479+atom52560;
atom63684 = -aRRL*(atom59715*atom2682-(atom59479*atom22127-atom52439-atom59484*atom22128)*atom2681)*G_elastic*epsiRRL*bRRL*C11RRL;
atom63472 = atom2686*(atom52605-atom22126*atom59484+atom22127*atom59492)+atom59715*atom2685;
atom63477 = atom25578*atom22125+atom25590*atom63464+atom63457*atom22967;
atom63687 = -C22RRL*aRRL*G_elastic*epsiRRL*atom63472*bRRL+aRRL*G_elastic*epsiRRL*C23RRL*bRRL*atom63671*atom63477;
atom63690 = -aRRL*G_elastic*epsiRRL*C23RRL*atom63472*bRRL*atom63671-G_elastic*epsiRRL*atom63681*C33RRL*atom63477*atom63680;
atom63907 = atom63690*atom63656;
atom59512 = atom1243^2+atom1325^2+atom1322^2;
atom59523 = atom1325*atom1313+atom1231*atom1243+atom1322*atom1310;
atom59737 = -atom22128*atom59523+atom22001+atom22126*atom59512;
atom59516 = atom1319*atom1325+atom1316*atom1322+atom1243*atom1237;
atom63691 = -aRRL*(atom59737*atom2682-atom2681*(atom22006-atom59516*atom22128+atom22127*atom59512))*G_elastic*epsiRRL*bRRL*C11RRL;
atom63483 = -atom2686*(atom22126*atom59516-atom22127*atom59523)+atom2685*atom59737;
atom63488 = atom1325*atom63464+atom1243*atom63457+atom22125*atom1322;
atom63694 = -C22RRL*aRRL*G_elastic*epsiRRL*atom63483*bRRL+atom63488*aRRL*G_elastic*epsiRRL*C23RRL*bRRL*atom63671;
atom63697 = -atom63488*G_elastic*epsiRRL*atom63681*C33RRL*atom63680-aRRL*G_elastic*epsiRRL*atom63483*C23RRL*bRRL*atom63671;
atom63957 = atom63697*atom63656;
atom25581 = atom49*atom868+atom50*atom869;
atom25593 = atom49*atom869-atom868*atom50;
atom59542 = -atom1243*atom865+atom25593*atom1325+atom25581*atom1322;
atom59553 = atom25581*atom1310+atom25593*atom1313-atom1231*atom865;
atom59758 = atom26169-atom59553*atom22128+atom22126*atom59542;
atom59546 = -atom865*atom1237+atom1316*atom25581+atom1319*atom25593;
atom63698 = aRRL*G_elastic*epsiRRL*bRRL*(atom2681*(atom59542*atom22127-atom59546*atom22128-atom26287)-atom59758*atom2682)*C11RRL;
atom63494 = atom59758*atom2685-atom2686*(atom22126*atom59546-atom26165-atom22127*atom59553);
atom63499 = -atom63457*atom865+atom25593*atom63464+atom22125*atom25581;
atom63701 = aRRL*atom63499*G_elastic*epsiRRL*C23RRL*bRRL*atom63671-atom63494*C22RRL*aRRL*G_elastic*epsiRRL*bRRL;
atom63704 = -atom63494*aRRL*G_elastic*epsiRRL*C23RRL*bRRL*atom63671-atom63499*G_elastic*epsiRRL*atom63681*C33RRL*atom63680;
atom64007 = atom63704*atom63656;
atom63705 = -aRRL*G_elastic*epsiRRL*bRRL*atom8581*C11RRL;
atom63706 = -C22RRL*aRRL*G_elastic*atom8630*epsiRRL*bRRL;
atom63707 = -aRRL*G_elastic*atom8630*epsiRRL*C23RRL*bRRL*atom63671;
atom64057 = atom63707*atom63656;
atom59779 = atom22126*atom1243-atom1231*atom22128;
atom59780 = atom52581+atom59779;
atom59775 = atom22128*atom1237-atom1243*atom22127;
atom63708 = -aRRL*G_elastic*(atom59780*atom2682+(atom59775+atom52514)*atom2681)*epsiRRL*bRRL*C11RRL;
atom59783 = -atom22126*atom1237+atom1231*atom22127;
atom63505 = atom2686*(atom59783+atom52627)+atom2685*atom59780;
atom63710 = aRRL*atom63457*G_elastic*epsiRRL*C23RRL*bRRL*atom63671;
atom63711 = atom63710-C22RRL*aRRL*atom63505*G_elastic*epsiRRL*bRRL;
atom63713 = -atom63457*G_elastic*epsiRRL*atom63681*C33RRL*atom63680;
atom63714 = -aRRL*atom63505*G_elastic*epsiRRL*C23RRL*bRRL*atom63671+atom63713;
atom64107 = atom63714*atom63656;
atom59597 = atom1316*atom25584+atom25596*atom1319;
atom59593 = atom25596*atom1325+atom1322*atom25584;
atom59604 = atom25596*atom1313+atom25584*atom1310;
atom59800 = atom22126*atom59593-atom59604*atom22128+atom26250;
atom63715 = -aRRL*G_elastic*epsiRRL*(atom59800*atom2682+(atom59597*atom22128+atom26315-atom22127*atom59593)*atom2681)*bRRL*C11RRL;
atom63511 = atom59800*atom2685-(atom22126*atom59597-atom59604*atom22127-atom26244)*atom2686;
atom63514 = atom25596*atom63464+atom22125*atom25584;
atom63718 = aRRL*atom63514*G_elastic*epsiRRL*C23RRL*bRRL*atom63671-C22RRL*aRRL*G_elastic*epsiRRL*bRRL*atom63511;
atom63721 = -aRRL*G_elastic*epsiRRL*C23RRL*bRRL*atom63671*atom63511-atom63514*G_elastic*epsiRRL*atom63681*C33RRL*atom63680;
atom64157 = atom63721*atom63656;
atom63722 = -aRRL*G_elastic*epsiRRL*bRRL*atom8590*C11RRL;
atom63723 = -C22RRL*aRRL*atom8639*G_elastic*epsiRRL*bRRL;
atom63724 = -aRRL*atom8639*G_elastic*epsiRRL*C23RRL*bRRL*atom63671;
atom64207 = atom63724*atom63656;
atom63725 = -aRRL*G_elastic*(atom59779*atom2682+atom59775*atom2681)*epsiRRL*bRRL*C11RRL;
atom63520 = atom2686*atom59783+atom59779*atom2685;
atom63727 = atom63710-C22RRL*aRRL*G_elastic*epsiRRL*bRRL*atom63520;
atom63729 = -aRRL*G_elastic*epsiRRL*C23RRL*bRRL*atom63671*atom63520+atom63713;
atom64257 = atom63729*atom63656;
atom59825 = -atom22128*atom1310+atom22126*atom1322;
atom63730 = -aRRL*G_elastic*epsiRRL*((atom1316*atom22128-atom22127*atom1322)*atom2681+atom59825*atom2682)*bRRL*C11RRL;
atom63526 = -atom2686*(atom22126*atom1316-atom22127*atom1310)+atom59825*atom2685;
atom63733 = -atom63526*C22RRL*aRRL*G_elastic*epsiRRL*bRRL+aRRL*G_elastic*epsiRRL*atom22125*C23RRL*bRRL*atom63671;
atom63736 = -atom63526*aRRL*G_elastic*epsiRRL*C23RRL*bRRL*atom63671-G_elastic*epsiRRL*atom22125*atom63681*C33RRL*atom63680;
atom64307 = atom63736*atom63656;

CKRRL_ = [atom2681*atom63667 , atom63667*atom2682 , 0 , atom63533*atom63667 , atom63544*atom63667 , atom63549*atom63667 , atom63560*atom63667 , 0 , atom8581*atom63667 , atom63571*atom63667 , atom63582*atom63667 , 0 , 0 , 0 , 0 , 0 , 0 , atom8590*atom63667 , atom63585*atom63667 , atom63594*atom63667 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom63668*atom2681 , atom63668*atom2682+atom63669*atom2685 , atom63669*atom2686 , atom63672*atom63642+atom63669*atom63601+atom63668*atom63533 , atom63544*atom63668+atom63608*atom63669+atom63647*atom63672 , atom63669*atom63609+atom63672*atom2677+atom63668*atom63549 , atom63651*atom63672+atom63669*atom63616+atom63668*atom63560 , 0 , atom63669*atom8630+atom63668*atom8581 , atom63669*atom63623+atom63780+atom63668*atom63571 , atom63672*atom63661+atom63582*atom63668+atom63669*atom63630 , 0 , 0 , 0 , 0 , 0 , 0 , atom63669*atom8639+atom63668*atom8590 , atom63669*atom63633+atom63780+atom63668*atom63585 , atom63668*atom63594+atom63672*atom63666+atom63669*atom63639 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , atom63673*atom2685 , atom2686*atom63673 , atom63601*atom63673+atom63642*atom63674 , atom63647*atom63674+atom63608*atom63673 , atom2677*atom63674+atom63673*atom63609 , atom63673*atom63616+atom63651*atom63674 , 0 , atom8630*atom63673 , atom63673*atom63623+atom63815 , atom63661*atom63674+atom63673*atom63630 , 0 , 0 , 0 , 0 , 0 , 0 , atom8639*atom63673 , atom63815+atom63673*atom63633 , atom63639*atom63673+atom63666*atom63674 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom63675*atom2681 , atom63678*atom2685+atom63675*atom2682 , atom63678*atom2686 , atom63642*atom63683+atom63678*atom63601+atom63533*atom63675 , atom63647*atom63683+atom63678*atom63608+atom63544*atom63675 , atom63675*atom63549+atom2677*atom63683+atom63678*atom63609 , atom63678*atom63616+atom63651*atom63683+atom63560*atom63675 , 0 , atom63675*atom8581+atom63678*atom8630 , atom63857+atom63678*atom63623+atom63571*atom63675 , atom63678*atom63630+atom63683*atom63661+atom63582*atom63675 , 0 , 0 , 0 , 0 , 0 , 0 , atom63678*atom8639+atom63675*atom8590 , atom63675*atom63585+atom63857+atom63678*atom63633 , atom63678*atom63639+atom63666*atom63683+atom63675*atom63594 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2681*atom63684 , atom2682*atom63684+atom2685*atom63687 , atom2686*atom63687 , atom63601*atom63687+atom63690*atom63642+atom63533*atom63684 , atom63608*atom63687+atom63544*atom63684+atom63647*atom63690 , atom2677*atom63690+atom63549*atom63684+atom63609*atom63687 , atom63616*atom63687+atom63651*atom63690+atom63560*atom63684 , 0 , atom8581*atom63684+atom8630*atom63687 , atom63571*atom63684+atom63623*atom63687+atom63907 , atom63582*atom63684+atom63690*atom63661+atom63630*atom63687 , 0 , 0 , 0 , 0 , 0 , 0 , atom8590*atom63684+atom8639*atom63687 , atom63633*atom63687+atom63907+atom63585*atom63684 , atom63666*atom63690+atom63594*atom63684+atom63639*atom63687 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2681*atom63691 , atom63691*atom2682+atom2685*atom63694 , atom2686*atom63694 , atom63697*atom63642+atom63533*atom63691+atom63601*atom63694 , atom63544*atom63691+atom63608*atom63694+atom63647*atom63697 , atom63609*atom63694+atom63697*atom2677+atom63549*atom63691 , atom63694*atom63616+atom63560*atom63691+atom63651*atom63697 , 0 , atom8581*atom63691+atom8630*atom63694 , atom63623*atom63694+atom63571*atom63691+atom63957 , atom63582*atom63691+atom63697*atom63661+atom63694*atom63630 , 0 , 0 , 0 , 0 , 0 , 0 , atom8639*atom63694+atom8590*atom63691 , atom63633*atom63694+atom63585*atom63691+atom63957 , atom63594*atom63691+atom63697*atom63666+atom63639*atom63694 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2681*atom63698 , atom63701*atom2685+atom63698*atom2682 , atom2686*atom63701 , atom63601*atom63701+atom63642*atom63704+atom63533*atom63698 , atom63647*atom63704+atom63608*atom63701+atom63544*atom63698 , atom63549*atom63698+atom63609*atom63701+atom2677*atom63704 , atom63560*atom63698+atom63651*atom63704+atom63701*atom63616 , 0 , atom63698*atom8581+atom8630*atom63701 , atom64007+atom63571*atom63698+atom63623*atom63701 , atom63661*atom63704+atom63701*atom63630+atom63582*atom63698 , 0 , 0 , 0 , 0 , 0 , 0 , atom8590*atom63698+atom8639*atom63701 , atom63585*atom63698+atom64007+atom63633*atom63701 , atom63639*atom63701+atom63666*atom63704+atom63594*atom63698 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2681*atom63705 , atom63706*atom2685+atom63705*atom2682 , atom2686*atom63706 , atom63601*atom63706+atom63642*atom63707+atom63533*atom63705 , atom63544*atom63705+atom63647*atom63707+atom63608*atom63706 , atom2677*atom63707+atom63706*atom63609+atom63549*atom63705 , atom63706*atom63616+atom63651*atom63707+atom63560*atom63705 , 0 , atom63705*atom8581+atom8630*atom63706 , atom63571*atom63705+atom64057+atom63623*atom63706 , atom63661*atom63707+atom63706*atom63630+atom63582*atom63705 , 0 , 0 , 0 , 0 , 0 , 0 , atom63705*atom8590+atom8639*atom63706 , atom63705*atom63585+atom64057+atom63706*atom63633 , atom63666*atom63707+atom63639*atom63706+atom63594*atom63705 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2681*atom63708 , atom63708*atom2682+atom2685*atom63711 , atom2686*atom63711 , atom63642*atom63714+atom63533*atom63708+atom63601*atom63711 , atom63544*atom63708+atom63608*atom63711+atom63647*atom63714 , atom63609*atom63711+atom2677*atom63714+atom63549*atom63708 , atom63651*atom63714+atom63711*atom63616+atom63560*atom63708 , 0 , atom63708*atom8581+atom8630*atom63711 , atom63623*atom63711+atom64107+atom63571*atom63708 , atom63711*atom63630+atom63582*atom63708+atom63661*atom63714 , 0 , 0 , 0 , 0 , 0 , 0 , atom8639*atom63711+atom63708*atom8590 , atom64107+atom63633*atom63711+atom63708*atom63585 , atom63594*atom63708+atom63639*atom63711+atom63666*atom63714 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom63715*atom2681 , atom63718*atom2685+atom63715*atom2682 , atom2686*atom63718 , atom63533*atom63715+atom63718*atom63601+atom63642*atom63721 , atom63608*atom63718+atom63647*atom63721+atom63544*atom63715 , atom63718*atom63609+atom63715*atom63549+atom2677*atom63721 , atom63560*atom63715+atom63718*atom63616+atom63651*atom63721 , 0 , atom63715*atom8581+atom8630*atom63718 , atom64157+atom63718*atom63623+atom63571*atom63715 , atom63661*atom63721+atom63718*atom63630+atom63582*atom63715 , 0 , 0 , 0 , 0 , 0 , 0 , atom63715*atom8590+atom8639*atom63718 , atom64157+atom63718*atom63633+atom63715*atom63585 , atom63666*atom63721+atom63718*atom63639+atom63715*atom63594 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom63722*atom2681 , atom63722*atom2682+atom63723*atom2685 , atom63723*atom2686 , atom63723*atom63601+atom63533*atom63722+atom63724*atom63642 , atom63544*atom63722+atom63647*atom63724+atom63608*atom63723 , atom2677*atom63724+atom63723*atom63609+atom63549*atom63722 , atom63723*atom63616+atom63560*atom63722+atom63651*atom63724 , 0 , atom63723*atom8630+atom63722*atom8581 , atom63571*atom63722+atom64207+atom63723*atom63623 , atom63582*atom63722+atom63723*atom63630+atom63724*atom63661 , 0 , 0 , 0 , 0 , 0 , 0 , atom63723*atom8639+atom63722*atom8590 , atom64207+atom63722*atom63585+atom63723*atom63633 , atom63594*atom63722+atom63723*atom63639+atom63666*atom63724 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2681*atom63725 , atom63725*atom2682+atom63727*atom2685 , atom63727*atom2686 , atom63533*atom63725+atom63727*atom63601+atom63642*atom63729 , atom63544*atom63725+atom63727*atom63608+atom63647*atom63729 , atom63549*atom63725+atom2677*atom63729+atom63727*atom63609 , atom63560*atom63725+atom63727*atom63616+atom63651*atom63729 , 0 , atom63727*atom8630+atom63725*atom8581 , atom63727*atom63623+atom64257+atom63571*atom63725 , atom63661*atom63729+atom63727*atom63630+atom63582*atom63725 , 0 , 0 , 0 , 0 , 0 , 0 , atom63727*atom8639+atom8590*atom63725 , atom64257+atom63725*atom63585+atom63727*atom63633 , atom63666*atom63729+atom63727*atom63639+atom63594*atom63725 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom63730*atom2681 , atom63730*atom2682+atom2685*atom63733 , atom2686*atom63733 , atom63642*atom63736+atom63533*atom63730+atom63601*atom63733 , atom63544*atom63730+atom63647*atom63736+atom63608*atom63733 , atom2677*atom63736+atom63609*atom63733+atom63549*atom63730 , atom63651*atom63736+atom63733*atom63616+atom63560*atom63730 , 0 , atom8630*atom63733+atom63730*atom8581 , atom64307+atom63623*atom63733+atom63571*atom63730 , atom63582*atom63730+atom63733*atom63630+atom63661*atom63736 , 0 , 0 , 0 , 0 , 0 , 0 , atom8639*atom63733+atom63730*atom8590 , atom64307+atom63633*atom63733+atom63730*atom63585 , atom63594*atom63730+atom63666*atom63736+atom63639*atom63733 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0];

%endfunction
