function CKRFL_ = CKRFL(q,qaux,dq,time,param)

xWAG = q( 1 ); 
yWAG = q( 2 ); 
zWAG = q( 3 ); 
aWAG = q( 4 ); 
bWAG = q( 5 ); 
cWAG = q( 6 ); 
cRSLD = q( 7 ); 
cFSLD = q( 8 ); 
zRBOG = q( 9 ); 
aRBOG = q( 10 ); 
bRBOG = q( 11 ); 
zFBOG = q( 12 ); 
aFBOG = q( 13 ); 
bFBOG = q( 14 ); 
zRWHSF = q( 15 ); 
aRWHSF = q( 16 ); 
bRWHSF = q( 17 ); 
zRWHSR = q( 18 ); 
aRWHSR = q( 19 ); 
bRWHSR = q( 20 ); 
zFWHSF = q( 21 ); 
aFWHSF = q( 22 ); 
bFWHSF = q( 23 ); 
zFWHSR = q( 24 ); 
aFWHSR = q( 25 ); 
bFWHSR = q( 26 ); 
bRAXBFL = q( 27 ); 
bRAXBFR = q( 28 ); 
bRAXBRL = q( 29 ); 
bRAXBRR = q( 30 ); 
bFAXBFL = q( 31 ); 
bFAXBFR = q( 32 ); 
bFAXBRL = q( 33 ); 
bFAXBRR = q( 34 ); 
xRMOTF = q( 35 ); 
yRMOTF = q( 36 ); 
zRMOTF = q( 37 ); 
bRMOTF = q( 38 ); 
xRMOTR = q( 39 ); 
yRMOTR = q( 40 ); 
zRMOTR = q( 41 ); 
bRMOTR = q( 42 ); 
bRROTF = q( 43 ); 
bRROTR = q( 44 ); 

thetaW_RFR = qaux( 1 ); 
uW_RFR = qaux( 2 ); 
uR_RFR = qaux( 3 ); 
xR_RFR = qaux( 4 ); 
thetaW_RFL = qaux( 5 ); 
uW_RFL = qaux( 6 ); 
uR_RFL = qaux( 7 ); 
xR_RFL = qaux( 8 ); 
thetaW_RRR = qaux( 9 ); 
uW_RRR = qaux( 10 ); 
uR_RRR = qaux( 11 ); 
xR_RRR = qaux( 12 ); 
thetaW_RRL = qaux( 13 ); 
uW_RRL = qaux( 14 ); 
uR_RRL = qaux( 15 ); 
xR_RRL = qaux( 16 ); 
thetaW_FFR = qaux( 17 ); 
uW_FFR = qaux( 18 ); 
uR_FFR = qaux( 19 ); 
xR_FFR = qaux( 20 ); 
thetaW_FFL = qaux( 21 ); 
uW_FFL = qaux( 22 ); 
uR_FFL = qaux( 23 ); 
xR_FFL = qaux( 24 ); 
thetaW_FRR = qaux( 25 ); 
uW_FRR = qaux( 26 ); 
uR_FRR = qaux( 27 ); 
xR_FRR = qaux( 28 ); 
thetaW_FRL = qaux( 29 ); 
uW_FRL = qaux( 30 ); 
uR_FRL = qaux( 31 ); 
xR_FRL = qaux( 32 ); 

dxWAG = dq( 1 ); 
dyWAG = dq( 2 ); 
dzWAG = dq( 3 ); 
daWAG = dq( 4 ); 
dbWAG = dq( 5 ); 
dcWAG = dq( 6 ); 
dcRSLD = dq( 7 ); 
dcFSLD = dq( 8 ); 
dzRBOG = dq( 9 ); 
daRBOG = dq( 10 ); 
dbRBOG = dq( 11 ); 
dzFBOG = dq( 12 ); 
daFBOG = dq( 13 ); 
dbFBOG = dq( 14 ); 
dzRWHSF = dq( 15 ); 
daRWHSF = dq( 16 ); 
dbRWHSF = dq( 17 ); 
dzRWHSR = dq( 18 ); 
daRWHSR = dq( 19 ); 
dbRWHSR = dq( 20 ); 
dzFWHSF = dq( 21 ); 
daFWHSF = dq( 22 ); 
dbFWHSF = dq( 23 ); 
dzFWHSR = dq( 24 ); 
daFWHSR = dq( 25 ); 
dbFWHSR = dq( 26 ); 
dbRAXBFL = dq( 27 ); 
dbRAXBFR = dq( 28 ); 
dbRAXBRL = dq( 29 ); 
dbRAXBRR = dq( 30 ); 
dbFAXBFL = dq( 31 ); 
dbFAXBFR = dq( 32 ); 
dbFAXBRL = dq( 33 ); 
dbFAXBRR = dq( 34 ); 
dxRMOTF = dq( 35 ); 
dyRMOTF = dq( 36 ); 
dzRMOTF = dq( 37 ); 
dbRMOTF = dq( 38 ); 
dxRMOTR = dq( 39 ); 
dyRMOTR = dq( 40 ); 
dzRMOTR = dq( 41 ); 
dbRMOTR = dq( 42 ); 
dbRROTF = dq( 43 ); 
dbRROTR = dq( 44 ); 

t= time ;

g = param( 1 ); 
L_OBOG_OAXBy = param( 2 ); 
L_OBOG_OAXBz = param( 3 ); 
L_OBOG_OSUSPy = param( 4 ); 
L_OBOG_OSUSPx = param( 5 ); 
L_OBOG_OSUSPz = param( 6 ); 
L_OBOG_OWHS = param( 7 ); 
L_OBOG_P1BOG = param( 8 ); 
L_MOT = param( 9 ); 
L_GEAR = param( 10 ); 
L_AXB1 = param( 11 ); 
L_AXB2 = param( 12 ); 
L_SUSP = param( 13 ); 
L_WHS = param( 14 ); 
L_RAIL = param( 15 ); 
L_WAG = param( 16 ); 
L_SUSPBEAM1 = param( 17 ); 
L_SUSPBEAM2 = param( 18 ); 
L_SLDx = param( 19 ); 
L_SLDy = param( 20 ); 
b_pend = param( 21 ); 
a_pend = param( 22 ); 
L0_1 = param( 23 ); 
L0_2 = param( 24 ); 
m_WAG = param( 25 ); 
I_WAGx = param( 26 ); 
I_WAGy = param( 27 ); 
I_WAGz = param( 28 ); 
xCGWAG = param( 29 ); 
yCGWAG = param( 30 ); 
zCGWAG = param( 31 ); 
G_BOGz = param( 32 ); 
m_BOG = param( 33 ); 
I_BOGx = param( 34 ); 
I_BOGy = param( 35 ); 
I_BOGz = param( 36 ); 
m_MOT = param( 37 ); 
I_MOTx = param( 38 ); 
I_MOTy = param( 39 ); 
I_MOTz = param( 40 ); 
m_ROT = param( 41 ); 
I_ROTx = param( 42 ); 
I_ROTy = param( 43 ); 
I_ROTz = param( 44 ); 
m_WHS = param( 45 ); 
I_WHSx = param( 46 ); 
I_WHSy = param( 47 ); 
I_WHSz = param( 48 ); 
I_CORy = param( 49 ); 
m_AXB = param( 50 ); 
I_AXBx = param( 51 ); 
I_AXBy = param( 52 ); 
I_AXBz = param( 53 ); 
m_SLD = param( 54 ); 
I_SLDx = param( 55 ); 
I_SLDy = param( 56 ); 
I_SLDz = param( 57 ); 
K_SSl = param( 58 ); 
C_SSl = param( 59 ); 
C_SSr = param( 60 ); 
K_SSr = param( 61 ); 
Kgear = param( 62 ); 
Cgear = param( 63 ); 
alpha_gear = param( 64 ); 
zROT = param( 65 ); 
zWHS = param( 66 ); 
K_S1 = param( 67 ); 
C_S1 = param( 68 ); 
K_S2 = param( 69 ); 
C_S2 = param( 70 ); 
aW_RFR = param( 71 ); 
bW_RFR = param( 72 ); 
cW_RFR = param( 73 ); 
dW_RFR = param( 74 ); 
lW_RFR = param( 75 ); 
aR_RFR = param( 76 ); 
bR_RFR = param( 77 ); 
cR_RFR = param( 78 ); 
dR_RFR = param( 79 ); 
lR_RFR = param( 80 ); 
RFRas = param( 81 ); 
RFRbs = param( 82 ); 
RFRcs = param( 83 ); 
RFRds = param( 84 ); 
RFRes = param( 85 ); 
RFRfs = param( 86 ); 
RFRstas = param( 87 ); 
RFRends = param( 88 ); 
irrRFRz = param( 89 ); 
aW_RFL = param( 90 ); 
bW_RFL = param( 91 ); 
cW_RFL = param( 92 ); 
dW_RFL = param( 93 ); 
lW_RFL = param( 94 ); 
aR_RFL = param( 95 ); 
bR_RFL = param( 96 ); 
cR_RFL = param( 97 ); 
dR_RFL = param( 98 ); 
lR_RFL = param( 99 ); 
RFLas = param( 100 ); 
RFLbs = param( 101 ); 
RFLcs = param( 102 ); 
RFLds = param( 103 ); 
RFLes = param( 104 ); 
RFLfs = param( 105 ); 
RFLstas = param( 106 ); 
RFLends = param( 107 ); 
irrRFLz = param( 108 ); 
aW_RRR = param( 109 ); 
bW_RRR = param( 110 ); 
cW_RRR = param( 111 ); 
dW_RRR = param( 112 ); 
lW_RRR = param( 113 ); 
aR_RRR = param( 114 ); 
bR_RRR = param( 115 ); 
cR_RRR = param( 116 ); 
dR_RRR = param( 117 ); 
lR_RRR = param( 118 ); 
RRRas = param( 119 ); 
RRRbs = param( 120 ); 
RRRcs = param( 121 ); 
RRRds = param( 122 ); 
RRRes = param( 123 ); 
RRRfs = param( 124 ); 
RRRstas = param( 125 ); 
RRRends = param( 126 ); 
irrRRRz = param( 127 ); 
aW_RRL = param( 128 ); 
bW_RRL = param( 129 ); 
cW_RRL = param( 130 ); 
dW_RRL = param( 131 ); 
lW_RRL = param( 132 ); 
aR_RRL = param( 133 ); 
bR_RRL = param( 134 ); 
cR_RRL = param( 135 ); 
dR_RRL = param( 136 ); 
lR_RRL = param( 137 ); 
RRLas = param( 138 ); 
RRLbs = param( 139 ); 
RRLcs = param( 140 ); 
RRLds = param( 141 ); 
RRLes = param( 142 ); 
RRLfs = param( 143 ); 
RRLstas = param( 144 ); 
RRLends = param( 145 ); 
irrRRLz = param( 146 ); 
aW_FFR = param( 147 ); 
bW_FFR = param( 148 ); 
cW_FFR = param( 149 ); 
dW_FFR = param( 150 ); 
lW_FFR = param( 151 ); 
aR_FFR = param( 152 ); 
bR_FFR = param( 153 ); 
cR_FFR = param( 154 ); 
dR_FFR = param( 155 ); 
lR_FFR = param( 156 ); 
FFRas = param( 157 ); 
FFRbs = param( 158 ); 
FFRcs = param( 159 ); 
FFRds = param( 160 ); 
FFRes = param( 161 ); 
FFRfs = param( 162 ); 
FFRstas = param( 163 ); 
FFRends = param( 164 ); 
irrFFRz = param( 165 ); 
aW_FFL = param( 166 ); 
bW_FFL = param( 167 ); 
cW_FFL = param( 168 ); 
dW_FFL = param( 169 ); 
lW_FFL = param( 170 ); 
aR_FFL = param( 171 ); 
bR_FFL = param( 172 ); 
cR_FFL = param( 173 ); 
dR_FFL = param( 174 ); 
lR_FFL = param( 175 ); 
FFLas = param( 176 ); 
FFLbs = param( 177 ); 
FFLcs = param( 178 ); 
FFLds = param( 179 ); 
FFLes = param( 180 ); 
FFLfs = param( 181 ); 
FFLstas = param( 182 ); 
FFLends = param( 183 ); 
irrFFLz = param( 184 ); 
aW_FRR = param( 185 ); 
bW_FRR = param( 186 ); 
cW_FRR = param( 187 ); 
dW_FRR = param( 188 ); 
lW_FRR = param( 189 ); 
aR_FRR = param( 190 ); 
bR_FRR = param( 191 ); 
cR_FRR = param( 192 ); 
dR_FRR = param( 193 ); 
lR_FRR = param( 194 ); 
FRRas = param( 195 ); 
FRRbs = param( 196 ); 
FRRcs = param( 197 ); 
FRRds = param( 198 ); 
FRRes = param( 199 ); 
FRRfs = param( 200 ); 
FRRstas = param( 201 ); 
FRRends = param( 202 ); 
irrFRRz = param( 203 ); 
aW_FRL = param( 204 ); 
bW_FRL = param( 205 ); 
cW_FRL = param( 206 ); 
dW_FRL = param( 207 ); 
lW_FRL = param( 208 ); 
aR_FRL = param( 209 ); 
bR_FRL = param( 210 ); 
cR_FRL = param( 211 ); 
dR_FRL = param( 212 ); 
lR_FRL = param( 213 ); 
FRLas = param( 214 ); 
FRLbs = param( 215 ); 
FRLcs = param( 216 ); 
FRLds = param( 217 ); 
FRLes = param( 218 ); 
FRLfs = param( 219 ); 
FRLstas = param( 220 ); 
FRLends = param( 221 ); 
irrFRLz = param( 222 ); 
E_elastic = param( 223 ); 
nu_poisson = param( 224 ); 
G_elastic = param( 225 ); 
aRFR = param( 226 ); 
bRFR = param( 227 ); 
C11RFR = param( 228 ); 
C22RFR = param( 229 ); 
C23RFR = param( 230 ); 
C33RFR = param( 231 ); 
aRFL = param( 232 ); 
bRFL = param( 233 ); 
C11RFL = param( 234 ); 
C22RFL = param( 235 ); 
C23RFL = param( 236 ); 
C33RFL = param( 237 ); 
aRRR = param( 238 ); 
bRRR = param( 239 ); 
C11RRR = param( 240 ); 
C22RRR = param( 241 ); 
C23RRR = param( 242 ); 
C33RRR = param( 243 ); 
aRRL = param( 244 ); 
bRRL = param( 245 ); 
C11RRL = param( 246 ); 
C22RRL = param( 247 ); 
C23RRL = param( 248 ); 
C33RRL = param( 249 ); 
aFFR = param( 250 ); 
bFFR = param( 251 ); 
C11FFR = param( 252 ); 
C22FFR = param( 253 ); 
C23FFR = param( 254 ); 
C33FFR = param( 255 ); 
aFFL = param( 256 ); 
bFFL = param( 257 ); 
C11FFL = param( 258 ); 
C22FFL = param( 259 ); 
C23FFL = param( 260 ); 
C33FFL = param( 261 ); 
aFRR = param( 262 ); 
bFRR = param( 263 ); 
C11FRR = param( 264 ); 
C22FRR = param( 265 ); 
C23FRR = param( 266 ); 
C33FRR = param( 267 ); 
aFRL = param( 268 ); 
bFRL = param( 269 ); 
C11FRL = param( 270 ); 
C22FRL = param( 271 ); 
C23FRL = param( 272 ); 
C33FRL = param( 273 ); 
epsiRFR = param( 274 ); 
epsiRFL = param( 275 ); 
epsiRRR = param( 276 ); 
epsiRRL = param( 277 ); 
epsiFFR = param( 278 ); 
epsiFFL = param( 279 ); 
epsiFRR = param( 280 ); 
epsiFRL = param( 281 ); 

atom2069 = (RFLstas-RFLends)^(-1);
atom2071 = atom2069*(RFLstas-xR_RFL);
atom2073 = atom2071*RFLas+RFLbs;
atom2075 = RFLcs+atom2071*atom2073;
atom2077 = atom2071*atom2075+RFLds;
atom2082 = -atom2069*RFLas;
atom2085 = atom2082*atom2071-atom2073*atom2069;
atom2088 = -atom2069*atom2075+atom2071*atom2085;
atom2091 = atom2071*atom2088-atom2069*atom2077;
atom2094 = atom2071*atom2091-atom2069*(atom2071*atom2077+RFLes);
atom2096 = 1+atom2094^2;
atom2097 = sqrt(atom2096);
atom2108 = -atom2085*atom2069;
atom2112 = -atom2069*atom2088;
atom2105 = -atom2069*atom2091;
atom2118 = 2*atom2105+(2*atom2112+(-(2.0)*atom2082*atom2071*atom2069+2*atom2108)*atom2071)*atom2071;
atom2123 = -atom2094*atom2096^(-1/2)*atom2118*atom2097^(-2);
atom2127 = 1-(0.5)*atom2094*atom2123*L_RAIL-(0.5)*atom2118*atom2097^(-1)*L_RAIL;
atom2129 = atom2094+(0.5)*atom2123*L_RAIL;
atom2165 = atom2127^2;
atom2173 = (atom2129^2+atom2165)^(-1/2);
atom2174 = atom2127*atom2173;
atom61881 = -C11RFL*atom2174*G_elastic*aRFL*epsiRFL*bRFL;
atom2175 = atom2129*atom2173;
atom863 = sin(aRBOG);
atom21747 = -atom863*zRWHSF;
atom1210 = sin(cRSLD);
atom864 = cos(bRBOG);
atom862 = cos(aRBOG);
atom865 = sin(bRBOG);
atom867 = atom862*atom865;
atom1717 = L_OBOG_OWHS*atom864;
atom21746 = atom1717+atom867*zRWHSF;
atom1209 = cos(cRSLD);
atom0 = -1/2*L_WAG;
atom21753 = atom21746*atom1209-atom21747*atom1210;
atom1173 = sin(bWAG);
atom1174 = cos(aWAG);
atom21757 = atom0+atom21753;
atom1194 = -atom1173*atom1174;
atom1175 = sin(aWAG);
atom21756 = atom21746*atom1210+atom1209*atom21747;
atom1172 = cos(bWAG);
atom869 = atom862*atom864;
atom1725 = -L_OBOG_OWHS*atom865;
atom21749 = atom1725+zRWHSF*atom869;
atom1195 = atom1172*atom1174;
atom21750 = atom21749+zRBOG;
atom21772 = atom1195*atom21750+atom1175*atom21756+atom21757*atom1194;
atom1177 = sin(cWAG);
atom1225 = atom1194*atom1209+atom1175*atom1210;
atom1246 = atom1195*atom864+atom1225*atom865;
atom1227 = atom1175*atom1209;
atom1228 = atom1227-atom1194*atom1210;
atom30 = cos(aRWHSF);
atom1264 = atom862*atom1246-atom863*atom1228;
atom1261 = atom862*atom1228+atom863*atom1246;
atom31 = sin(aRWHSF);
atom1962 = uW_RFL-lW_RFL;
atom1968 = dW_RFL+(cW_RFL+(aW_RFL*atom1962+bW_RFL)*atom1962)*atom1962;
atom1288 = -atom1261*atom31+atom30*atom1264;
atom1971 = atom1968*cos(thetaW_RFL);
atom1285 = atom30*atom1261+atom1264*atom31;
atom1243 = atom1225*atom864-atom1195*atom865;
atom1969 = -sin(thetaW_RFL)*atom1968;
atom1702 = -(0.5)*L_WHS;
atom1972 = -atom1702*atom31+zRWHSF;
atom868 = atom863*atom864;
atom1714 = atom30*atom1702;
atom1981 = -atom868*atom1714+zRBOG+atom1972*atom869+atom1725;
atom1975 = atom1972*atom867+atom1717-atom863*atom1714*atom865;
atom1977 = -atom862*atom1714-atom863*atom1972;
atom1987 = atom1977*atom1209+atom1975*atom1210;
atom1988 = atom0-atom1977*atom1210+atom1975*atom1209;
atom21899 = -atom21772+atom1243*atom1969+uW_RFL*atom1285+atom1175*atom1987+atom1288*atom1971+atom1988*atom1194+atom1981*atom1195;
atom51735 = atom21772*atom1177;
atom1176 = cos(cWAG);
atom51866 = -atom21772*atom1176;
atom61745 = atom51866-atom1176*atom21899;
atom61747 = atom2174*(atom51735+atom21899*atom1177)+atom61745*atom2175;
atom1180 = atom1176*atom1174;
atom1181 = -atom1175*atom1176;
atom1190 = -atom1181*atom1173+atom1172*atom1177;
atom1191 = atom1177*atom1173;
atom1193 = atom1191+atom1172*atom1181;
atom21767 = atom21757*atom1190+atom1193*atom21750+atom1180*atom21756;
atom1222 = atom1180*atom1209-atom1190*atom1210;
atom1219 = atom1180*atom1210+atom1190*atom1209;
atom1240 = atom1219*atom865+atom1193*atom864;
atom1255 = atom862*atom1222+atom863*atom1240;
atom1258 = -atom863*atom1222+atom862*atom1240;
atom1279 = atom1258*atom31+atom1255*atom30;
atom1237 = atom864*atom1219-atom1193*atom865;
atom1282 = atom1258*atom30-atom1255*atom31;
atom21898 = atom1969*atom1237+uW_RFL*atom1279+atom1193*atom1981-atom21767+atom1988*atom1190+atom1282*atom1971+atom1180*atom1987;
atom51759 = -atom1175*atom21767+atom21772*atom1180;
atom1179 = atom1175*atom1177;
atom1185 = atom1176*atom1173;
atom1187 = atom1172*atom1179+atom1185;
atom1184 = atom1172*atom1176-atom1173*atom1179;
atom1178 = -atom1177*atom1174;
atom21762 = atom1187*atom21750+atom21757*atom1184+atom21756*atom1178;
atom1213 = atom1209*atom1184+atom1178*atom1210;
atom1231 = atom1213*atom864-atom1187*atom865;
atom1234 = atom1213*atom865+atom864*atom1187;
atom1216 = -atom1184*atom1210+atom1209*atom1178;
atom1249 = atom863*atom1234+atom862*atom1216;
atom1252 = atom862*atom1234-atom863*atom1216;
atom1273 = atom1252*atom31+atom30*atom1249;
atom1276 = atom1252*atom30-atom1249*atom31;
atom21897 = atom1276*atom1971+atom1981*atom1187+atom1987*atom1178+atom1988*atom1184-atom21762+atom1231*atom1969+uW_RFL*atom1273;
atom51875 = -atom21772*atom1178+atom1175*atom21762;
atom61756 = atom21897*atom1175-atom21899*atom1178+atom51875;
atom61758 = (atom51759+atom1180*atom21899-atom1175*atom21898)*atom2174+atom61756*atom2175;
atom61761 = atom21897+atom21762;
atom61763 = -atom2174*(atom21898+atom21767)+atom61761*atom2175;
atom3814 = -atom1175*atom1172;
atom60839 = atom1191+atom1176*atom3814;
atom25002 = -atom21756*atom1184+atom1178*atom21753;
atom60833 = -atom3814*atom1177+atom1185;
atom24853 = atom1180*atom21753-atom21756*atom1190;
atom61772 = atom21897*atom1195+atom24853-atom21899*atom60833;
atom61774 = atom2175*atom61772+(atom60839*atom21899+atom25002-atom21898*atom1195)*atom2174;
atom7969 = atom1193*atom2175+atom2174*atom1187;
atom51823 = -atom21749*atom864-atom21746*atom865;
atom51819 = -atom21747*atom865;
atom51825 = -atom1209*atom51819-atom51823*atom1210;
atom51829 = atom51823*atom1209-atom1210*atom51819;
atom51832 = atom864*atom21747;
atom22967 = atom864*atom1210;
atom24052 = atom864*atom1209;
atom60847 = -atom1172*atom865-atom1173*atom24052;
atom60853 = -atom1175*atom60847+atom22967*atom1174;
atom22964 = -atom1173*atom865;
atom60856 = atom1172*atom24052+atom22964;
atom60865 = atom1176*atom60853+atom60856*atom1177;
atom60849 = atom60847*atom1174+atom1175*atom22967;
atom51834 = atom51832*atom1187+atom51829*atom1178+atom51825*atom1184;
atom61777 = atom21899*atom60865-atom21898*atom60849;
atom60858 = atom1176*atom60856-atom60853*atom1177;
atom61782 = atom21897*atom60849-atom60858*atom21899;
atom51898 = atom1193*atom51832+atom1180*atom51829+atom51825*atom1190;
atom61783 = atom61782+atom51898;
atom61785 = atom2175*atom61783+atom2174*(atom51834+atom61777);
atom22861 = -atom1172*atom1210;
atom22863 = atom1173*atom1210;
atom60874 = atom1209*atom1174-atom1175*atom22863;
atom60877 = atom22861*atom1176-atom60874*atom1177;
atom22942 = atom22863*atom1174+atom1227;
atom24911 = atom21749*atom1209;
atom24913 = atom21749*atom1210;
atom24923 = atom1180*atom24913+atom24911*atom1190-atom1193*atom21746;
atom61794 = -atom60877*atom21899+atom24923+atom22942*atom21897;
atom60884 = atom22861*atom1177+atom60874*atom1176;
atom25030 = atom24913*atom1178-atom21746*atom1187+atom24911*atom1184;
atom61796 = atom61794*atom2175+atom2174*(atom60884*atom21899-atom22942*atom21898+atom25030);
atom4138 = -atom863*atom1209;
atom4139 = atom4138+atom867*atom1210;
atom4143 = atom867*atom1209+atom863*atom1210;
atom4152 = atom1193*atom869+atom1180*atom4139+atom4143*atom1190;
atom7978 = atom4152*atom2175+(atom4143*atom1184+atom4139*atom1178+atom1187*atom869)*atom2174;
atom61799 = atom2174*atom61777+atom61782*atom2175;
atom24189 = -atom863*atom30-atom862*atom31;
atom60903 = -atom864*atom24189;
atom60894 = -atom24189*atom865;
atom24177 = atom862*atom30-atom863*atom31;
atom60901 = -atom24177*atom1210+atom60894*atom1209;
atom60905 = atom1172*atom60903-atom60901*atom1173;
atom60897 = atom24177*atom1209+atom60894*atom1210;
atom60907 = atom60897*atom1175+atom60905*atom1174;
atom60915 = atom1172*atom60901+atom60903*atom1173;
atom60911 = -atom1175*atom60905+atom60897*atom1174;
atom60917 = atom1176*atom60915-atom60911*atom1177;
atom61806 = atom21897*atom60907-atom21899*atom60917;
atom60923 = atom1177*atom60915+atom60911*atom1176;
atom61808 = atom61806*atom2175+(atom60923*atom21899-atom21898*atom60907)*atom2174;
atom61882 = -C11RFL*G_elastic*aRFL*epsiRFL*bRFL*atom2175;
atom2061 = uR_RFL-lR_RFL;
atom2062 = atom2061*aR_RFL;
atom2063 = atom2062+bR_RFL;
atom2132 = atom2063*atom2061+(atom2063+atom2062)*atom2061+cR_RFL;
atom2178 = (1+atom2132^2)^(-1/2);
atom61883 = -atom2178*G_elastic*C22RFL*aRFL*epsiRFL*bRFL;
atom2179 = atom2178*atom2132;
atom51916 = atom1176*atom21767-atom21762*atom1177;
atom61815 = (atom51916-atom21897*atom1177+atom1176*atom21898)*atom2179+atom61745*atom2178;
atom2134 = -atom2127*atom2132;
atom2133 = atom2129*atom2132;
atom2167 = (atom2165+atom2133^2+atom2134^2)^(-1/2);
atom2169 = atom2167*atom2134;
atom2168 = atom2167*atom2133;
atom61885 = sqrt(aRFL*bRFL);
atom61856 = atom1176*atom2168+atom2169*atom1177;
atom61886 = -atom61885*atom2178*G_elastic*aRFL*C23RFL*epsiRFL*bRFL;
atom2170 = atom2167*atom2127;
atom61861 = atom2168*atom1178+atom1180*atom2169+atom1175*atom2170;
atom51925 = atom21767*atom1178-atom1180*atom21762;
atom61822 = atom61756*atom2178+(atom21898*atom1178+atom51925-atom1180*atom21897)*atom2179;
atom61823 = atom61761*atom2178;
atom24849 = atom1175*atom21753-atom21756*atom1194;
atom61830 = -(atom21897*atom60839-atom21898*atom60833-atom24849)*atom2179+atom2178*atom61772;
atom61865 = atom2169*atom60839+atom2168*atom60833+atom1195*atom2170;
atom8018 = atom1193*atom2178+atom1195*atom2179;
atom61870 = atom60849*atom2170+atom60858*atom2168+atom2169*atom60865;
atom51947 = atom1195*atom51832+atom51829*atom1175+atom51825*atom1194;
atom61833 = atom21898*atom60858-atom21897*atom60865;
atom61837 = atom2179*(atom51947+atom61833)+atom2178*atom61783;
atom61994 = atom61886*atom61870;
atom24917 = atom1194*atom24911-atom21746*atom1195+atom1175*atom24913;
atom61844 = -(atom21897*atom60884-atom60877*atom21898-atom24917)*atom2179+atom2178*atom61794;
atom61875 = atom22942*atom2170+atom60884*atom2169+atom60877*atom2168;
atom8027 = (atom4139*atom1175+atom1195*atom869+atom4143*atom1194)*atom2179+atom4152*atom2178;
atom61847 = atom2178*atom61782+atom61833*atom2179;
atom61853 = atom61806*atom2178-(atom21897*atom60923-atom21898*atom60917)*atom2179;
atom61880 = atom60907*atom2170+atom2168*atom60917+atom60923*atom2169;
atom61887 = -G_elastic*C22RFL*aRFL*atom2179*epsiRFL*bRFL;
atom61888 = -atom61885*G_elastic*aRFL*C23RFL*atom2179*epsiRFL*bRFL;
atom62029 = atom61888*atom61870;
atom22860 = atom1172*atom1209;
atom22970 = atom864*atom1173+atom22860*atom865;
atom23999 = atom862*atom22970-atom22861*atom863;
atom23996 = atom862*atom22861+atom22970*atom863;
atom24168 = atom23996*atom30+atom23999*atom31;
atom22966 = atom864*atom22860+atom22964;
atom24180 = atom23999*atom30-atom23996*atom31;
atom59017 = atom24168*atom1273+atom1231*atom22966+atom24180*atom1276;
atom59009 = atom22966*atom1243+atom24168*atom1285+atom24180*atom1288;
atom59256 = atom21897*atom59009+atom51866-atom59017*atom21899;
atom59003 = atom24180*atom1282+atom22966*atom1237+atom24168*atom1279;
atom61889 = -C11RFL*G_elastic*aRFL*(atom59256*atom2175+atom2174*(atom51735-atom21898*atom59009+atom21899*atom59003))*epsiRFL*bRFL;
atom61665 = atom59256*atom2178+(atom51916-atom21897*atom59003+atom59017*atom21898)*atom2179;
atom61671 = atom2169*atom1237+atom1243*atom2170+atom1231*atom2168;
atom21895 = atom2169*atom1279+atom1285*atom2170+atom1273*atom2168;
atom61678 = atom2169*atom1282+atom1276*atom2168+atom1288*atom2170;
atom61680 = atom22966*atom61671+atom24168*atom21895+atom61678*atom24180;
atom61892 = -G_elastic*atom61665*C22RFL*aRFL*epsiRFL*bRFL+atom61885*G_elastic*aRFL*C23RFL*epsiRFL*atom61680*bRFL;
atom61894 = aRFL^2;
atom61895 = bRFL^2;
atom61897 = -atom61885*G_elastic*atom61665*aRFL*C23RFL*epsiRFL*bRFL-C33RFL*atom61894*G_elastic*atom61895*epsiRFL*atom61680;
atom62071 = atom61897*atom61870;
atom22971 = atom865*atom1210;
atom24001 = atom862*atom1209+atom863*atom22971;
atom24003 = atom4138+atom862*atom22971;
atom24171 = atom24001*atom30+atom24003*atom31;
atom24183 = atom24003*atom30-atom24001*atom31;
atom59040 = atom22967*atom1237+atom24171*atom1279+atom24183*atom1282;
atom59046 = atom1243*atom22967+atom24171*atom1285+atom24183*atom1288;
atom59054 = atom1231*atom22967+atom1276*atom24183+atom24171*atom1273;
atom59278 = atom21897*atom59046-atom59054*atom21899+atom51875;
atom61898 = -C11RFL*G_elastic*aRFL*epsiRFL*bRFL*(atom2175*atom59278+(atom51759+atom59040*atom21899-atom59046*atom21898)*atom2174);
atom61686 = atom2178*atom59278+(atom59054*atom21898+atom51925-atom21897*atom59040)*atom2179;
atom61691 = atom22967*atom61671+atom24171*atom21895+atom61678*atom24183;
atom61901 = -atom61686*G_elastic*C22RFL*aRFL*epsiRFL*bRFL+atom61885*G_elastic*atom61691*aRFL*C23RFL*epsiRFL*bRFL;
atom61904 = -atom61686*atom61885*G_elastic*aRFL*C23RFL*epsiRFL*bRFL-C33RFL*atom61894*G_elastic*atom61691*atom61895*epsiRFL;
atom62121 = atom61904*atom61870;
atom59075 = atom1285*atom1279+atom1243*atom1237+atom1288*atom1282;
atom59079 = atom1288^2+atom1285^2+atom1243^2;
atom59085 = atom1273*atom1285+atom1231*atom1243+atom1276*atom1288;
atom59300 = atom21762+atom59079*atom21897-atom59085*atom21899;
atom61905 = C11RFL*G_elastic*aRFL*epsiRFL*bRFL*((atom59079*atom21898+atom21767-atom21899*atom59075)*atom2174-atom59300*atom2175);
atom61697 = (atom21898*atom59085-atom21897*atom59075)*atom2179+atom2178*atom59300;
atom61702 = atom1243*atom61671+atom21895*atom1285+atom61678*atom1288;
atom61908 = -G_elastic*C22RFL*aRFL*epsiRFL*bRFL*atom61697+atom61885*G_elastic*atom61702*aRFL*C23RFL*epsiRFL*bRFL;
atom61911 = -C33RFL*atom61894*G_elastic*atom61702*atom61895*epsiRFL-atom61885*G_elastic*aRFL*C23RFL*epsiRFL*bRFL*atom61697;
atom62171 = atom61870*atom61911;
atom24174 = atom868*atom30+atom869*atom31;
atom24186 = atom30*atom869-atom868*atom31;
atom59105 = -atom865*atom1237+atom24174*atom1279+atom24186*atom1282;
atom59109 = -atom1243*atom865+atom24186*atom1288+atom1285*atom24174;
atom59115 = atom1276*atom24186-atom1231*atom865+atom1273*atom24174;
atom59321 = atom21897*atom59109+atom24853-atom59115*atom21899;
atom61912 = -C11RFL*G_elastic*aRFL*((atom25002+atom21899*atom59105-atom21898*atom59109)*atom2174+atom59321*atom2175)*epsiRFL*bRFL;
atom61708 = (atom59115*atom21898-atom21897*atom59105+atom24849)*atom2179+atom59321*atom2178;
atom61713 = -atom865*atom61671+atom21895*atom24174+atom61678*atom24186;
atom61915 = -G_elastic*C22RFL*aRFL*epsiRFL*bRFL*atom61708+atom61885*G_elastic*aRFL*atom61713*C23RFL*epsiRFL*bRFL;
atom61918 = -C33RFL*atom61894*G_elastic*atom61895*atom61713*epsiRFL-atom61885*G_elastic*aRFL*C23RFL*epsiRFL*bRFL*atom61708;
atom62221 = atom61918*atom61870;
atom61919 = -C11RFL*G_elastic*aRFL*atom7969*epsiRFL*bRFL;
atom61920 = -G_elastic*C22RFL*aRFL*epsiRFL*bRFL*atom8018;
atom61921 = -atom61885*G_elastic*aRFL*C23RFL*epsiRFL*bRFL*atom8018;
atom62271 = atom61921*atom61870;
atom59342 = -atom1231*atom21899+atom21897*atom1243;
atom59343 = atom59342+atom51898;
atom59338 = -atom1243*atom21898+atom21899*atom1237;
atom61922 = -C11RFL*G_elastic*(atom2174*(atom51834+atom59338)+atom59343*atom2175)*aRFL*epsiRFL*bRFL;
atom59346 = -atom21897*atom1237+atom1231*atom21898;
atom61719 = atom2178*atom59343+(atom59346+atom51947)*atom2179;
atom61924 = atom61885*G_elastic*aRFL*C23RFL*epsiRFL*bRFL*atom61671;
atom61925 = atom61924-atom61719*G_elastic*C22RFL*aRFL*epsiRFL*bRFL;
atom61927 = -C33RFL*atom61894*G_elastic*atom61895*epsiRFL*atom61671;
atom61928 = atom61927-atom61719*atom61885*G_elastic*aRFL*C23RFL*epsiRFL*bRFL;
atom62321 = atom61928*atom61870;
atom59156 = atom24177*atom1279+atom24189*atom1282;
atom59160 = atom24189*atom1288+atom24177*atom1285;
atom59166 = atom1276*atom24189+atom24177*atom1273;
atom59363 = atom21897*atom59160+atom24923-atom21899*atom59166;
atom61929 = -C11RFL*G_elastic*aRFL*epsiRFL*bRFL*(atom2174*(atom59156*atom21899-atom21898*atom59160+atom25030)+atom59363*atom2175);
atom61728 = atom24177*atom21895+atom61678*atom24189;
atom61725 = (atom21898*atom59166+atom24917-atom59156*atom21897)*atom2179+atom2178*atom59363;
atom61932 = -atom61725*G_elastic*C22RFL*aRFL*epsiRFL*bRFL+atom61885*G_elastic*aRFL*C23RFL*epsiRFL*bRFL*atom61728;
atom61935 = -C33RFL*atom61894*G_elastic*atom61895*epsiRFL*atom61728-atom61725*atom61885*G_elastic*aRFL*C23RFL*epsiRFL*bRFL;
atom62371 = atom61935*atom61870;
atom61936 = -C11RFL*G_elastic*aRFL*epsiRFL*bRFL*atom7978;
atom61937 = -G_elastic*C22RFL*aRFL*atom8027*epsiRFL*bRFL;
atom61938 = -atom61885*G_elastic*aRFL*atom8027*C23RFL*epsiRFL*bRFL;
atom62421 = atom61938*atom61870;
atom61939 = -C11RFL*G_elastic*aRFL*epsiRFL*bRFL*(atom59338*atom2174+atom59342*atom2175);
atom61734 = atom2178*atom59342+atom59346*atom2179;
atom61941 = -atom61734*G_elastic*C22RFL*aRFL*epsiRFL*bRFL+atom61924;
atom61943 = atom61927-atom61885*atom61734*G_elastic*aRFL*C23RFL*epsiRFL*bRFL;
atom62471 = atom61943*atom61870;
atom59388 = -atom1273*atom21899+atom21897*atom1285;
atom61944 = C11RFL*(atom2174*(atom21898*atom1285-atom21899*atom1279)-atom59388*atom2175)*G_elastic*aRFL*epsiRFL*bRFL;
atom61740 = atom2178*atom59388+(atom21898*atom1273-atom21897*atom1279)*atom2179;
atom61947 = atom61885*G_elastic*aRFL*atom21895*C23RFL*epsiRFL*bRFL-G_elastic*C22RFL*aRFL*epsiRFL*bRFL*atom61740;
atom61950 = -C33RFL*atom61894*G_elastic*atom61895*atom21895*epsiRFL-atom61885*G_elastic*aRFL*C23RFL*epsiRFL*bRFL*atom61740;
atom62521 = atom61870*atom61950;

CKRFL_ = [atom2174*atom61881 , atom2175*atom61881 , 0 , atom61747*atom61881 , atom61758*atom61881 , atom61881*atom61763 , atom61774*atom61881 , 0 , atom7969*atom61881 , atom61881*atom61785 , atom61796*atom61881 , 0 , 0 , 0 , atom7978*atom61881 , atom61799*atom61881 , atom61808*atom61881 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2174*atom61882 , atom2175*atom61882+atom2178*atom61883 , atom61883*atom2179 , atom61747*atom61882+atom61815*atom61883+atom61856*atom61886 , atom61883*atom61822+atom61758*atom61882+atom61861*atom61886 , atom61886*atom2170+atom61823*atom61883+atom61763*atom61882 , atom61883*atom61830+atom61774*atom61882+atom61886*atom61865 , 0 , atom61883*atom8018+atom7969*atom61882 , atom61837*atom61883+atom61994+atom61882*atom61785 , atom61875*atom61886+atom61796*atom61882+atom61844*atom61883 , 0 , 0 , 0 , atom7978*atom61882+atom8027*atom61883 , atom61799*atom61882+atom61847*atom61883+atom61994 , atom61880*atom61886+atom61853*atom61883+atom61808*atom61882 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , atom2178*atom61887 , atom61887*atom2179 , atom61815*atom61887+atom61856*atom61888 , atom61888*atom61861+atom61887*atom61822 , atom61823*atom61887+atom61888*atom2170 , atom61888*atom61865+atom61887*atom61830 , 0 , atom61887*atom8018 , atom62029+atom61887*atom61837 , atom61844*atom61887+atom61875*atom61888 , 0 , 0 , 0 , atom61887*atom8027 , atom62029+atom61887*atom61847 , atom61887*atom61853+atom61880*atom61888 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2174*atom61889 , atom2175*atom61889+atom2178*atom61892 , atom2179*atom61892 , atom61815*atom61892+atom61747*atom61889+atom61856*atom61897 , atom61822*atom61892+atom61897*atom61861+atom61758*atom61889 , atom61823*atom61892+atom61897*atom2170+atom61889*atom61763 , atom61774*atom61889+atom61897*atom61865+atom61892*atom61830 , 0 , atom7969*atom61889+atom8018*atom61892 , atom62071+atom61889*atom61785+atom61837*atom61892 , atom61897*atom61875+atom61844*atom61892+atom61796*atom61889 , 0 , 0 , 0 , atom8027*atom61892+atom7978*atom61889 , atom61799*atom61889+atom62071+atom61847*atom61892 , atom61853*atom61892+atom61897*atom61880+atom61808*atom61889 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2174*atom61898 , atom2178*atom61901+atom61898*atom2175 , atom2179*atom61901 , atom61815*atom61901+atom61904*atom61856+atom61747*atom61898 , atom61822*atom61901+atom61904*atom61861+atom61758*atom61898 , atom61823*atom61901+atom61898*atom61763+atom61904*atom2170 , atom61774*atom61898+atom61904*atom61865+atom61901*atom61830 , 0 , atom7969*atom61898+atom61901*atom8018 , atom61898*atom61785+atom62121+atom61837*atom61901 , atom61844*atom61901+atom61796*atom61898+atom61904*atom61875 , 0 , 0 , 0 , atom8027*atom61901+atom61898*atom7978 , atom61799*atom61898+atom61847*atom61901+atom62121 , atom61853*atom61901+atom61904*atom61880+atom61808*atom61898 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2174*atom61905 , atom61905*atom2175+atom2178*atom61908 , atom61908*atom2179 , atom61747*atom61905+atom61815*atom61908+atom61856*atom61911 , atom61758*atom61905+atom61861*atom61911+atom61908*atom61822 , atom61823*atom61908+atom2170*atom61911+atom61905*atom61763 , atom61905*atom61774+atom61908*atom61830+atom61865*atom61911 , 0 , atom61905*atom7969+atom61908*atom8018 , atom61837*atom61908+atom62171+atom61905*atom61785 , atom61875*atom61911+atom61796*atom61905+atom61844*atom61908 , 0 , 0 , 0 , atom61905*atom7978+atom8027*atom61908 , atom61847*atom61908+atom61799*atom61905+atom62171 , atom61880*atom61911+atom61808*atom61905+atom61853*atom61908 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2174*atom61912 , atom2178*atom61915+atom61912*atom2175 , atom61915*atom2179 , atom61815*atom61915+atom61747*atom61912+atom61918*atom61856 , atom61758*atom61912+atom61822*atom61915+atom61918*atom61861 , atom61823*atom61915+atom61912*atom61763+atom61918*atom2170 , atom61912*atom61774+atom61915*atom61830+atom61918*atom61865 , 0 , atom61915*atom8018+atom61912*atom7969 , atom62221+atom61912*atom61785+atom61837*atom61915 , atom61918*atom61875+atom61844*atom61915+atom61912*atom61796 , 0 , 0 , 0 , atom61912*atom7978+atom8027*atom61915 , atom62221+atom61799*atom61912+atom61847*atom61915 , atom61808*atom61912+atom61918*atom61880+atom61853*atom61915 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2174*atom61919 , atom61919*atom2175+atom2178*atom61920 , atom61920*atom2179 , atom61747*atom61919+atom61856*atom61921+atom61815*atom61920 , atom61758*atom61919+atom61920*atom61822+atom61921*atom61861 , atom61919*atom61763+atom61921*atom2170+atom61823*atom61920 , atom61919*atom61774+atom61921*atom61865+atom61920*atom61830 , 0 , atom61919*atom7969+atom61920*atom8018 , atom61919*atom61785+atom62271+atom61837*atom61920 , atom61844*atom61920+atom61919*atom61796+atom61875*atom61921 , 0 , 0 , 0 , atom61919*atom7978+atom8027*atom61920 , atom62271+atom61847*atom61920+atom61799*atom61919 , atom61808*atom61919+atom61880*atom61921+atom61853*atom61920 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2174*atom61922 , atom2175*atom61922+atom2178*atom61925 , atom61925*atom2179 , atom61815*atom61925+atom61747*atom61922+atom61856*atom61928 , atom61758*atom61922+atom61925*atom61822+atom61928*atom61861 , atom61823*atom61925+atom61928*atom2170+atom61763*atom61922 , atom61774*atom61922+atom61928*atom61865+atom61925*atom61830 , 0 , atom61925*atom8018+atom7969*atom61922 , atom62321+atom61922*atom61785+atom61837*atom61925 , atom61844*atom61925+atom61928*atom61875+atom61796*atom61922 , 0 , 0 , 0 , atom7978*atom61922+atom61925*atom8027 , atom61799*atom61922+atom62321+atom61925*atom61847 , atom61928*atom61880+atom61925*atom61853+atom61808*atom61922 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2174*atom61929 , atom61929*atom2175+atom2178*atom61932 , atom61932*atom2179 , atom61932*atom61815+atom61935*atom61856+atom61747*atom61929 , atom61932*atom61822+atom61935*atom61861+atom61758*atom61929 , atom61932*atom61823+atom61935*atom2170+atom61929*atom61763 , atom61929*atom61774+atom61935*atom61865+atom61932*atom61830 , 0 , atom61932*atom8018+atom7969*atom61929 , atom61929*atom61785+atom61932*atom61837+atom62371 , atom61935*atom61875+atom61844*atom61932+atom61796*atom61929 , 0 , 0 , 0 , atom61929*atom7978+atom61932*atom8027 , atom61799*atom61929+atom61932*atom61847+atom62371 , atom61935*atom61880+atom61808*atom61929+atom61932*atom61853 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2174*atom61936 , atom61936*atom2175+atom2178*atom61937 , atom61937*atom2179 , atom61747*atom61936+atom61815*atom61937+atom61938*atom61856 , atom61758*atom61936+atom61938*atom61861+atom61937*atom61822 , atom61938*atom2170+atom61823*atom61937+atom61936*atom61763 , atom61938*atom61865+atom61937*atom61830+atom61936*atom61774 , 0 , atom61936*atom7969+atom61937*atom8018 , atom62421+atom61837*atom61937+atom61936*atom61785 , atom61938*atom61875+atom61936*atom61796+atom61844*atom61937 , 0 , 0 , 0 , atom8027*atom61937+atom61936*atom7978 , atom61847*atom61937+atom62421+atom61799*atom61936 , atom61938*atom61880+atom61808*atom61936+atom61853*atom61937 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2174*atom61939 , atom61941*atom2178+atom61939*atom2175 , atom61941*atom2179 , atom61943*atom61856+atom61747*atom61939+atom61941*atom61815 , atom61943*atom61861+atom61758*atom61939+atom61941*atom61822 , atom61939*atom61763+atom61943*atom2170+atom61941*atom61823 , atom61941*atom61830+atom61943*atom61865+atom61939*atom61774 , 0 , atom61939*atom7969+atom61941*atom8018 , atom62471+atom61941*atom61837+atom61939*atom61785 , atom61939*atom61796+atom61844*atom61941+atom61943*atom61875 , 0 , 0 , 0 , atom61941*atom8027+atom61939*atom7978 , atom61799*atom61939+atom62471+atom61941*atom61847 , atom61941*atom61853+atom61943*atom61880+atom61808*atom61939 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2174*atom61944 , atom61944*atom2175+atom61947*atom2178 , atom61947*atom2179 , atom61747*atom61944+atom61947*atom61815+atom61856*atom61950 , atom61758*atom61944+atom61861*atom61950+atom61947*atom61822 , atom61947*atom61823+atom2170*atom61950+atom61944*atom61763 , atom61944*atom61774+atom61947*atom61830+atom61865*atom61950 , 0 , atom61944*atom7969+atom61947*atom8018 , atom62521+atom61944*atom61785+atom61947*atom61837 , atom61875*atom61950+atom61796*atom61944+atom61844*atom61947 , 0 , 0 , 0 , atom61947*atom8027+atom61944*atom7978 , atom62521+atom61799*atom61944+atom61947*atom61847 , atom61947*atom61853+atom61880*atom61950+atom61808*atom61944 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0];

%endfunction
