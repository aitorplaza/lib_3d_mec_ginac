function CKFRL_ = CKFRL(q,qaux,dq,time,param)

xWAG = q( 1 ); 
yWAG = q( 2 ); 
zWAG = q( 3 ); 
aWAG = q( 4 ); 
bWAG = q( 5 ); 
cWAG = q( 6 ); 
cRSLD = q( 7 ); 
cFSLD = q( 8 ); 
zRBOG = q( 9 ); 
aRBOG = q( 10 ); 
bRBOG = q( 11 ); 
zFBOG = q( 12 ); 
aFBOG = q( 13 ); 
bFBOG = q( 14 ); 
zRWHSF = q( 15 ); 
aRWHSF = q( 16 ); 
bRWHSF = q( 17 ); 
zRWHSR = q( 18 ); 
aRWHSR = q( 19 ); 
bRWHSR = q( 20 ); 
zFWHSF = q( 21 ); 
aFWHSF = q( 22 ); 
bFWHSF = q( 23 ); 
zFWHSR = q( 24 ); 
aFWHSR = q( 25 ); 
bFWHSR = q( 26 ); 
bRAXBFL = q( 27 ); 
bRAXBFR = q( 28 ); 
bRAXBRL = q( 29 ); 
bRAXBRR = q( 30 ); 
bFAXBFL = q( 31 ); 
bFAXBFR = q( 32 ); 
bFAXBRL = q( 33 ); 
bFAXBRR = q( 34 ); 
xRMOTF = q( 35 ); 
yRMOTF = q( 36 ); 
zRMOTF = q( 37 ); 
bRMOTF = q( 38 ); 
xRMOTR = q( 39 ); 
yRMOTR = q( 40 ); 
zRMOTR = q( 41 ); 
bRMOTR = q( 42 ); 
bRROTF = q( 43 ); 
bRROTR = q( 44 ); 

thetaW_RFR = qaux( 1 ); 
uW_RFR = qaux( 2 ); 
uR_RFR = qaux( 3 ); 
xR_RFR = qaux( 4 ); 
thetaW_RFL = qaux( 5 ); 
uW_RFL = qaux( 6 ); 
uR_RFL = qaux( 7 ); 
xR_RFL = qaux( 8 ); 
thetaW_RRR = qaux( 9 ); 
uW_RRR = qaux( 10 ); 
uR_RRR = qaux( 11 ); 
xR_RRR = qaux( 12 ); 
thetaW_RRL = qaux( 13 ); 
uW_RRL = qaux( 14 ); 
uR_RRL = qaux( 15 ); 
xR_RRL = qaux( 16 ); 
thetaW_FFR = qaux( 17 ); 
uW_FFR = qaux( 18 ); 
uR_FFR = qaux( 19 ); 
xR_FFR = qaux( 20 ); 
thetaW_FFL = qaux( 21 ); 
uW_FFL = qaux( 22 ); 
uR_FFL = qaux( 23 ); 
xR_FFL = qaux( 24 ); 
thetaW_FRR = qaux( 25 ); 
uW_FRR = qaux( 26 ); 
uR_FRR = qaux( 27 ); 
xR_FRR = qaux( 28 ); 
thetaW_FRL = qaux( 29 ); 
uW_FRL = qaux( 30 ); 
uR_FRL = qaux( 31 ); 
xR_FRL = qaux( 32 ); 

dxWAG = dq( 1 ); 
dyWAG = dq( 2 ); 
dzWAG = dq( 3 ); 
daWAG = dq( 4 ); 
dbWAG = dq( 5 ); 
dcWAG = dq( 6 ); 
dcRSLD = dq( 7 ); 
dcFSLD = dq( 8 ); 
dzRBOG = dq( 9 ); 
daRBOG = dq( 10 ); 
dbRBOG = dq( 11 ); 
dzFBOG = dq( 12 ); 
daFBOG = dq( 13 ); 
dbFBOG = dq( 14 ); 
dzRWHSF = dq( 15 ); 
daRWHSF = dq( 16 ); 
dbRWHSF = dq( 17 ); 
dzRWHSR = dq( 18 ); 
daRWHSR = dq( 19 ); 
dbRWHSR = dq( 20 ); 
dzFWHSF = dq( 21 ); 
daFWHSF = dq( 22 ); 
dbFWHSF = dq( 23 ); 
dzFWHSR = dq( 24 ); 
daFWHSR = dq( 25 ); 
dbFWHSR = dq( 26 ); 
dbRAXBFL = dq( 27 ); 
dbRAXBFR = dq( 28 ); 
dbRAXBRL = dq( 29 ); 
dbRAXBRR = dq( 30 ); 
dbFAXBFL = dq( 31 ); 
dbFAXBFR = dq( 32 ); 
dbFAXBRL = dq( 33 ); 
dbFAXBRR = dq( 34 ); 
dxRMOTF = dq( 35 ); 
dyRMOTF = dq( 36 ); 
dzRMOTF = dq( 37 ); 
dbRMOTF = dq( 38 ); 
dxRMOTR = dq( 39 ); 
dyRMOTR = dq( 40 ); 
dzRMOTR = dq( 41 ); 
dbRMOTR = dq( 42 ); 
dbRROTF = dq( 43 ); 
dbRROTR = dq( 44 ); 

t= time ;

g = param( 1 ); 
L_OBOG_OAXBy = param( 2 ); 
L_OBOG_OAXBz = param( 3 ); 
L_OBOG_OSUSPy = param( 4 ); 
L_OBOG_OSUSPx = param( 5 ); 
L_OBOG_OSUSPz = param( 6 ); 
L_OBOG_OWHS = param( 7 ); 
L_OBOG_P1BOG = param( 8 ); 
L_MOT = param( 9 ); 
L_GEAR = param( 10 ); 
L_AXB1 = param( 11 ); 
L_AXB2 = param( 12 ); 
L_SUSP = param( 13 ); 
L_WHS = param( 14 ); 
L_RAIL = param( 15 ); 
L_WAG = param( 16 ); 
L_SUSPBEAM1 = param( 17 ); 
L_SUSPBEAM2 = param( 18 ); 
L_SLDx = param( 19 ); 
L_SLDy = param( 20 ); 
b_pend = param( 21 ); 
a_pend = param( 22 ); 
L0_1 = param( 23 ); 
L0_2 = param( 24 ); 
m_WAG = param( 25 ); 
I_WAGx = param( 26 ); 
I_WAGy = param( 27 ); 
I_WAGz = param( 28 ); 
xCGWAG = param( 29 ); 
yCGWAG = param( 30 ); 
zCGWAG = param( 31 ); 
G_BOGz = param( 32 ); 
m_BOG = param( 33 ); 
I_BOGx = param( 34 ); 
I_BOGy = param( 35 ); 
I_BOGz = param( 36 ); 
m_MOT = param( 37 ); 
I_MOTx = param( 38 ); 
I_MOTy = param( 39 ); 
I_MOTz = param( 40 ); 
m_ROT = param( 41 ); 
I_ROTx = param( 42 ); 
I_ROTy = param( 43 ); 
I_ROTz = param( 44 ); 
m_WHS = param( 45 ); 
I_WHSx = param( 46 ); 
I_WHSy = param( 47 ); 
I_WHSz = param( 48 ); 
I_CORy = param( 49 ); 
m_AXB = param( 50 ); 
I_AXBx = param( 51 ); 
I_AXBy = param( 52 ); 
I_AXBz = param( 53 ); 
m_SLD = param( 54 ); 
I_SLDx = param( 55 ); 
I_SLDy = param( 56 ); 
I_SLDz = param( 57 ); 
K_SSl = param( 58 ); 
C_SSl = param( 59 ); 
C_SSr = param( 60 ); 
K_SSr = param( 61 ); 
Kgear = param( 62 ); 
Cgear = param( 63 ); 
alpha_gear = param( 64 ); 
zROT = param( 65 ); 
zWHS = param( 66 ); 
K_S1 = param( 67 ); 
C_S1 = param( 68 ); 
K_S2 = param( 69 ); 
C_S2 = param( 70 ); 
aW_RFR = param( 71 ); 
bW_RFR = param( 72 ); 
cW_RFR = param( 73 ); 
dW_RFR = param( 74 ); 
lW_RFR = param( 75 ); 
aR_RFR = param( 76 ); 
bR_RFR = param( 77 ); 
cR_RFR = param( 78 ); 
dR_RFR = param( 79 ); 
lR_RFR = param( 80 ); 
RFRas = param( 81 ); 
RFRbs = param( 82 ); 
RFRcs = param( 83 ); 
RFRds = param( 84 ); 
RFRes = param( 85 ); 
RFRfs = param( 86 ); 
RFRstas = param( 87 ); 
RFRends = param( 88 ); 
irrRFRz = param( 89 ); 
aW_RFL = param( 90 ); 
bW_RFL = param( 91 ); 
cW_RFL = param( 92 ); 
dW_RFL = param( 93 ); 
lW_RFL = param( 94 ); 
aR_RFL = param( 95 ); 
bR_RFL = param( 96 ); 
cR_RFL = param( 97 ); 
dR_RFL = param( 98 ); 
lR_RFL = param( 99 ); 
RFLas = param( 100 ); 
RFLbs = param( 101 ); 
RFLcs = param( 102 ); 
RFLds = param( 103 ); 
RFLes = param( 104 ); 
RFLfs = param( 105 ); 
RFLstas = param( 106 ); 
RFLends = param( 107 ); 
irrRFLz = param( 108 ); 
aW_RRR = param( 109 ); 
bW_RRR = param( 110 ); 
cW_RRR = param( 111 ); 
dW_RRR = param( 112 ); 
lW_RRR = param( 113 ); 
aR_RRR = param( 114 ); 
bR_RRR = param( 115 ); 
cR_RRR = param( 116 ); 
dR_RRR = param( 117 ); 
lR_RRR = param( 118 ); 
RRRas = param( 119 ); 
RRRbs = param( 120 ); 
RRRcs = param( 121 ); 
RRRds = param( 122 ); 
RRRes = param( 123 ); 
RRRfs = param( 124 ); 
RRRstas = param( 125 ); 
RRRends = param( 126 ); 
irrRRRz = param( 127 ); 
aW_RRL = param( 128 ); 
bW_RRL = param( 129 ); 
cW_RRL = param( 130 ); 
dW_RRL = param( 131 ); 
lW_RRL = param( 132 ); 
aR_RRL = param( 133 ); 
bR_RRL = param( 134 ); 
cR_RRL = param( 135 ); 
dR_RRL = param( 136 ); 
lR_RRL = param( 137 ); 
RRLas = param( 138 ); 
RRLbs = param( 139 ); 
RRLcs = param( 140 ); 
RRLds = param( 141 ); 
RRLes = param( 142 ); 
RRLfs = param( 143 ); 
RRLstas = param( 144 ); 
RRLends = param( 145 ); 
irrRRLz = param( 146 ); 
aW_FFR = param( 147 ); 
bW_FFR = param( 148 ); 
cW_FFR = param( 149 ); 
dW_FFR = param( 150 ); 
lW_FFR = param( 151 ); 
aR_FFR = param( 152 ); 
bR_FFR = param( 153 ); 
cR_FFR = param( 154 ); 
dR_FFR = param( 155 ); 
lR_FFR = param( 156 ); 
FFRas = param( 157 ); 
FFRbs = param( 158 ); 
FFRcs = param( 159 ); 
FFRds = param( 160 ); 
FFRes = param( 161 ); 
FFRfs = param( 162 ); 
FFRstas = param( 163 ); 
FFRends = param( 164 ); 
irrFFRz = param( 165 ); 
aW_FFL = param( 166 ); 
bW_FFL = param( 167 ); 
cW_FFL = param( 168 ); 
dW_FFL = param( 169 ); 
lW_FFL = param( 170 ); 
aR_FFL = param( 171 ); 
bR_FFL = param( 172 ); 
cR_FFL = param( 173 ); 
dR_FFL = param( 174 ); 
lR_FFL = param( 175 ); 
FFLas = param( 176 ); 
FFLbs = param( 177 ); 
FFLcs = param( 178 ); 
FFLds = param( 179 ); 
FFLes = param( 180 ); 
FFLfs = param( 181 ); 
FFLstas = param( 182 ); 
FFLends = param( 183 ); 
irrFFLz = param( 184 ); 
aW_FRR = param( 185 ); 
bW_FRR = param( 186 ); 
cW_FRR = param( 187 ); 
dW_FRR = param( 188 ); 
lW_FRR = param( 189 ); 
aR_FRR = param( 190 ); 
bR_FRR = param( 191 ); 
cR_FRR = param( 192 ); 
dR_FRR = param( 193 ); 
lR_FRR = param( 194 ); 
FRRas = param( 195 ); 
FRRbs = param( 196 ); 
FRRcs = param( 197 ); 
FRRds = param( 198 ); 
FRRes = param( 199 ); 
FRRfs = param( 200 ); 
FRRstas = param( 201 ); 
FRRends = param( 202 ); 
irrFRRz = param( 203 ); 
aW_FRL = param( 204 ); 
bW_FRL = param( 205 ); 
cW_FRL = param( 206 ); 
dW_FRL = param( 207 ); 
lW_FRL = param( 208 ); 
aR_FRL = param( 209 ); 
bR_FRL = param( 210 ); 
cR_FRL = param( 211 ); 
dR_FRL = param( 212 ); 
lR_FRL = param( 213 ); 
FRLas = param( 214 ); 
FRLbs = param( 215 ); 
FRLcs = param( 216 ); 
FRLds = param( 217 ); 
FRLes = param( 218 ); 
FRLfs = param( 219 ); 
FRLstas = param( 220 ); 
FRLends = param( 221 ); 
irrFRLz = param( 222 ); 
E_elastic = param( 223 ); 
nu_poisson = param( 224 ); 
G_elastic = param( 225 ); 
aRFR = param( 226 ); 
bRFR = param( 227 ); 
C11RFR = param( 228 ); 
C22RFR = param( 229 ); 
C23RFR = param( 230 ); 
C33RFR = param( 231 ); 
aRFL = param( 232 ); 
bRFL = param( 233 ); 
C11RFL = param( 234 ); 
C22RFL = param( 235 ); 
C23RFL = param( 236 ); 
C33RFL = param( 237 ); 
aRRR = param( 238 ); 
bRRR = param( 239 ); 
C11RRR = param( 240 ); 
C22RRR = param( 241 ); 
C23RRR = param( 242 ); 
C33RRR = param( 243 ); 
aRRL = param( 244 ); 
bRRL = param( 245 ); 
C11RRL = param( 246 ); 
C22RRL = param( 247 ); 
C23RRL = param( 248 ); 
C33RRL = param( 249 ); 
aFFR = param( 250 ); 
bFFR = param( 251 ); 
C11FFR = param( 252 ); 
C22FFR = param( 253 ); 
C23FFR = param( 254 ); 
C33FFR = param( 255 ); 
aFFL = param( 256 ); 
bFFL = param( 257 ); 
C11FFL = param( 258 ); 
C22FFL = param( 259 ); 
C23FFL = param( 260 ); 
C33FFL = param( 261 ); 
aFRR = param( 262 ); 
bFRR = param( 263 ); 
C11FRR = param( 264 ); 
C22FRR = param( 265 ); 
C23FRR = param( 266 ); 
C33FRR = param( 267 ); 
aFRL = param( 268 ); 
bFRL = param( 269 ); 
C11FRL = param( 270 ); 
C22FRL = param( 271 ); 
C23FRL = param( 272 ); 
C33FRL = param( 273 ); 
epsiRFR = param( 274 ); 
epsiRFL = param( 275 ); 
epsiRRR = param( 276 ); 
epsiRRL = param( 277 ); 
epsiFFR = param( 278 ); 
epsiFFL = param( 279 ); 
epsiFRR = param( 280 ); 
epsiFRL = param( 281 ); 

atom3591 = (FRLstas-FRLends)^(-1);
atom3592 = atom3591*(FRLstas-xR_FRL);
atom3594 = FRLbs+atom3592*FRLas;
atom3596 = FRLcs+atom3592*atom3594;
atom3598 = FRLds+atom3596*atom3592;
atom3603 = -FRLas*atom3591;
atom3606 = -atom3594*atom3591+atom3603*atom3592;
atom3609 = -atom3596*atom3591+atom3592*atom3606;
atom3612 = -atom3598*atom3591+atom3609*atom3592;
atom3615 = -atom3591*(atom3592*atom3598+FRLes)+atom3612*atom3592;
atom3617 = 1+atom3615^2;
atom3618 = sqrt(atom3617);
atom3629 = -atom3606*atom3591;
atom3634 = -atom3609*atom3591;
atom3626 = -atom3612*atom3591;
atom3639 = 2*atom3626+2*atom3592*(atom3634+atom3592*(atom3629-atom3603*atom3592*atom3591));
atom3644 = -atom3615*atom3617^(-1/2)*atom3639*atom3618^(-2);
atom3650 = atom3615+(0.5)*atom3644*L_RAIL;
atom3648 = 1-(0.5)*atom3615*atom3644*L_RAIL-(0.5)*atom3639*L_RAIL*atom3618^(-1);
atom3686 = atom3648^2;
atom3694 = (atom3650^2+atom3686)^(-1/2);
atom3695 = atom3694*atom3648;
atom67262 = -C11FRL*G_elastic*aFRL*epsiFRL*atom3695*bFRL;
atom3696 = atom3650*atom3694;
atom1017 = sin(aFBOG);
atom1497 = sin(cFSLD);
atom22450 = -zFWHSR*atom1017;
atom1018 = cos(bFBOG);
atom1019 = sin(bFBOG);
atom1016 = cos(aFBOG);
atom1021 = atom1019*atom1016;
atom2733 = atom1018*L_OBOG_OWHS;
atom22449 = zFWHSR*atom1021-atom2733;
atom1496 = cos(cFSLD);
atom22456 = atom22449*atom1496-atom1497*atom22450;
atom0 = -1/2*L_WAG;
atom1173 = sin(bWAG);
atom1174 = cos(aWAG);
atom22460 = atom22456-atom0;
atom1194 = -atom1173*atom1174;
atom1175 = sin(aWAG);
atom22459 = atom22450*atom1496+atom1497*atom22449;
atom1023 = atom1018*atom1016;
atom2741 = -L_OBOG_OWHS*atom1019;
atom22452 = -atom2741+zFWHSR*atom1023;
atom1172 = cos(bWAG);
atom22453 = zFBOG+atom22452;
atom1195 = atom1172*atom1174;
atom22475 = atom22460*atom1194+atom22453*atom1195+atom1175*atom22459;
atom1176 = cos(cWAG);
atom684 = sin(aFWHSR);
atom1702 = -(0.5)*L_WHS;
atom3494 = -atom684*atom1702+zFWHSR;
atom683 = cos(aFWHSR);
atom3239 = atom683*atom1702;
atom3499 = -atom3494*atom1017-atom3239*atom1016;
atom3497 = atom3494*atom1021-atom3239*atom1019*atom1017-atom2733;
atom3509 = atom1497*atom3497+atom3499*atom1496;
atom3510 = atom3497*atom1496-atom0-atom1497*atom3499;
atom1022 = atom1018*atom1017;
atom3503 = -atom2741+zFBOG+atom3494*atom1023-atom3239*atom1022;
atom1512 = atom1194*atom1496+atom1497*atom1175;
atom3484 = uW_FRL-lW_FRL;
atom3490 = atom3484*(cW_FRL+(atom3484*aW_FRL+bW_FRL)*atom3484)+dW_FRL;
atom1530 = -atom1019*atom1195+atom1018*atom1512;
atom3491 = -sin(thetaW_FRL)*atom3490;
atom1533 = atom1018*atom1195+atom1019*atom1512;
atom1514 = atom1175*atom1496;
atom1515 = atom1514-atom1497*atom1194;
atom1551 = -atom1515*atom1017+atom1016*atom1533;
atom1548 = atom1533*atom1017+atom1515*atom1016;
atom1607 = atom683*atom1548+atom684*atom1551;
atom1610 = -atom684*atom1548+atom683*atom1551;
atom3493 = cos(thetaW_FRL)*atom3490;
atom22598 = -atom22475+atom1610*atom3493+atom1195*atom3503+atom3510*atom1194+atom1607*uW_FRL+atom1530*atom3491+atom1175*atom3509;
atom58407 = -atom22475*atom1176;
atom67123 = atom58407-atom1176*atom22598;
atom1177 = sin(cWAG);
atom58406 = atom22475*atom1177;
atom67128 = atom3696*atom67123+(atom22598*atom1177+atom58406)*atom3695;
atom1179 = atom1175*atom1177;
atom1185 = atom1176*atom1173;
atom1187 = atom1172*atom1179+atom1185;
atom1178 = -atom1177*atom1174;
atom1184 = atom1172*atom1176-atom1173*atom1179;
atom22465 = atom22453*atom1187+atom1178*atom22459+atom22460*atom1184;
atom1500 = atom1496*atom1184+atom1497*atom1178;
atom1521 = atom1019*atom1500+atom1018*atom1187;
atom1503 = atom1496*atom1178-atom1497*atom1184;
atom1539 = -atom1503*atom1017+atom1016*atom1521;
atom1536 = atom1521*atom1017+atom1503*atom1016;
atom1598 = atom683*atom1539-atom684*atom1536;
atom1595 = atom684*atom1539+atom683*atom1536;
atom1518 = atom1018*atom1500-atom1019*atom1187;
atom22596 = -atom22465+uW_FRL*atom1595+atom3509*atom1178+atom3510*atom1184+atom1187*atom3503+atom1598*atom3493+atom3491*atom1518;
atom58417 = -atom22475*atom1178+atom22465*atom1175;
atom67132 = -atom22598*atom1178+atom1175*atom22596+atom58417;
atom1181 = -atom1175*atom1176;
atom1191 = atom1177*atom1173;
atom1193 = atom1191+atom1172*atom1181;
atom1180 = atom1176*atom1174;
atom1190 = -atom1181*atom1173+atom1172*atom1177;
atom22470 = atom22460*atom1190+atom1180*atom22459+atom1193*atom22453;
atom1506 = atom1190*atom1496+atom1497*atom1180;
atom1527 = atom1019*atom1506+atom1193*atom1018;
atom1509 = atom1180*atom1496-atom1497*atom1190;
atom1542 = atom1016*atom1509+atom1527*atom1017;
atom1545 = atom1527*atom1016-atom1017*atom1509;
atom1604 = atom683*atom1545-atom684*atom1542;
atom1601 = atom683*atom1542+atom684*atom1545;
atom1524 = -atom1193*atom1019+atom1018*atom1506;
atom22597 = atom1604*atom3493+atom1193*atom3503+atom1180*atom3509+atom3510*atom1190+uW_FRL*atom1601+atom3491*atom1524-atom22470;
atom58414 = -atom1175*atom22470+atom1180*atom22475;
atom67139 = atom3696*atom67132+(atom58414+atom1180*atom22598-atom22597*atom1175)*atom3695;
atom67140 = atom22465+atom22596;
atom67144 = atom3696*atom67140-(atom22597+atom22470)*atom3695;
atom3814 = -atom1175*atom1172;
atom60833 = -atom3814*atom1177+atom1185;
atom44063 = atom1180*atom22456-atom1190*atom22459;
atom67148 = atom44063+atom1195*atom22596-atom22598*atom60833;
atom60839 = atom1191+atom1176*atom3814;
atom44188 = -atom1184*atom22459+atom22456*atom1178;
atom67155 = atom3696*atom67148-(atom22597*atom1195-atom44188-atom60839*atom22598)*atom3695;
atom9805 = atom1193*atom3696+atom1187*atom3695;
atom58423 = atom1018*atom22450;
atom58427 = -atom1018*atom22452-atom1019*atom22449;
atom58429 = -atom1019*atom22450;
atom58431 = atom58427*atom1496-atom1497*atom58429;
atom58435 = -atom1496*atom58429-atom1497*atom58427;
atom41956 = atom1018*atom1496;
atom40896 = -atom1019*atom1173;
atom64448 = atom40896+atom41956*atom1172;
atom40899 = atom1497*atom1018;
atom64442 = -atom1172*atom1019-atom41956*atom1173;
atom64445 = atom40899*atom1174-atom1175*atom64442;
atom64450 = atom1176*atom64448-atom64445*atom1177;
atom64453 = atom64442*atom1174+atom1175*atom40899;
atom58443 = atom1180*atom58431+atom58435*atom1190+atom1193*atom58423;
atom67158 = atom64453*atom22596-atom64450*atom22598;
atom67159 = atom58443+atom67158;
atom64461 = atom1176*atom64445+atom64448*atom1177;
atom58438 = atom58431*atom1178+atom58423*atom1187+atom58435*atom1184;
atom67163 = -atom22597*atom64453+atom22598*atom64461;
atom67166 = atom3695*(atom58438+atom67163)+atom3696*atom67159;
atom44126 = atom1497*atom22452;
atom44128 = atom1496*atom22452;
atom40804 = -atom1497*atom1172;
atom40806 = atom1497*atom1173;
atom64468 = atom1496*atom1174-atom1175*atom40806;
atom64471 = -atom1177*atom64468+atom1176*atom40804;
atom40875 = atom40806*atom1174+atom1514;
atom44131 = -atom1193*atom22449+atom1180*atom44126+atom44128*atom1190;
atom67170 = -atom22598*atom64471+atom40875*atom22596+atom44131;
atom64480 = atom1176*atom64468+atom1177*atom40804;
atom44216 = atom44128*atom1184-atom22449*atom1187+atom1178*atom44126;
atom67177 = (atom22598*atom64480-atom40875*atom22597+atom44216)*atom3695+atom3696*atom67170;
atom6041 = atom1497*atom1017+atom1021*atom1496;
atom6036 = -atom1496*atom1017;
atom6037 = atom1497*atom1021+atom6036;
atom6044 = atom1193*atom1023+atom1190*atom6041+atom1180*atom6037;
atom9814 = atom6044*atom3696+(atom1023*atom1187+atom6041*atom1184+atom6037*atom1178)*atom3695;
atom67180 = atom3695*atom67163+atom3696*atom67158;
atom43497 = -atom683*atom1017-atom684*atom1016;
atom66275 = -atom1018*atom43497;
atom66278 = -atom1019*atom43497;
atom43485 = -atom684*atom1017+atom683*atom1016;
atom66280 = atom66278*atom1496-atom1497*atom43485;
atom66282 = atom66275*atom1172-atom66280*atom1173;
atom66286 = atom43485*atom1496+atom1497*atom66278;
atom66288 = atom1175*atom66286+atom1174*atom66282;
atom66292 = -atom1175*atom66282+atom66286*atom1174;
atom66296 = atom66275*atom1173+atom1172*atom66280;
atom66298 = atom1176*atom66292+atom1177*atom66296;
atom66305 = -atom66292*atom1177+atom1176*atom66296;
atom67183 = -atom22598*atom66305+atom66288*atom22596;
atom67189 = atom3696*atom67183-(atom22597*atom66288-atom66298*atom22598)*atom3695;
atom67263 = -C11FRL*G_elastic*atom3696*aFRL*epsiFRL*bFRL;
atom3582 = uR_FRL-lR_FRL;
atom3583 = atom3582*aR_FRL;
atom3584 = atom3583+bR_FRL;
atom3653 = cR_FRL+atom3582*(atom3584+atom3583)+atom3584*atom3582;
atom3699 = (1+atom3653^2)^(-1/2);
atom67264 = -atom3699*G_elastic*C22FRL*aFRL*epsiFRL*bFRL;
atom3700 = atom3699*atom3653;
atom58410 = atom1176*atom22470-atom22465*atom1177;
atom67196 = atom3699*atom67123+(atom22597*atom1176+atom58410-atom1177*atom22596)*atom3700;
atom3654 = atom3650*atom3653;
atom3655 = -atom3648*atom3653;
atom3688 = (atom3655^2+atom3654^2+atom3686)^(-1/2);
atom3689 = atom3654*atom3688;
atom3690 = atom3688*atom3655;
atom67266 = sqrt(aFRL*bFRL);
atom67237 = atom1176*atom3689+atom3690*atom1177;
atom67267 = -atom3699*G_elastic*aFRL*atom67266*epsiFRL*C23FRL*bFRL;
atom58420 = atom22470*atom1178-atom22465*atom1180;
atom67203 = -(atom1180*atom22596-atom22597*atom1178-atom58420)*atom3700+atom3699*atom67132;
atom3691 = atom3688*atom3648;
atom67242 = atom3689*atom1178+atom1180*atom3690+atom1175*atom3691;
atom67204 = atom3699*atom67140;
atom67246 = atom3690*atom60839+atom3689*atom60833+atom1195*atom3691;
atom44067 = atom1175*atom22456-atom1194*atom22459;
atom67211 = atom3699*atom67148+(atom22597*atom60833-atom60839*atom22596+atom44067)*atom3700;
atom9854 = atom3699*atom1193+atom1195*atom3700;
atom67215 = atom22597*atom64450-atom22596*atom64461;
atom58448 = atom58423*atom1195+atom58435*atom1194+atom1175*atom58431;
atom67218 = atom3700*(atom67215+atom58448)+atom3699*atom67159;
atom67251 = atom3690*atom64461+atom64453*atom3691+atom64450*atom3689;
atom67375 = atom67267*atom67251;
atom67256 = atom40875*atom3691+atom64471*atom3689+atom3690*atom64480;
atom44137 = atom1175*atom44126+atom44128*atom1194-atom22449*atom1195;
atom67225 = atom3700*(atom44137+atom22597*atom64471-atom64480*atom22596)+atom3699*atom67170;
atom9863 = atom3699*atom6044+atom3700*(atom1175*atom6037+atom1194*atom6041+atom1023*atom1195);
atom67228 = atom3699*atom67158+atom67215*atom3700;
atom67234 = -(atom66298*atom22596-atom22597*atom66305)*atom3700+atom3699*atom67183;
atom67261 = atom66305*atom3689+atom66298*atom3690+atom66288*atom3691;
atom67268 = -G_elastic*C22FRL*aFRL*epsiFRL*atom3700*bFRL;
atom67269 = -G_elastic*aFRL*atom67266*epsiFRL*atom3700*C23FRL*bFRL;
atom67410 = atom67251*atom67269;
atom40803 = atom1172*atom1496;
atom40902 = atom1019*atom40803+atom1018*atom1173;
atom41903 = -atom1017*atom40804+atom40902*atom1016;
atom41900 = atom40902*atom1017+atom1016*atom40804;
atom43488 = atom683*atom41903-atom41900*atom684;
atom40898 = atom1018*atom40803+atom40896;
atom43476 = atom684*atom41903+atom683*atom41900;
atom60330 = atom40898*atom1524+atom1604*atom43488+atom43476*atom1601;
atom60325 = atom1610*atom43488+atom1530*atom40898+atom1607*atom43476;
atom60337 = atom40898*atom1518+atom43476*atom1595+atom1598*atom43488;
atom60573 = atom58407-atom22598*atom60337+atom60325*atom22596;
atom67270 = -C11FRL*G_elastic*aFRL*epsiFRL*((atom60330*atom22598+atom58406-atom22597*atom60325)*atom3695+atom60573*atom3696)*bFRL;
atom67046 = (atom58410-atom60330*atom22596+atom22597*atom60337)*atom3700+atom3699*atom60573;
atom67051 = atom1598*atom3689+atom3690*atom1604+atom1610*atom3691;
atom67058 = atom3689*atom1518+atom3690*atom1524+atom1530*atom3691;
atom22589 = atom3689*atom1595+atom1607*atom3691+atom3690*atom1601;
atom67061 = atom40898*atom67058+atom43476*atom22589+atom43488*atom67051;
atom67273 = -atom67046*G_elastic*C22FRL*aFRL*epsiFRL*bFRL+atom67061*G_elastic*aFRL*atom67266*epsiFRL*C23FRL*bFRL;
atom67276 = bFRL^2;
atom67275 = aFRL^2;
atom67278 = -atom67046*G_elastic*aFRL*atom67266*epsiFRL*C23FRL*bFRL-atom67276*C33FRL*atom67061*G_elastic*atom67275*epsiFRL;
atom67452 = atom67278*atom67251;
atom40903 = atom1497*atom1019;
atom41907 = atom1016*atom40903+atom6036;
atom41905 = atom40903*atom1017+atom1016*atom1496;
atom43491 = -atom684*atom41905+atom683*atom41907;
atom43479 = atom684*atom41907+atom683*atom41905;
atom60371 = atom40899*atom1518+atom1598*atom43491+atom1595*atom43479;
atom60359 = atom1607*atom43479+atom1610*atom43491+atom1530*atom40899;
atom60595 = atom58417-atom22598*atom60371+atom60359*atom22596;
atom60364 = atom1524*atom40899+atom1604*atom43491+atom1601*atom43479;
atom67279 = -(atom3696*atom60595+(atom58414-atom22597*atom60359+atom60364*atom22598)*atom3695)*C11FRL*G_elastic*aFRL*epsiFRL*bFRL;
atom67072 = atom43491*atom67051+atom22589*atom43479+atom67058*atom40899;
atom67067 = atom3699*atom60595+(atom22597*atom60371+atom58420-atom60364*atom22596)*atom3700;
atom67282 = atom67072*G_elastic*aFRL*atom67266*epsiFRL*C23FRL*bFRL-atom67067*G_elastic*C22FRL*aFRL*epsiFRL*bFRL;
atom67285 = -atom67276*C33FRL*atom67072*G_elastic*atom67275*epsiFRL-atom67067*G_elastic*aFRL*atom67266*epsiFRL*C23FRL*bFRL;
atom67502 = atom67285*atom67251;
atom60392 = atom1607^2+atom1530^2+atom1610^2;
atom60402 = atom1607*atom1595+atom1598*atom1610+atom1530*atom1518;
atom60617 = atom22465+atom60392*atom22596-atom60402*atom22598;
atom60396 = atom1530*atom1524+atom1610*atom1604+atom1607*atom1601;
atom67286 = -C11FRL*G_elastic*(atom60617*atom3696+(atom60396*atom22598-atom22597*atom60392-atom22470)*atom3695)*aFRL*epsiFRL*bFRL;
atom67078 = atom60617*atom3699+(atom22597*atom60402-atom60396*atom22596)*atom3700;
atom67083 = atom1607*atom22589+atom1610*atom67051+atom1530*atom67058;
atom67289 = atom67083*G_elastic*aFRL*atom67266*epsiFRL*C23FRL*bFRL-atom67078*G_elastic*C22FRL*aFRL*epsiFRL*bFRL;
atom67292 = -atom67078*G_elastic*aFRL*atom67266*epsiFRL*C23FRL*bFRL-atom67276*atom67083*C33FRL*G_elastic*atom67275*epsiFRL;
atom67552 = atom67292*atom67251;
atom43494 = atom683*atom1023-atom684*atom1022;
atom43482 = atom683*atom1022+atom684*atom1023;
atom60422 = atom1607*atom43482-atom1530*atom1019+atom1610*atom43494;
atom60432 = atom1598*atom43494+atom43482*atom1595-atom1019*atom1518;
atom60638 = atom44063-atom60432*atom22598+atom60422*atom22596;
atom60426 = atom43494*atom1604-atom1019*atom1524+atom43482*atom1601;
atom67293 = C11FRL*G_elastic*((atom22597*atom60422-atom60426*atom22598-atom44188)*atom3695-atom60638*atom3696)*aFRL*epsiFRL*bFRL;
atom67089 = -(atom60426*atom22596-atom22597*atom60432-atom44067)*atom3700+atom3699*atom60638;
atom67094 = -atom1019*atom67058+atom43494*atom67051+atom43482*atom22589;
atom67296 = -G_elastic*atom67089*C22FRL*aFRL*epsiFRL*bFRL+atom67094*G_elastic*aFRL*atom67266*epsiFRL*C23FRL*bFRL;
atom67299 = -atom67276*atom67094*C33FRL*G_elastic*atom67275*epsiFRL-G_elastic*atom67089*aFRL*atom67266*epsiFRL*C23FRL*bFRL;
atom67602 = atom67299*atom67251;
atom67300 = -atom9805*C11FRL*G_elastic*aFRL*epsiFRL*bFRL;
atom67301 = -atom9854*G_elastic*C22FRL*aFRL*epsiFRL*bFRL;
atom67302 = -atom9854*G_elastic*aFRL*atom67266*epsiFRL*C23FRL*bFRL;
atom67652 = atom67302*atom67251;
atom60655 = -atom22597*atom1530+atom22598*atom1524;
atom60659 = -atom22598*atom1518+atom1530*atom22596;
atom60660 = atom58443+atom60659;
atom67303 = -C11FRL*G_elastic*((atom58438+atom60655)*atom3695+atom60660*atom3696)*aFRL*epsiFRL*bFRL;
atom60663 = atom22597*atom1518-atom1524*atom22596;
atom67100 = (atom58448+atom60663)*atom3700+atom3699*atom60660;
atom67305 = G_elastic*atom67058*aFRL*atom67266*epsiFRL*C23FRL*bFRL;
atom67306 = atom67305-G_elastic*C22FRL*aFRL*atom67100*epsiFRL*bFRL;
atom67308 = -atom67276*C33FRL*G_elastic*atom67058*atom67275*epsiFRL;
atom67309 = -G_elastic*aFRL*atom67100*atom67266*epsiFRL*C23FRL*bFRL+atom67308;
atom67702 = atom67309*atom67251;
atom60473 = atom1607*atom43485+atom1610*atom43497;
atom60477 = atom1601*atom43485+atom1604*atom43497;
atom60483 = atom1598*atom43497+atom43485*atom1595;
atom60680 = -atom22598*atom60483+atom44131+atom60473*atom22596;
atom67310 = ((atom22597*atom60473-atom44216-atom22598*atom60477)*atom3695-atom60680*atom3696)*C11FRL*G_elastic*aFRL*epsiFRL*bFRL;
atom67106 = atom3700*(atom22597*atom60483-atom60477*atom22596+atom44137)+atom3699*atom60680;
atom67109 = atom22589*atom43485+atom43497*atom67051;
atom67313 = -G_elastic*C22FRL*aFRL*epsiFRL*atom67106*bFRL+atom67109*G_elastic*aFRL*atom67266*epsiFRL*C23FRL*bFRL;
atom67316 = -G_elastic*aFRL*atom67266*epsiFRL*atom67106*C23FRL*bFRL-atom67276*C33FRL*atom67109*G_elastic*atom67275*epsiFRL;
atom67752 = atom67316*atom67251;
atom67317 = -atom9814*C11FRL*G_elastic*aFRL*epsiFRL*bFRL;
atom67318 = -G_elastic*atom9863*C22FRL*aFRL*epsiFRL*bFRL;
atom67319 = -G_elastic*atom9863*aFRL*atom67266*epsiFRL*C23FRL*bFRL;
atom67802 = atom67319*atom67251;
atom67320 = -C11FRL*G_elastic*aFRL*epsiFRL*(atom3696*atom60659+atom60655*atom3695)*bFRL;
atom67115 = atom3700*atom60663+atom3699*atom60659;
atom67322 = atom67305-G_elastic*C22FRL*aFRL*epsiFRL*atom67115*bFRL;
atom67324 = atom67308-G_elastic*aFRL*atom67266*epsiFRL*atom67115*C23FRL*bFRL;
atom67852 = atom67324*atom67251;
atom60705 = atom1607*atom22596-atom22598*atom1595;
atom67325 = -C11FRL*G_elastic*(atom60705*atom3696+(atom22598*atom1601-atom1607*atom22597)*atom3695)*aFRL*epsiFRL*bFRL;
atom67121 = (atom22597*atom1595-atom1601*atom22596)*atom3700+atom3699*atom60705;
atom67328 = -G_elastic*C22FRL*aFRL*epsiFRL*atom67121*bFRL+G_elastic*aFRL*atom67266*epsiFRL*atom22589*C23FRL*bFRL;
atom67331 = -G_elastic*aFRL*atom67266*epsiFRL*atom67121*C23FRL*bFRL-atom67276*C33FRL*G_elastic*atom67275*epsiFRL*atom22589;
atom67902 = atom67331*atom67251;

CKFRL_ = [atom67262*atom3695 , atom67262*atom3696 , 0 , atom67262*atom67128 , atom67262*atom67139 , atom67262*atom67144 , 0 , atom67155*atom67262 , 0 , 0 , 0 , atom67262*atom9805 , atom67262*atom67166 , atom67262*atom67177 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom67262*atom9814 , atom67262*atom67180 , atom67262*atom67189 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3695*atom67263 , atom67264*atom3699+atom3696*atom67263 , atom67264*atom3700 , atom67264*atom67196+atom67128*atom67263+atom67237*atom67267 , atom67203*atom67264+atom67139*atom67263+atom67267*atom67242 , atom67144*atom67263+atom67264*atom67204+atom67267*atom3691 , 0 , atom67246*atom67267+atom67155*atom67263+atom67264*atom67211 , 0 , 0 , 0 , atom67264*atom9854+atom9805*atom67263 , atom67264*atom67218+atom67375+atom67263*atom67166 , atom67267*atom67256+atom67264*atom67225+atom67177*atom67263 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom67264*atom9863+atom9814*atom67263 , atom67264*atom67228+atom67180*atom67263+atom67375 , atom67267*atom67261+atom67264*atom67234+atom67189*atom67263 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , atom3699*atom67268 , atom3700*atom67268 , atom67196*atom67268+atom67237*atom67269 , atom67203*atom67268+atom67269*atom67242 , atom67204*atom67268+atom3691*atom67269 , 0 , atom67246*atom67269+atom67211*atom67268 , 0 , 0 , 0 , atom9854*atom67268 , atom67218*atom67268+atom67410 , atom67256*atom67269+atom67225*atom67268 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom9863*atom67268 , atom67228*atom67268+atom67410 , atom67261*atom67269+atom67234*atom67268 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom67270*atom3695 , atom67270*atom3696+atom3699*atom67273 , atom67273*atom3700 , atom67273*atom67196+atom67270*atom67128+atom67237*atom67278 , atom67278*atom67242+atom67203*atom67273+atom67270*atom67139 , atom67278*atom3691+atom67204*atom67273+atom67270*atom67144 , 0 , atom67278*atom67246+atom67211*atom67273+atom67155*atom67270 , 0 , 0 , 0 , atom9854*atom67273+atom67270*atom9805 , atom67270*atom67166+atom67218*atom67273+atom67452 , atom67270*atom67177+atom67278*atom67256+atom67225*atom67273 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom9863*atom67273+atom67270*atom9814 , atom67228*atom67273+atom67452+atom67270*atom67180 , atom67278*atom67261+atom67270*atom67189+atom67273*atom67234 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom67279*atom3695 , atom3699*atom67282+atom3696*atom67279 , atom67282*atom3700 , atom67282*atom67196+atom67285*atom67237+atom67128*atom67279 , atom67203*atom67282+atom67139*atom67279+atom67285*atom67242 , atom67144*atom67279+atom67282*atom67204+atom67285*atom3691 , 0 , atom67155*atom67279+atom67285*atom67246+atom67211*atom67282 , 0 , 0 , 0 , atom9854*atom67282+atom9805*atom67279 , atom67282*atom67218+atom67502+atom67279*atom67166 , atom67279*atom67177+atom67285*atom67256+atom67225*atom67282 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom67282*atom9863+atom9814*atom67279 , atom67502+atom67180*atom67279+atom67282*atom67228 , atom67285*atom67261+atom67189*atom67279+atom67282*atom67234 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom67286*atom3695 , atom3696*atom67286+atom3699*atom67289 , atom67289*atom3700 , atom67128*atom67286+atom67292*atom67237+atom67289*atom67196 , atom67139*atom67286+atom67292*atom67242+atom67203*atom67289 , atom67289*atom67204+atom67292*atom3691+atom67144*atom67286 , 0 , atom67289*atom67211+atom67155*atom67286+atom67292*atom67246 , 0 , 0 , 0 , atom9805*atom67286+atom67289*atom9854 , atom67552+atom67286*atom67166+atom67289*atom67218 , atom67292*atom67256+atom67225*atom67289+atom67286*atom67177 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom9814*atom67286+atom67289*atom9863 , atom67552+atom67180*atom67286+atom67289*atom67228 , atom67289*atom67234+atom67292*atom67261+atom67189*atom67286 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom67293*atom3695 , atom3696*atom67293+atom67296*atom3699 , atom67296*atom3700 , atom67296*atom67196+atom67128*atom67293+atom67299*atom67237 , atom67139*atom67293+atom67299*atom67242+atom67203*atom67296 , atom67299*atom3691+atom67296*atom67204+atom67144*atom67293 , 0 , atom67299*atom67246+atom67155*atom67293+atom67296*atom67211 , 0 , 0 , 0 , atom67296*atom9854+atom9805*atom67293 , atom67296*atom67218+atom67293*atom67166+atom67602 , atom67293*atom67177+atom67299*atom67256+atom67296*atom67225 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom67296*atom9863+atom9814*atom67293 , atom67296*atom67228+atom67180*atom67293+atom67602 , atom67189*atom67293+atom67296*atom67234+atom67299*atom67261 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom67300*atom3695 , atom67300*atom3696+atom3699*atom67301 , atom67301*atom3700 , atom67237*atom67302+atom67128*atom67300+atom67301*atom67196 , atom67302*atom67242+atom67203*atom67301+atom67139*atom67300 , atom67301*atom67204+atom67144*atom67300+atom67302*atom3691 , 0 , atom67155*atom67300+atom67211*atom67301+atom67246*atom67302 , 0 , 0 , 0 , atom9805*atom67300+atom9854*atom67301 , atom67300*atom67166+atom67652+atom67218*atom67301 , atom67225*atom67301+atom67300*atom67177+atom67302*atom67256 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom9814*atom67300+atom9863*atom67301 , atom67652+atom67301*atom67228+atom67300*atom67180 , atom67301*atom67234+atom67261*atom67302+atom67189*atom67300 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3695*atom67303 , atom3699*atom67306+atom3696*atom67303 , atom67306*atom3700 , atom67237*atom67309+atom67128*atom67303+atom67306*atom67196 , atom67203*atom67306+atom67309*atom67242+atom67139*atom67303 , atom67144*atom67303+atom67306*atom67204+atom67309*atom3691 , 0 , atom67155*atom67303+atom67246*atom67309+atom67211*atom67306 , 0 , 0 , 0 , atom9805*atom67303+atom9854*atom67306 , atom67702+atom67303*atom67166+atom67218*atom67306 , atom67225*atom67306+atom67256*atom67309+atom67177*atom67303 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom9814*atom67303+atom9863*atom67306 , atom67702+atom67180*atom67303+atom67306*atom67228 , atom67306*atom67234+atom67261*atom67309+atom67189*atom67303 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom67310*atom3695 , atom3699*atom67313+atom67310*atom3696 , atom67313*atom3700 , atom67313*atom67196+atom67237*atom67316+atom67128*atom67310 , atom67203*atom67313+atom67316*atom67242+atom67139*atom67310 , atom67316*atom3691+atom67204*atom67313+atom67144*atom67310 , 0 , atom67155*atom67310+atom67246*atom67316+atom67211*atom67313 , 0 , 0 , 0 , atom9854*atom67313+atom9805*atom67310 , atom67752+atom67310*atom67166+atom67218*atom67313 , atom67225*atom67313+atom67310*atom67177+atom67256*atom67316 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom9814*atom67310+atom9863*atom67313 , atom67752+atom67310*atom67180+atom67228*atom67313 , atom67234*atom67313+atom67189*atom67310+atom67261*atom67316 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom67317*atom3695 , atom3699*atom67318+atom67317*atom3696 , atom67318*atom3700 , atom67317*atom67128+atom67237*atom67319+atom67318*atom67196 , atom67319*atom67242+atom67317*atom67139+atom67203*atom67318 , atom67318*atom67204+atom67319*atom3691+atom67144*atom67317 , 0 , atom67211*atom67318+atom67155*atom67317+atom67246*atom67319 , 0 , 0 , 0 , atom9854*atom67318+atom9805*atom67317 , atom67802+atom67218*atom67318+atom67317*atom67166 , atom67225*atom67318+atom67319*atom67256+atom67317*atom67177 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom67317*atom9814+atom9863*atom67318 , atom67317*atom67180+atom67802+atom67318*atom67228 , atom67189*atom67317+atom67318*atom67234+atom67261*atom67319 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3695*atom67320 , atom3699*atom67322+atom3696*atom67320 , atom3700*atom67322 , atom67196*atom67322+atom67128*atom67320+atom67237*atom67324 , atom67324*atom67242+atom67203*atom67322+atom67139*atom67320 , atom67324*atom3691+atom67144*atom67320+atom67204*atom67322 , 0 , atom67246*atom67324+atom67155*atom67320+atom67211*atom67322 , 0 , 0 , 0 , atom9805*atom67320+atom9854*atom67322 , atom67320*atom67166+atom67852+atom67218*atom67322 , atom67225*atom67322+atom67256*atom67324+atom67177*atom67320 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom9814*atom67320+atom9863*atom67322 , atom67180*atom67320+atom67228*atom67322+atom67852 , atom67234*atom67322+atom67261*atom67324+atom67189*atom67320 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom67325*atom3695 , atom3696*atom67325+atom3699*atom67328 , atom3700*atom67328 , atom67237*atom67331+atom67128*atom67325+atom67196*atom67328 , atom67139*atom67325+atom67203*atom67328+atom67331*atom67242 , atom67204*atom67328+atom67331*atom3691+atom67144*atom67325 , 0 , atom67246*atom67331+atom67155*atom67325+atom67211*atom67328 , 0 , 0 , 0 , atom9854*atom67328+atom9805*atom67325 , atom67325*atom67166+atom67902+atom67218*atom67328 , atom67225*atom67328+atom67325*atom67177+atom67256*atom67331 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom9814*atom67325+atom9863*atom67328 , atom67902+atom67180*atom67325+atom67228*atom67328 , atom67234*atom67328+atom67189*atom67325+atom67261*atom67331 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0];

%endfunction
