function CKRFR_ = CKRFR(q,qaux,dq,time,param)

xWAG = q( 1 ); 
yWAG = q( 2 ); 
zWAG = q( 3 ); 
aWAG = q( 4 ); 
bWAG = q( 5 ); 
cWAG = q( 6 ); 
cRSLD = q( 7 ); 
cFSLD = q( 8 ); 
zRBOG = q( 9 ); 
aRBOG = q( 10 ); 
bRBOG = q( 11 ); 
zFBOG = q( 12 ); 
aFBOG = q( 13 ); 
bFBOG = q( 14 ); 
zRWHSF = q( 15 ); 
aRWHSF = q( 16 ); 
bRWHSF = q( 17 ); 
zRWHSR = q( 18 ); 
aRWHSR = q( 19 ); 
bRWHSR = q( 20 ); 
zFWHSF = q( 21 ); 
aFWHSF = q( 22 ); 
bFWHSF = q( 23 ); 
zFWHSR = q( 24 ); 
aFWHSR = q( 25 ); 
bFWHSR = q( 26 ); 
bRAXBFL = q( 27 ); 
bRAXBFR = q( 28 ); 
bRAXBRL = q( 29 ); 
bRAXBRR = q( 30 ); 
bFAXBFL = q( 31 ); 
bFAXBFR = q( 32 ); 
bFAXBRL = q( 33 ); 
bFAXBRR = q( 34 ); 
xRMOTF = q( 35 ); 
yRMOTF = q( 36 ); 
zRMOTF = q( 37 ); 
bRMOTF = q( 38 ); 
xRMOTR = q( 39 ); 
yRMOTR = q( 40 ); 
zRMOTR = q( 41 ); 
bRMOTR = q( 42 ); 
bRROTF = q( 43 ); 
bRROTR = q( 44 ); 

thetaW_RFR = qaux( 1 ); 
uW_RFR = qaux( 2 ); 
uR_RFR = qaux( 3 ); 
xR_RFR = qaux( 4 ); 
thetaW_RFL = qaux( 5 ); 
uW_RFL = qaux( 6 ); 
uR_RFL = qaux( 7 ); 
xR_RFL = qaux( 8 ); 
thetaW_RRR = qaux( 9 ); 
uW_RRR = qaux( 10 ); 
uR_RRR = qaux( 11 ); 
xR_RRR = qaux( 12 ); 
thetaW_RRL = qaux( 13 ); 
uW_RRL = qaux( 14 ); 
uR_RRL = qaux( 15 ); 
xR_RRL = qaux( 16 ); 
thetaW_FFR = qaux( 17 ); 
uW_FFR = qaux( 18 ); 
uR_FFR = qaux( 19 ); 
xR_FFR = qaux( 20 ); 
thetaW_FFL = qaux( 21 ); 
uW_FFL = qaux( 22 ); 
uR_FFL = qaux( 23 ); 
xR_FFL = qaux( 24 ); 
thetaW_FRR = qaux( 25 ); 
uW_FRR = qaux( 26 ); 
uR_FRR = qaux( 27 ); 
xR_FRR = qaux( 28 ); 
thetaW_FRL = qaux( 29 ); 
uW_FRL = qaux( 30 ); 
uR_FRL = qaux( 31 ); 
xR_FRL = qaux( 32 ); 

dxWAG = dq( 1 ); 
dyWAG = dq( 2 ); 
dzWAG = dq( 3 ); 
daWAG = dq( 4 ); 
dbWAG = dq( 5 ); 
dcWAG = dq( 6 ); 
dcRSLD = dq( 7 ); 
dcFSLD = dq( 8 ); 
dzRBOG = dq( 9 ); 
daRBOG = dq( 10 ); 
dbRBOG = dq( 11 ); 
dzFBOG = dq( 12 ); 
daFBOG = dq( 13 ); 
dbFBOG = dq( 14 ); 
dzRWHSF = dq( 15 ); 
daRWHSF = dq( 16 ); 
dbRWHSF = dq( 17 ); 
dzRWHSR = dq( 18 ); 
daRWHSR = dq( 19 ); 
dbRWHSR = dq( 20 ); 
dzFWHSF = dq( 21 ); 
daFWHSF = dq( 22 ); 
dbFWHSF = dq( 23 ); 
dzFWHSR = dq( 24 ); 
daFWHSR = dq( 25 ); 
dbFWHSR = dq( 26 ); 
dbRAXBFL = dq( 27 ); 
dbRAXBFR = dq( 28 ); 
dbRAXBRL = dq( 29 ); 
dbRAXBRR = dq( 30 ); 
dbFAXBFL = dq( 31 ); 
dbFAXBFR = dq( 32 ); 
dbFAXBRL = dq( 33 ); 
dbFAXBRR = dq( 34 ); 
dxRMOTF = dq( 35 ); 
dyRMOTF = dq( 36 ); 
dzRMOTF = dq( 37 ); 
dbRMOTF = dq( 38 ); 
dxRMOTR = dq( 39 ); 
dyRMOTR = dq( 40 ); 
dzRMOTR = dq( 41 ); 
dbRMOTR = dq( 42 ); 
dbRROTF = dq( 43 ); 
dbRROTR = dq( 44 ); 

t= time ;

g = param( 1 ); 
L_OBOG_OAXBy = param( 2 ); 
L_OBOG_OAXBz = param( 3 ); 
L_OBOG_OSUSPy = param( 4 ); 
L_OBOG_OSUSPx = param( 5 ); 
L_OBOG_OSUSPz = param( 6 ); 
L_OBOG_OWHS = param( 7 ); 
L_OBOG_P1BOG = param( 8 ); 
L_MOT = param( 9 ); 
L_GEAR = param( 10 ); 
L_AXB1 = param( 11 ); 
L_AXB2 = param( 12 ); 
L_SUSP = param( 13 ); 
L_WHS = param( 14 ); 
L_RAIL = param( 15 ); 
L_WAG = param( 16 ); 
L_SUSPBEAM1 = param( 17 ); 
L_SUSPBEAM2 = param( 18 ); 
L_SLDx = param( 19 ); 
L_SLDy = param( 20 ); 
b_pend = param( 21 ); 
a_pend = param( 22 ); 
L0_1 = param( 23 ); 
L0_2 = param( 24 ); 
m_WAG = param( 25 ); 
I_WAGx = param( 26 ); 
I_WAGy = param( 27 ); 
I_WAGz = param( 28 ); 
xCGWAG = param( 29 ); 
yCGWAG = param( 30 ); 
zCGWAG = param( 31 ); 
G_BOGz = param( 32 ); 
m_BOG = param( 33 ); 
I_BOGx = param( 34 ); 
I_BOGy = param( 35 ); 
I_BOGz = param( 36 ); 
m_MOT = param( 37 ); 
I_MOTx = param( 38 ); 
I_MOTy = param( 39 ); 
I_MOTz = param( 40 ); 
m_ROT = param( 41 ); 
I_ROTx = param( 42 ); 
I_ROTy = param( 43 ); 
I_ROTz = param( 44 ); 
m_WHS = param( 45 ); 
I_WHSx = param( 46 ); 
I_WHSy = param( 47 ); 
I_WHSz = param( 48 ); 
I_CORy = param( 49 ); 
m_AXB = param( 50 ); 
I_AXBx = param( 51 ); 
I_AXBy = param( 52 ); 
I_AXBz = param( 53 ); 
m_SLD = param( 54 ); 
I_SLDx = param( 55 ); 
I_SLDy = param( 56 ); 
I_SLDz = param( 57 ); 
K_SSl = param( 58 ); 
C_SSl = param( 59 ); 
C_SSr = param( 60 ); 
K_SSr = param( 61 ); 
Kgear = param( 62 ); 
Cgear = param( 63 ); 
alpha_gear = param( 64 ); 
zROT = param( 65 ); 
zWHS = param( 66 ); 
K_S1 = param( 67 ); 
C_S1 = param( 68 ); 
K_S2 = param( 69 ); 
C_S2 = param( 70 ); 
aW_RFR = param( 71 ); 
bW_RFR = param( 72 ); 
cW_RFR = param( 73 ); 
dW_RFR = param( 74 ); 
lW_RFR = param( 75 ); 
aR_RFR = param( 76 ); 
bR_RFR = param( 77 ); 
cR_RFR = param( 78 ); 
dR_RFR = param( 79 ); 
lR_RFR = param( 80 ); 
RFRas = param( 81 ); 
RFRbs = param( 82 ); 
RFRcs = param( 83 ); 
RFRds = param( 84 ); 
RFRes = param( 85 ); 
RFRfs = param( 86 ); 
RFRstas = param( 87 ); 
RFRends = param( 88 ); 
irrRFRz = param( 89 ); 
aW_RFL = param( 90 ); 
bW_RFL = param( 91 ); 
cW_RFL = param( 92 ); 
dW_RFL = param( 93 ); 
lW_RFL = param( 94 ); 
aR_RFL = param( 95 ); 
bR_RFL = param( 96 ); 
cR_RFL = param( 97 ); 
dR_RFL = param( 98 ); 
lR_RFL = param( 99 ); 
RFLas = param( 100 ); 
RFLbs = param( 101 ); 
RFLcs = param( 102 ); 
RFLds = param( 103 ); 
RFLes = param( 104 ); 
RFLfs = param( 105 ); 
RFLstas = param( 106 ); 
RFLends = param( 107 ); 
irrRFLz = param( 108 ); 
aW_RRR = param( 109 ); 
bW_RRR = param( 110 ); 
cW_RRR = param( 111 ); 
dW_RRR = param( 112 ); 
lW_RRR = param( 113 ); 
aR_RRR = param( 114 ); 
bR_RRR = param( 115 ); 
cR_RRR = param( 116 ); 
dR_RRR = param( 117 ); 
lR_RRR = param( 118 ); 
RRRas = param( 119 ); 
RRRbs = param( 120 ); 
RRRcs = param( 121 ); 
RRRds = param( 122 ); 
RRRes = param( 123 ); 
RRRfs = param( 124 ); 
RRRstas = param( 125 ); 
RRRends = param( 126 ); 
irrRRRz = param( 127 ); 
aW_RRL = param( 128 ); 
bW_RRL = param( 129 ); 
cW_RRL = param( 130 ); 
dW_RRL = param( 131 ); 
lW_RRL = param( 132 ); 
aR_RRL = param( 133 ); 
bR_RRL = param( 134 ); 
cR_RRL = param( 135 ); 
dR_RRL = param( 136 ); 
lR_RRL = param( 137 ); 
RRLas = param( 138 ); 
RRLbs = param( 139 ); 
RRLcs = param( 140 ); 
RRLds = param( 141 ); 
RRLes = param( 142 ); 
RRLfs = param( 143 ); 
RRLstas = param( 144 ); 
RRLends = param( 145 ); 
irrRRLz = param( 146 ); 
aW_FFR = param( 147 ); 
bW_FFR = param( 148 ); 
cW_FFR = param( 149 ); 
dW_FFR = param( 150 ); 
lW_FFR = param( 151 ); 
aR_FFR = param( 152 ); 
bR_FFR = param( 153 ); 
cR_FFR = param( 154 ); 
dR_FFR = param( 155 ); 
lR_FFR = param( 156 ); 
FFRas = param( 157 ); 
FFRbs = param( 158 ); 
FFRcs = param( 159 ); 
FFRds = param( 160 ); 
FFRes = param( 161 ); 
FFRfs = param( 162 ); 
FFRstas = param( 163 ); 
FFRends = param( 164 ); 
irrFFRz = param( 165 ); 
aW_FFL = param( 166 ); 
bW_FFL = param( 167 ); 
cW_FFL = param( 168 ); 
dW_FFL = param( 169 ); 
lW_FFL = param( 170 ); 
aR_FFL = param( 171 ); 
bR_FFL = param( 172 ); 
cR_FFL = param( 173 ); 
dR_FFL = param( 174 ); 
lR_FFL = param( 175 ); 
FFLas = param( 176 ); 
FFLbs = param( 177 ); 
FFLcs = param( 178 ); 
FFLds = param( 179 ); 
FFLes = param( 180 ); 
FFLfs = param( 181 ); 
FFLstas = param( 182 ); 
FFLends = param( 183 ); 
irrFFLz = param( 184 ); 
aW_FRR = param( 185 ); 
bW_FRR = param( 186 ); 
cW_FRR = param( 187 ); 
dW_FRR = param( 188 ); 
lW_FRR = param( 189 ); 
aR_FRR = param( 190 ); 
bR_FRR = param( 191 ); 
cR_FRR = param( 192 ); 
dR_FRR = param( 193 ); 
lR_FRR = param( 194 ); 
FRRas = param( 195 ); 
FRRbs = param( 196 ); 
FRRcs = param( 197 ); 
FRRds = param( 198 ); 
FRRes = param( 199 ); 
FRRfs = param( 200 ); 
FRRstas = param( 201 ); 
FRRends = param( 202 ); 
irrFRRz = param( 203 ); 
aW_FRL = param( 204 ); 
bW_FRL = param( 205 ); 
cW_FRL = param( 206 ); 
dW_FRL = param( 207 ); 
lW_FRL = param( 208 ); 
aR_FRL = param( 209 ); 
bR_FRL = param( 210 ); 
cR_FRL = param( 211 ); 
dR_FRL = param( 212 ); 
lR_FRL = param( 213 ); 
FRLas = param( 214 ); 
FRLbs = param( 215 ); 
FRLcs = param( 216 ); 
FRLds = param( 217 ); 
FRLes = param( 218 ); 
FRLfs = param( 219 ); 
FRLstas = param( 220 ); 
FRLends = param( 221 ); 
irrFRLz = param( 222 ); 
E_elastic = param( 223 ); 
nu_poisson = param( 224 ); 
G_elastic = param( 225 ); 
aRFR = param( 226 ); 
bRFR = param( 227 ); 
C11RFR = param( 228 ); 
C22RFR = param( 229 ); 
C23RFR = param( 230 ); 
C33RFR = param( 231 ); 
aRFL = param( 232 ); 
bRFL = param( 233 ); 
C11RFL = param( 234 ); 
C22RFL = param( 235 ); 
C23RFL = param( 236 ); 
C33RFL = param( 237 ); 
aRRR = param( 238 ); 
bRRR = param( 239 ); 
C11RRR = param( 240 ); 
C22RRR = param( 241 ); 
C23RRR = param( 242 ); 
C33RRR = param( 243 ); 
aRRL = param( 244 ); 
bRRL = param( 245 ); 
C11RRL = param( 246 ); 
C22RRL = param( 247 ); 
C23RRL = param( 248 ); 
C33RRL = param( 249 ); 
aFFR = param( 250 ); 
bFFR = param( 251 ); 
C11FFR = param( 252 ); 
C22FFR = param( 253 ); 
C23FFR = param( 254 ); 
C33FFR = param( 255 ); 
aFFL = param( 256 ); 
bFFL = param( 257 ); 
C11FFL = param( 258 ); 
C22FFL = param( 259 ); 
C23FFL = param( 260 ); 
C33FFL = param( 261 ); 
aFRR = param( 262 ); 
bFRR = param( 263 ); 
C11FRR = param( 264 ); 
C22FRR = param( 265 ); 
C23FRR = param( 266 ); 
C33FRR = param( 267 ); 
aFRL = param( 268 ); 
bFRL = param( 269 ); 
C11FRL = param( 270 ); 
C22FRL = param( 271 ); 
C23FRL = param( 272 ); 
C33FRL = param( 273 ); 
epsiRFR = param( 274 ); 
epsiRFL = param( 275 ); 
epsiRRR = param( 276 ); 
epsiRRL = param( 277 ); 
epsiFFR = param( 278 ); 
epsiFFL = param( 279 ); 
epsiFRR = param( 280 ); 
epsiFRL = param( 281 ); 

atom1818 = (RFRstas-RFRends)^(-1);
atom1831 = -RFRas*atom1818;
atom1820 = atom1818*(RFRstas-xR_RFR);
atom1822 = atom1820*RFRas+RFRbs;
atom1834 = -atom1822*atom1818+atom1831*atom1820;
atom1824 = atom1820*atom1822+RFRcs;
atom1837 = -atom1818*atom1824+atom1820*atom1834;
atom1826 = RFRds+atom1820*atom1824;
atom1840 = atom1820*atom1837-atom1818*atom1826;
atom1857 = -atom1834*atom1818;
atom1860 = -atom1818*atom1837;
atom1864 = -atom1818*atom1840;
atom1843 = -atom1818*(atom1820*atom1826+RFRes)+atom1820*atom1840;
atom1867 = 2*(atom1860+atom1820*(atom1857-atom1831*atom1820*atom1818))*atom1820+2*atom1864;
atom1845 = 1+atom1843^2;
atom1846 = sqrt(atom1845);
atom1872 = -atom1846^(-2)*atom1843*atom1867*atom1845^(-1/2);
atom1876 = 1+(0.5)*atom1846^(-1)*atom1867*L_RAIL+(0.5)*atom1872*atom1843*L_RAIL;
atom1878 = -(0.5)*atom1872*L_RAIL+atom1843;
atom1914 = atom1876^2;
atom1922 = (atom1914+atom1878^2)^(-1/2);
atom1923 = atom1922*atom1876;
atom61001 = -C11RFR*G_elastic*epsiRFR*aRFR*atom1923*bRFR;
atom1924 = atom1922*atom1878;
atom863 = sin(aRBOG);
atom21747 = -atom863*zRWHSF;
atom1210 = sin(cRSLD);
atom864 = cos(bRBOG);
atom862 = cos(aRBOG);
atom865 = sin(bRBOG);
atom867 = atom862*atom865;
atom1717 = L_OBOG_OWHS*atom864;
atom21746 = atom1717+atom867*zRWHSF;
atom1209 = cos(cRSLD);
atom0 = -1/2*L_WAG;
atom21753 = atom21746*atom1209-atom21747*atom1210;
atom1173 = sin(bWAG);
atom1174 = cos(aWAG);
atom21757 = atom0+atom21753;
atom1194 = -atom1173*atom1174;
atom1175 = sin(aWAG);
atom21756 = atom21746*atom1210+atom1209*atom21747;
atom1172 = cos(bWAG);
atom869 = atom862*atom864;
atom1725 = -L_OBOG_OWHS*atom865;
atom21749 = atom1725+zRWHSF*atom869;
atom1195 = atom1172*atom1174;
atom21750 = atom21749+zRBOG;
atom21772 = atom1195*atom21750+atom1175*atom21756+atom21757*atom1194;
atom1177 = sin(cWAG);
atom1702 = -(0.5)*L_WHS;
atom31 = sin(aRWHSF);
atom1716 = atom1702*atom31+zRWHSF;
atom30 = cos(aRWHSF);
atom1714 = atom30*atom1702;
atom1721 = atom1717+atom863*atom1714*atom865+atom867*atom1716;
atom1724 = atom862*atom1714-atom863*atom1716;
atom1736 = atom1721*atom1210+atom1724*atom1209;
atom1737 = atom0-atom1724*atom1210+atom1721*atom1209;
atom868 = atom863*atom864;
atom1730 = atom868*atom1714+atom1716*atom869+zRBOG+atom1725;
atom1225 = atom1194*atom1209+atom1175*atom1210;
atom1704 = uW_RFR-lW_RFR;
atom1710 = ((bW_RFR+aW_RFR*atom1704)*atom1704+cW_RFR)*atom1704+dW_RFR;
atom1243 = atom1225*atom864-atom1195*atom865;
atom1711 = -atom1710*sin(thetaW_RFR);
atom1246 = atom1195*atom864+atom1225*atom865;
atom1227 = atom1175*atom1209;
atom1228 = atom1227-atom1194*atom1210;
atom1264 = atom862*atom1246-atom863*atom1228;
atom1261 = atom862*atom1228+atom863*atom1246;
atom1285 = atom30*atom1261+atom1264*atom31;
atom1288 = -atom1261*atom31+atom30*atom1264;
atom1713 = cos(thetaW_RFR)*atom1710;
atom21778 = -atom21772+atom1243*atom1711+atom1730*atom1195+uW_RFR*atom1285+atom1288*atom1713+atom1175*atom1736+atom1194*atom1737;
atom51735 = atom21772*atom1177;
atom1176 = cos(cWAG);
atom51866 = -atom21772*atom1176;
atom60809 = atom51866-atom1176*atom21778;
atom60814 = (atom51735+atom1177*atom21778)*atom1923+atom1924*atom60809;
atom1179 = atom1175*atom1177;
atom1185 = atom1176*atom1173;
atom1187 = atom1172*atom1179+atom1185;
atom1184 = atom1172*atom1176-atom1173*atom1179;
atom1178 = -atom1177*atom1174;
atom21762 = atom1187*atom21750+atom21757*atom1184+atom21756*atom1178;
atom1213 = atom1209*atom1184+atom1178*atom1210;
atom1234 = atom1213*atom865+atom864*atom1187;
atom1216 = -atom1184*atom1210+atom1209*atom1178;
atom1252 = atom862*atom1234-atom863*atom1216;
atom1249 = atom863*atom1234+atom862*atom1216;
atom1276 = atom1252*atom30-atom1249*atom31;
atom1273 = atom1252*atom31+atom30*atom1249;
atom1231 = atom1213*atom864-atom1187*atom865;
atom21776 = atom1184*atom1737+atom1276*atom1713-atom21762+uW_RFR*atom1273+atom1730*atom1187+atom1231*atom1711+atom1736*atom1178;
atom51875 = -atom21772*atom1178+atom1175*atom21762;
atom60818 = atom1175*atom21776-atom21778*atom1178+atom51875;
atom1180 = atom1176*atom1174;
atom1181 = -atom1175*atom1176;
atom1190 = -atom1181*atom1173+atom1172*atom1177;
atom1191 = atom1177*atom1173;
atom1193 = atom1191+atom1172*atom1181;
atom21767 = atom21757*atom1190+atom1193*atom21750+atom1180*atom21756;
atom1219 = atom1180*atom1210+atom1190*atom1209;
atom1237 = atom864*atom1219-atom1193*atom865;
atom1222 = atom1180*atom1209-atom1190*atom1210;
atom1240 = atom1219*atom865+atom1193*atom864;
atom1255 = atom862*atom1222+atom863*atom1240;
atom1258 = -atom863*atom1222+atom862*atom1240;
atom1279 = atom1258*atom31+atom1255*atom30;
atom1282 = atom1258*atom30-atom1255*atom31;
atom21777 = atom1180*atom1736+uW_RFR*atom1279+atom1711*atom1237-atom21767+atom1190*atom1737+atom1282*atom1713+atom1730*atom1193;
atom51759 = -atom1175*atom21767+atom21772*atom1180;
atom60825 = (atom1180*atom21778+atom51759-atom1175*atom21777)*atom1923+atom1924*atom60818;
atom60826 = atom21776+atom21762;
atom60830 = atom60826*atom1924-(atom21767+atom21777)*atom1923;
atom3814 = -atom1175*atom1172;
atom60839 = atom1191+atom1176*atom3814;
atom25002 = -atom21756*atom1184+atom1178*atom21753;
atom60833 = -atom3814*atom1177+atom1185;
atom24853 = atom1180*atom21753-atom21756*atom1190;
atom60836 = atom24853-atom21778*atom60833+atom21776*atom1195;
atom60845 = -(atom1195*atom21777-atom25002-atom60839*atom21778)*atom1923+atom1924*atom60836;
atom7663 = atom1193*atom1924+atom1187*atom1923;
atom51823 = -atom21749*atom864-atom21746*atom865;
atom51819 = -atom21747*atom865;
atom51825 = -atom1209*atom51819-atom51823*atom1210;
atom51829 = atom51823*atom1209-atom1210*atom51819;
atom51832 = atom864*atom21747;
atom22967 = atom864*atom1210;
atom24052 = atom864*atom1209;
atom60847 = -atom1172*atom865-atom1173*atom24052;
atom60853 = -atom1175*atom60847+atom22967*atom1174;
atom22964 = -atom1173*atom865;
atom60856 = atom1172*atom24052+atom22964;
atom60865 = atom1176*atom60853+atom60856*atom1177;
atom60849 = atom60847*atom1174+atom1175*atom22967;
atom51834 = atom51832*atom1187+atom51829*atom1178+atom51825*atom1184;
atom60868 = -atom21777*atom60849+atom60865*atom21778;
atom60858 = atom1176*atom60856-atom60853*atom1177;
atom51898 = atom1193*atom51832+atom1180*atom51829+atom51825*atom1190;
atom60860 = -atom60858*atom21778+atom21776*atom60849;
atom60861 = atom51898+atom60860;
atom60871 = atom60861*atom1924+(atom51834+atom60868)*atom1923;
atom22863 = atom1173*atom1210;
atom22942 = atom22863*atom1174+atom1227;
atom22861 = -atom1172*atom1210;
atom60874 = atom1209*atom1174-atom1175*atom22863;
atom60884 = atom22861*atom1177+atom60874*atom1176;
atom24911 = atom21749*atom1209;
atom24913 = atom21749*atom1210;
atom25030 = atom24913*atom1178-atom21746*atom1187+atom24911*atom1184;
atom60877 = atom22861*atom1176-atom60874*atom1177;
atom24923 = atom1180*atom24913+atom24911*atom1190-atom1193*atom21746;
atom60880 = atom24923-atom60877*atom21778+atom22942*atom21776;
atom60890 = atom1924*atom60880+atom1923*(atom60884*atom21778-atom22942*atom21777+atom25030);
atom4138 = -atom863*atom1209;
atom4139 = atom4138+atom867*atom1210;
atom4143 = atom867*atom1209+atom863*atom1210;
atom4152 = atom1193*atom869+atom1180*atom4139+atom4143*atom1190;
atom7672 = (atom4143*atom1184+atom4139*atom1178+atom1187*atom869)*atom1923+atom4152*atom1924;
atom60893 = atom60868*atom1923+atom1924*atom60860;
atom24189 = -atom863*atom30-atom862*atom31;
atom60903 = -atom864*atom24189;
atom60894 = -atom24189*atom865;
atom24177 = atom862*atom30-atom863*atom31;
atom60901 = -atom24177*atom1210+atom60894*atom1209;
atom60905 = atom1172*atom60903-atom60901*atom1173;
atom60897 = atom24177*atom1209+atom60894*atom1210;
atom60907 = atom60897*atom1175+atom60905*atom1174;
atom60911 = -atom1175*atom60905+atom60897*atom1174;
atom60915 = atom1172*atom60901+atom60903*atom1173;
atom60923 = atom1177*atom60915+atom60911*atom1176;
atom60917 = atom1176*atom60915-atom60911*atom1177;
atom60919 = -atom21778*atom60917+atom21776*atom60907;
atom60928 = -atom1923*(atom21777*atom60907-atom60923*atom21778)+atom60919*atom1924;
atom61002 = -C11RFR*atom1924*G_elastic*epsiRFR*aRFR*bRFR;
atom1810 = uR_RFR-lR_RFR;
atom1811 = aR_RFR*atom1810;
atom1812 = atom1811+bR_RFR;
atom1881 = cR_RFR+atom1812*atom1810+atom1810*(atom1812+atom1811);
atom1927 = (1+atom1881^2)^(-1/2);
atom61003 = -G_elastic*epsiRFR*C22RFR*aRFR*atom1927*bRFR;
atom1928 = atom1881*atom1927;
atom51916 = atom1176*atom21767-atom21762*atom1177;
atom60935 = atom1928*(atom1176*atom21777-atom21776*atom1177+atom51916)+atom60809*atom1927;
atom61005 = sqrt(aRFR*bRFR);
atom1882 = atom1881*atom1878;
atom1883 = -atom1876*atom1881;
atom1916 = (atom1914+atom1882^2+atom1883^2)^(-1/2);
atom1918 = atom1916*atom1883;
atom1917 = atom1882*atom1916;
atom61006 = -G_elastic*epsiRFR*aRFR*atom1927*atom61005*C23RFR*bRFR;
atom60976 = atom1917*atom1176+atom1177*atom1918;
atom1919 = atom1876*atom1916;
atom60981 = atom1917*atom1178+atom1180*atom1918+atom1175*atom1919;
atom51925 = atom21767*atom1178-atom1180*atom21762;
atom60942 = atom1928*(atom21777*atom1178-atom1180*atom21776+atom51925)+atom60818*atom1927;
atom60943 = atom60826*atom1927;
atom24849 = atom1175*atom21753-atom21756*atom1194;
atom60950 = atom1928*(atom21777*atom60833-atom21776*atom60839+atom24849)+atom1927*atom60836;
atom60985 = atom1919*atom1195+atom1917*atom60833+atom60839*atom1918;
atom7712 = atom1928*atom1195+atom1193*atom1927;
atom60990 = atom1919*atom60849+atom1917*atom60858+atom60865*atom1918;
atom51947 = atom1195*atom51832+atom51829*atom1175+atom51825*atom1194;
atom60953 = -atom21776*atom60865+atom60858*atom21777;
atom60957 = (atom51947+atom60953)*atom1928+atom60861*atom1927;
atom61114 = atom60990*atom61006;
atom60995 = atom22942*atom1919+atom1917*atom60877+atom60884*atom1918;
atom24917 = atom1194*atom24911-atom21746*atom1195+atom1175*atom24913;
atom60964 = atom60880*atom1927-atom1928*(atom60884*atom21776-atom60877*atom21777-atom24917);
atom7721 = (atom4139*atom1175+atom1195*atom869+atom4143*atom1194)*atom1928+atom4152*atom1927;
atom60967 = atom1927*atom60860+atom1928*atom60953;
atom60973 = atom60919*atom1927-atom1928*(atom60923*atom21776-atom21777*atom60917);
atom61000 = atom1917*atom60917+atom1919*atom60907+atom60923*atom1918;
atom61007 = -atom1928*G_elastic*epsiRFR*C22RFR*aRFR*bRFR;
atom61008 = -atom1928*G_elastic*epsiRFR*aRFR*atom61005*C23RFR*bRFR;
atom61149 = atom61008*atom60990;
atom22860 = atom1172*atom1209;
atom22966 = atom864*atom22860+atom22964;
atom22970 = atom864*atom1173+atom22860*atom865;
atom23999 = atom862*atom22970-atom22861*atom863;
atom23996 = atom862*atom22861+atom22970*atom863;
atom24168 = atom23996*atom30+atom23999*atom31;
atom24180 = atom23999*atom30-atom23996*atom31;
atom59009 = atom22966*atom1243+atom24168*atom1285+atom24180*atom1288;
atom59017 = atom24168*atom1273+atom1231*atom22966+atom24180*atom1276;
atom59021 = atom51866-atom59017*atom21778+atom21776*atom59009;
atom59003 = atom24180*atom1282+atom22966*atom1237+atom24168*atom1279;
atom61009 = -((atom51735-atom21777*atom59009+atom21778*atom59003)*atom1923+atom1924*atom59021)*C11RFR*G_elastic*epsiRFR*aRFR*bRFR;
atom60744 = atom1918*atom1237+atom1243*atom1919+atom1231*atom1917;
atom21700 = atom1918*atom1279+atom1919*atom1285+atom1917*atom1273;
atom60737 = atom1918*atom1282+atom1919*atom1288+atom1917*atom1276;
atom60747 = atom24168*atom21700+atom60737*atom24180+atom22966*atom60744;
atom60732 = (atom51916+atom59017*atom21777-atom21776*atom59003)*atom1928+atom59021*atom1927;
atom61012 = -G_elastic*atom60732*epsiRFR*C22RFR*aRFR*bRFR+G_elastic*epsiRFR*aRFR*atom61005*atom60747*C23RFR*bRFR;
atom61015 = bRFR^2;
atom61014 = aRFR^2;
atom61017 = -G_elastic*atom60732*epsiRFR*aRFR*atom61005*C23RFR*bRFR-atom61015*C33RFR*G_elastic*atom61014*epsiRFR*atom60747;
atom61191 = atom60990*atom61017;
atom22971 = atom865*atom1210;
atom24001 = atom862*atom1209+atom863*atom22971;
atom24003 = atom4138+atom862*atom22971;
atom24171 = atom24001*atom30+atom24003*atom31;
atom24183 = atom24003*atom30-atom24001*atom31;
atom59040 = atom22967*atom1237+atom24171*atom1279+atom24183*atom1282;
atom59046 = atom1243*atom22967+atom24171*atom1285+atom24183*atom1288;
atom59054 = atom1231*atom22967+atom1276*atom24183+atom24171*atom1273;
atom59058 = atom59046*atom21776-atom59054*atom21778+atom51875;
atom61018 = -(atom1924*atom59058-(atom59046*atom21777-atom51759-atom59040*atom21778)*atom1923)*C11RFR*G_elastic*epsiRFR*aRFR*bRFR;
atom60753 = -atom1928*(atom59040*atom21776-atom59054*atom21777-atom51925)+atom59058*atom1927;
atom60758 = atom60737*atom24183+atom24171*atom21700+atom60744*atom22967;
atom61021 = -atom60753*G_elastic*epsiRFR*C22RFR*aRFR*bRFR+atom60758*G_elastic*epsiRFR*aRFR*atom61005*C23RFR*bRFR;
atom61024 = -atom61015*atom60758*C33RFR*G_elastic*atom61014*epsiRFR-atom60753*G_elastic*epsiRFR*aRFR*atom61005*C23RFR*bRFR;
atom61241 = atom60990*atom61024;
atom59085 = atom1273*atom1285+atom1231*atom1243+atom1276*atom1288;
atom59079 = atom1288^2+atom1285^2+atom1243^2;
atom59089 = -atom59085*atom21778+atom21762+atom59079*atom21776;
atom59075 = atom1285*atom1279+atom1243*atom1237+atom1288*atom1282;
atom61025 = -((atom21778*atom59075-atom21767-atom59079*atom21777)*atom1923+atom59089*atom1924)*C11RFR*G_elastic*epsiRFR*aRFR*bRFR;
atom60769 = atom21700*atom1285+atom60737*atom1288+atom1243*atom60744;
atom60764 = atom1928*(atom59085*atom21777-atom21776*atom59075)+atom59089*atom1927;
atom61028 = -atom60764*G_elastic*epsiRFR*C22RFR*aRFR*bRFR+atom60769*G_elastic*epsiRFR*aRFR*atom61005*C23RFR*bRFR;
atom61031 = -atom60764*G_elastic*epsiRFR*aRFR*atom61005*C23RFR*bRFR-atom61015*atom60769*C33RFR*G_elastic*atom61014*epsiRFR;
atom61291 = atom60990*atom61031;
atom24174 = atom868*atom30+atom869*atom31;
atom24186 = atom30*atom869-atom868*atom31;
atom59109 = -atom1243*atom865+atom24186*atom1288+atom1285*atom24174;
atom59115 = atom1276*atom24186-atom1231*atom865+atom1273*atom24174;
atom59119 = -atom59115*atom21778+atom24853+atom21776*atom59109;
atom59105 = -atom865*atom1237+atom24174*atom1279+atom24186*atom1282;
atom61032 = C11RFR*G_elastic*epsiRFR*((atom21777*atom59109-atom25002-atom59105*atom21778)*atom1923-atom1924*atom59119)*aRFR*bRFR;
atom60780 = atom60737*atom24186+atom21700*atom24174-atom60744*atom865;
atom60775 = -atom1928*(atom21776*atom59105-atom59115*atom21777-atom24849)+atom59119*atom1927;
atom61035 = G_elastic*atom60780*epsiRFR*aRFR*atom61005*C23RFR*bRFR-atom60775*G_elastic*epsiRFR*C22RFR*aRFR*bRFR;
atom61038 = -atom61015*C33RFR*G_elastic*atom60780*atom61014*epsiRFR-atom60775*G_elastic*epsiRFR*aRFR*atom61005*C23RFR*bRFR;
atom61341 = atom60990*atom61038;
atom61039 = -C11RFR*G_elastic*epsiRFR*atom7663*aRFR*bRFR;
atom61040 = -G_elastic*atom7712*epsiRFR*C22RFR*aRFR*bRFR;
atom61041 = -G_elastic*atom7712*epsiRFR*aRFR*atom61005*C23RFR*bRFR;
atom61391 = atom60990*atom61041;
atom59136 = atom21778*atom1237-atom1243*atom21777;
atom59140 = -atom1231*atom21778+atom21776*atom1243;
atom59141 = atom59140+atom51898;
atom61042 = -(atom1924*atom59141+(atom51834+atom59136)*atom1923)*C11RFR*G_elastic*epsiRFR*aRFR*bRFR;
atom59144 = atom1231*atom21777-atom21776*atom1237;
atom60786 = atom1928*(atom51947+atom59144)+atom1927*atom59141;
atom61044 = G_elastic*atom60744*epsiRFR*aRFR*atom61005*C23RFR*bRFR;
atom61045 = -atom60786*G_elastic*epsiRFR*C22RFR*aRFR*bRFR+atom61044;
atom61047 = -atom61015*C33RFR*G_elastic*atom60744*atom61014*epsiRFR;
atom61048 = atom61047-atom60786*G_elastic*epsiRFR*aRFR*atom61005*C23RFR*bRFR;
atom61441 = atom60990*atom61048;
atom59160 = atom24189*atom1288+atom24177*atom1285;
atom59156 = atom24177*atom1279+atom24189*atom1282;
atom59166 = atom1276*atom24189+atom24177*atom1273;
atom59170 = -atom21778*atom59166+atom24923+atom21776*atom59160;
atom61049 = C11RFR*G_elastic*((atom59160*atom21777-atom59156*atom21778-atom25030)*atom1923-atom1924*atom59170)*epsiRFR*aRFR*bRFR;
atom60792 = (atom21777*atom59166-atom59156*atom21776+atom24917)*atom1928+atom59170*atom1927;
atom60795 = atom60737*atom24189+atom21700*atom24177;
atom61052 = -G_elastic*epsiRFR*C22RFR*aRFR*atom60792*bRFR+G_elastic*atom60795*epsiRFR*aRFR*atom61005*C23RFR*bRFR;
atom61055 = -atom61015*C33RFR*G_elastic*atom60795*atom61014*epsiRFR-G_elastic*epsiRFR*aRFR*atom60792*atom61005*C23RFR*bRFR;
atom61491 = atom60990*atom61055;
atom61056 = -C11RFR*G_elastic*epsiRFR*atom7672*aRFR*bRFR;
atom61057 = -G_elastic*epsiRFR*atom7721*C22RFR*aRFR*bRFR;
atom61058 = -G_elastic*epsiRFR*atom7721*aRFR*atom61005*C23RFR*bRFR;
atom61541 = atom61058*atom60990;
atom61059 = -(atom1924*atom59140+atom59136*atom1923)*C11RFR*G_elastic*epsiRFR*aRFR*bRFR;
atom60801 = atom59140*atom1927+atom1928*atom59144;
atom61061 = -G_elastic*atom60801*epsiRFR*C22RFR*aRFR*bRFR+atom61044;
atom61063 = atom61047-G_elastic*atom60801*epsiRFR*aRFR*atom61005*C23RFR*bRFR;
atom61591 = atom60990*atom61063;
atom59195 = -atom1273*atom21778+atom21776*atom1285;
atom61064 = C11RFR*G_elastic*epsiRFR*aRFR*(atom1923*(atom21777*atom1285-atom21778*atom1279)-atom1924*atom59195)*bRFR;
atom60807 = -(atom21776*atom1279-atom21777*atom1273)*atom1928+atom59195*atom1927;
atom61067 = G_elastic*epsiRFR*atom21700*aRFR*atom61005*C23RFR*bRFR-G_elastic*epsiRFR*C22RFR*aRFR*atom60807*bRFR;
atom61070 = -atom61015*C33RFR*G_elastic*atom61014*epsiRFR*atom21700-G_elastic*epsiRFR*aRFR*atom61005*C23RFR*atom60807*bRFR;
atom61641 = atom60990*atom61070;

CKRFR_ = [atom61001*atom1923 , atom61001*atom1924 , 0 , atom61001*atom60814 , atom61001*atom60825 , atom61001*atom60830 , atom61001*atom60845 , 0 , atom61001*atom7663 , atom61001*atom60871 , atom61001*atom60890 , 0 , 0 , 0 , atom61001*atom7672 , atom61001*atom60893 , atom61001*atom60928 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom61002*atom1923 , atom61003*atom1927+atom1924*atom61002 , atom1928*atom61003 , atom61002*atom60814+atom60935*atom61003+atom61006*atom60976 , atom61002*atom60825+atom60981*atom61006+atom61003*atom60942 , atom1919*atom61006+atom61002*atom60830+atom60943*atom61003 , atom60985*atom61006+atom61003*atom60950+atom61002*atom60845 , 0 , atom7712*atom61003+atom61002*atom7663 , atom61114+atom60957*atom61003+atom61002*atom60871 , atom60890*atom61002+atom61003*atom60964+atom61006*atom60995 , 0 , 0 , 0 , atom61003*atom7721+atom61002*atom7672 , atom61114+atom61002*atom60893+atom60967*atom61003 , atom61002*atom60928+atom61003*atom60973+atom61006*atom61000 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , atom1927*atom61007 , atom1928*atom61007 , atom61008*atom60976+atom60935*atom61007 , atom61007*atom60942+atom61008*atom60981 , atom61008*atom1919+atom60943*atom61007 , atom61008*atom60985+atom60950*atom61007 , 0 , atom7712*atom61007 , atom60957*atom61007+atom61149 , atom61008*atom60995+atom60964*atom61007 , 0 , 0 , 0 , atom7721*atom61007 , atom60967*atom61007+atom61149 , atom61008*atom61000+atom61007*atom60973 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom61009*atom1923 , atom1924*atom61009+atom61012*atom1927 , atom1928*atom61012 , atom60976*atom61017+atom61009*atom60814+atom60935*atom61012 , atom61012*atom60942+atom60981*atom61017+atom61009*atom60825 , atom60943*atom61012+atom1919*atom61017+atom61009*atom60830 , atom60985*atom61017+atom61012*atom60950+atom61009*atom60845 , 0 , atom7712*atom61012+atom61009*atom7663 , atom61191+atom60957*atom61012+atom60871*atom61009 , atom60995*atom61017+atom60890*atom61009+atom61012*atom60964 , 0 , 0 , 0 , atom7721*atom61012+atom61009*atom7672 , atom61009*atom60893+atom61191+atom60967*atom61012 , atom61009*atom60928+atom61012*atom60973+atom61000*atom61017 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom61018*atom1923 , atom1924*atom61018+atom61021*atom1927 , atom1928*atom61021 , atom60976*atom61024+atom60935*atom61021+atom61018*atom60814 , atom61018*atom60825+atom61021*atom60942+atom60981*atom61024 , atom1919*atom61024+atom60943*atom61021+atom61018*atom60830 , atom60985*atom61024+atom61018*atom60845+atom60950*atom61021 , 0 , atom61018*atom7663+atom7712*atom61021 , atom60871*atom61018+atom61241+atom60957*atom61021 , atom60964*atom61021+atom60995*atom61024+atom60890*atom61018 , 0 , 0 , 0 , atom61018*atom7672+atom7721*atom61021 , atom61241+atom61018*atom60893+atom60967*atom61021 , atom61000*atom61024+atom61021*atom60973+atom61018*atom60928 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom61025*atom1923 , atom61028*atom1927+atom1924*atom61025 , atom1928*atom61028 , atom61025*atom60814+atom60935*atom61028+atom61031*atom60976 , atom61028*atom60942+atom60981*atom61031+atom61025*atom60825 , atom60943*atom61028+atom61025*atom60830+atom1919*atom61031 , atom60985*atom61031+atom61025*atom60845+atom61028*atom60950 , 0 , atom7712*atom61028+atom61025*atom7663 , atom60957*atom61028+atom61291+atom60871*atom61025 , atom60995*atom61031+atom60890*atom61025+atom61028*atom60964 , 0 , 0 , 0 , atom7721*atom61028+atom61025*atom7672 , atom61025*atom60893+atom61291+atom60967*atom61028 , atom61025*atom60928+atom61028*atom60973+atom61000*atom61031 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom61032*atom1923 , atom61035*atom1927+atom1924*atom61032 , atom1928*atom61035 , atom61032*atom60814+atom61038*atom60976+atom60935*atom61035 , atom60981*atom61038+atom61032*atom60825+atom61035*atom60942 , atom61032*atom60830+atom1919*atom61038+atom60943*atom61035 , atom61035*atom60950+atom60985*atom61038+atom61032*atom60845 , 0 , atom7712*atom61035+atom61032*atom7663 , atom60871*atom61032+atom60957*atom61035+atom61341 , atom60890*atom61032+atom61035*atom60964+atom61038*atom60995 , 0 , 0 , 0 , atom61035*atom7721+atom61032*atom7672 , atom60967*atom61035+atom61032*atom60893+atom61341 , atom61000*atom61038+atom61032*atom60928+atom61035*atom60973 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom61039*atom1923 , atom61040*atom1927+atom61039*atom1924 , atom1928*atom61040 , atom61041*atom60976+atom60935*atom61040+atom61039*atom60814 , atom61040*atom60942+atom61039*atom60825+atom60981*atom61041 , atom1919*atom61041+atom61040*atom60943+atom61039*atom60830 , atom60985*atom61041+atom61039*atom60845+atom61040*atom60950 , 0 , atom61039*atom7663+atom61040*atom7712 , atom61391+atom60957*atom61040+atom61039*atom60871 , atom61041*atom60995+atom61039*atom60890+atom61040*atom60964 , 0 , 0 , 0 , atom61039*atom7672+atom61040*atom7721 , atom61391+atom61040*atom60967+atom61039*atom60893 , atom61040*atom60973+atom61039*atom60928+atom61041*atom61000 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom61042*atom1923 , atom61045*atom1927+atom1924*atom61042 , atom61045*atom1928 , atom61042*atom60814+atom61048*atom60976+atom61045*atom60935 , atom60981*atom61048+atom61045*atom60942+atom61042*atom60825 , atom61045*atom60943+atom61042*atom60830+atom1919*atom61048 , atom60985*atom61048+atom60845*atom61042+atom61045*atom60950 , 0 , atom61045*atom7712+atom7663*atom61042 , atom61441+atom60957*atom61045+atom60871*atom61042 , atom61045*atom60964+atom61048*atom60995+atom60890*atom61042 , 0 , 0 , 0 , atom61042*atom7672+atom61045*atom7721 , atom61042*atom60893+atom61441+atom61045*atom60967 , atom61000*atom61048+atom61045*atom60973+atom61042*atom60928 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom61049*atom1923 , atom61052*atom1927+atom61049*atom1924 , atom1928*atom61052 , atom60935*atom61052+atom61055*atom60976+atom61049*atom60814 , atom61049*atom60825+atom60981*atom61055+atom61052*atom60942 , atom60943*atom61052+atom1919*atom61055+atom61049*atom60830 , atom61049*atom60845+atom60950*atom61052+atom60985*atom61055 , 0 , atom61049*atom7663+atom7712*atom61052 , atom61491+atom60957*atom61052+atom61049*atom60871 , atom60964*atom61052+atom61049*atom60890+atom61055*atom60995 , 0 , 0 , 0 , atom61049*atom7672+atom7721*atom61052 , atom61491+atom61049*atom60893+atom60967*atom61052 , atom61000*atom61055+atom61052*atom60973+atom61049*atom60928 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom61056*atom1923 , atom61056*atom1924+atom61057*atom1927 , atom61057*atom1928 , atom61056*atom60814+atom61057*atom60935+atom61058*atom60976 , atom60981*atom61058+atom61057*atom60942+atom61056*atom60825 , atom61056*atom60830+atom61058*atom1919+atom61057*atom60943 , atom61057*atom60950+atom61056*atom60845+atom61058*atom60985 , 0 , atom61056*atom7663+atom61057*atom7712 , atom61056*atom60871+atom61541+atom60957*atom61057 , atom61056*atom60890+atom61057*atom60964+atom61058*atom60995 , 0 , 0 , 0 , atom61057*atom7721+atom61056*atom7672 , atom61541+atom61056*atom60893+atom61057*atom60967 , atom61056*atom60928+atom61058*atom61000+atom61057*atom60973 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom1923*atom61059 , atom1924*atom61059+atom61061*atom1927 , atom61061*atom1928 , atom61063*atom60976+atom60814*atom61059+atom61061*atom60935 , atom61061*atom60942+atom60981*atom61063+atom60825*atom61059 , atom61059*atom60830+atom61061*atom60943+atom1919*atom61063 , atom60845*atom61059+atom60985*atom61063+atom61061*atom60950 , 0 , atom7663*atom61059+atom61061*atom7712 , atom60871*atom61059+atom61591+atom60957*atom61061 , atom61063*atom60995+atom60890*atom61059+atom61061*atom60964 , 0 , 0 , 0 , atom7672*atom61059+atom61061*atom7721 , atom61061*atom60967+atom61059*atom60893+atom61591 , atom60928*atom61059+atom61061*atom60973+atom61000*atom61063 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom61064*atom1923 , atom61064*atom1924+atom1927*atom61067 , atom1928*atom61067 , atom61064*atom60814+atom61070*atom60976+atom60935*atom61067 , atom61067*atom60942+atom60981*atom61070+atom61064*atom60825 , atom61064*atom60830+atom60943*atom61067+atom1919*atom61070 , atom60950*atom61067+atom61064*atom60845+atom60985*atom61070 , 0 , atom7712*atom61067+atom61064*atom7663 , atom61064*atom60871+atom60957*atom61067+atom61641 , atom60890*atom61064+atom61070*atom60995+atom60964*atom61067 , 0 , 0 , 0 , atom7721*atom61067+atom61064*atom7672 , atom60967*atom61067+atom61064*atom60893+atom61641 , atom61064*atom60928+atom61000*atom61070+atom61067*atom60973 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0];

%endfunction
