function CKRRR_ = CKRRR(q,qaux,dq,time,param)

xWAG = q( 1 ); 
yWAG = q( 2 ); 
zWAG = q( 3 ); 
aWAG = q( 4 ); 
bWAG = q( 5 ); 
cWAG = q( 6 ); 
cRSLD = q( 7 ); 
cFSLD = q( 8 ); 
zRBOG = q( 9 ); 
aRBOG = q( 10 ); 
bRBOG = q( 11 ); 
zFBOG = q( 12 ); 
aFBOG = q( 13 ); 
bFBOG = q( 14 ); 
zRWHSF = q( 15 ); 
aRWHSF = q( 16 ); 
bRWHSF = q( 17 ); 
zRWHSR = q( 18 ); 
aRWHSR = q( 19 ); 
bRWHSR = q( 20 ); 
zFWHSF = q( 21 ); 
aFWHSF = q( 22 ); 
bFWHSF = q( 23 ); 
zFWHSR = q( 24 ); 
aFWHSR = q( 25 ); 
bFWHSR = q( 26 ); 
bRAXBFL = q( 27 ); 
bRAXBFR = q( 28 ); 
bRAXBRL = q( 29 ); 
bRAXBRR = q( 30 ); 
bFAXBFL = q( 31 ); 
bFAXBFR = q( 32 ); 
bFAXBRL = q( 33 ); 
bFAXBRR = q( 34 ); 
xRMOTF = q( 35 ); 
yRMOTF = q( 36 ); 
zRMOTF = q( 37 ); 
bRMOTF = q( 38 ); 
xRMOTR = q( 39 ); 
yRMOTR = q( 40 ); 
zRMOTR = q( 41 ); 
bRMOTR = q( 42 ); 
bRROTF = q( 43 ); 
bRROTR = q( 44 ); 

thetaW_RFR = qaux( 1 ); 
uW_RFR = qaux( 2 ); 
uR_RFR = qaux( 3 ); 
xR_RFR = qaux( 4 ); 
thetaW_RFL = qaux( 5 ); 
uW_RFL = qaux( 6 ); 
uR_RFL = qaux( 7 ); 
xR_RFL = qaux( 8 ); 
thetaW_RRR = qaux( 9 ); 
uW_RRR = qaux( 10 ); 
uR_RRR = qaux( 11 ); 
xR_RRR = qaux( 12 ); 
thetaW_RRL = qaux( 13 ); 
uW_RRL = qaux( 14 ); 
uR_RRL = qaux( 15 ); 
xR_RRL = qaux( 16 ); 
thetaW_FFR = qaux( 17 ); 
uW_FFR = qaux( 18 ); 
uR_FFR = qaux( 19 ); 
xR_FFR = qaux( 20 ); 
thetaW_FFL = qaux( 21 ); 
uW_FFL = qaux( 22 ); 
uR_FFL = qaux( 23 ); 
xR_FFL = qaux( 24 ); 
thetaW_FRR = qaux( 25 ); 
uW_FRR = qaux( 26 ); 
uR_FRR = qaux( 27 ); 
xR_FRR = qaux( 28 ); 
thetaW_FRL = qaux( 29 ); 
uW_FRL = qaux( 30 ); 
uR_FRL = qaux( 31 ); 
xR_FRL = qaux( 32 ); 

dxWAG = dq( 1 ); 
dyWAG = dq( 2 ); 
dzWAG = dq( 3 ); 
daWAG = dq( 4 ); 
dbWAG = dq( 5 ); 
dcWAG = dq( 6 ); 
dcRSLD = dq( 7 ); 
dcFSLD = dq( 8 ); 
dzRBOG = dq( 9 ); 
daRBOG = dq( 10 ); 
dbRBOG = dq( 11 ); 
dzFBOG = dq( 12 ); 
daFBOG = dq( 13 ); 
dbFBOG = dq( 14 ); 
dzRWHSF = dq( 15 ); 
daRWHSF = dq( 16 ); 
dbRWHSF = dq( 17 ); 
dzRWHSR = dq( 18 ); 
daRWHSR = dq( 19 ); 
dbRWHSR = dq( 20 ); 
dzFWHSF = dq( 21 ); 
daFWHSF = dq( 22 ); 
dbFWHSF = dq( 23 ); 
dzFWHSR = dq( 24 ); 
daFWHSR = dq( 25 ); 
dbFWHSR = dq( 26 ); 
dbRAXBFL = dq( 27 ); 
dbRAXBFR = dq( 28 ); 
dbRAXBRL = dq( 29 ); 
dbRAXBRR = dq( 30 ); 
dbFAXBFL = dq( 31 ); 
dbFAXBFR = dq( 32 ); 
dbFAXBRL = dq( 33 ); 
dbFAXBRR = dq( 34 ); 
dxRMOTF = dq( 35 ); 
dyRMOTF = dq( 36 ); 
dzRMOTF = dq( 37 ); 
dbRMOTF = dq( 38 ); 
dxRMOTR = dq( 39 ); 
dyRMOTR = dq( 40 ); 
dzRMOTR = dq( 41 ); 
dbRMOTR = dq( 42 ); 
dbRROTF = dq( 43 ); 
dbRROTR = dq( 44 ); 

t= time ;

g = param( 1 ); 
L_OBOG_OAXBy = param( 2 ); 
L_OBOG_OAXBz = param( 3 ); 
L_OBOG_OSUSPy = param( 4 ); 
L_OBOG_OSUSPx = param( 5 ); 
L_OBOG_OSUSPz = param( 6 ); 
L_OBOG_OWHS = param( 7 ); 
L_OBOG_P1BOG = param( 8 ); 
L_MOT = param( 9 ); 
L_GEAR = param( 10 ); 
L_AXB1 = param( 11 ); 
L_AXB2 = param( 12 ); 
L_SUSP = param( 13 ); 
L_WHS = param( 14 ); 
L_RAIL = param( 15 ); 
L_WAG = param( 16 ); 
L_SUSPBEAM1 = param( 17 ); 
L_SUSPBEAM2 = param( 18 ); 
L_SLDx = param( 19 ); 
L_SLDy = param( 20 ); 
b_pend = param( 21 ); 
a_pend = param( 22 ); 
L0_1 = param( 23 ); 
L0_2 = param( 24 ); 
m_WAG = param( 25 ); 
I_WAGx = param( 26 ); 
I_WAGy = param( 27 ); 
I_WAGz = param( 28 ); 
xCGWAG = param( 29 ); 
yCGWAG = param( 30 ); 
zCGWAG = param( 31 ); 
G_BOGz = param( 32 ); 
m_BOG = param( 33 ); 
I_BOGx = param( 34 ); 
I_BOGy = param( 35 ); 
I_BOGz = param( 36 ); 
m_MOT = param( 37 ); 
I_MOTx = param( 38 ); 
I_MOTy = param( 39 ); 
I_MOTz = param( 40 ); 
m_ROT = param( 41 ); 
I_ROTx = param( 42 ); 
I_ROTy = param( 43 ); 
I_ROTz = param( 44 ); 
m_WHS = param( 45 ); 
I_WHSx = param( 46 ); 
I_WHSy = param( 47 ); 
I_WHSz = param( 48 ); 
I_CORy = param( 49 ); 
m_AXB = param( 50 ); 
I_AXBx = param( 51 ); 
I_AXBy = param( 52 ); 
I_AXBz = param( 53 ); 
m_SLD = param( 54 ); 
I_SLDx = param( 55 ); 
I_SLDy = param( 56 ); 
I_SLDz = param( 57 ); 
K_SSl = param( 58 ); 
C_SSl = param( 59 ); 
C_SSr = param( 60 ); 
K_SSr = param( 61 ); 
Kgear = param( 62 ); 
Cgear = param( 63 ); 
alpha_gear = param( 64 ); 
zROT = param( 65 ); 
zWHS = param( 66 ); 
K_S1 = param( 67 ); 
C_S1 = param( 68 ); 
K_S2 = param( 69 ); 
C_S2 = param( 70 ); 
aW_RFR = param( 71 ); 
bW_RFR = param( 72 ); 
cW_RFR = param( 73 ); 
dW_RFR = param( 74 ); 
lW_RFR = param( 75 ); 
aR_RFR = param( 76 ); 
bR_RFR = param( 77 ); 
cR_RFR = param( 78 ); 
dR_RFR = param( 79 ); 
lR_RFR = param( 80 ); 
RFRas = param( 81 ); 
RFRbs = param( 82 ); 
RFRcs = param( 83 ); 
RFRds = param( 84 ); 
RFRes = param( 85 ); 
RFRfs = param( 86 ); 
RFRstas = param( 87 ); 
RFRends = param( 88 ); 
irrRFRz = param( 89 ); 
aW_RFL = param( 90 ); 
bW_RFL = param( 91 ); 
cW_RFL = param( 92 ); 
dW_RFL = param( 93 ); 
lW_RFL = param( 94 ); 
aR_RFL = param( 95 ); 
bR_RFL = param( 96 ); 
cR_RFL = param( 97 ); 
dR_RFL = param( 98 ); 
lR_RFL = param( 99 ); 
RFLas = param( 100 ); 
RFLbs = param( 101 ); 
RFLcs = param( 102 ); 
RFLds = param( 103 ); 
RFLes = param( 104 ); 
RFLfs = param( 105 ); 
RFLstas = param( 106 ); 
RFLends = param( 107 ); 
irrRFLz = param( 108 ); 
aW_RRR = param( 109 ); 
bW_RRR = param( 110 ); 
cW_RRR = param( 111 ); 
dW_RRR = param( 112 ); 
lW_RRR = param( 113 ); 
aR_RRR = param( 114 ); 
bR_RRR = param( 115 ); 
cR_RRR = param( 116 ); 
dR_RRR = param( 117 ); 
lR_RRR = param( 118 ); 
RRRas = param( 119 ); 
RRRbs = param( 120 ); 
RRRcs = param( 121 ); 
RRRds = param( 122 ); 
RRRes = param( 123 ); 
RRRfs = param( 124 ); 
RRRstas = param( 125 ); 
RRRends = param( 126 ); 
irrRRRz = param( 127 ); 
aW_RRL = param( 128 ); 
bW_RRL = param( 129 ); 
cW_RRL = param( 130 ); 
dW_RRL = param( 131 ); 
lW_RRL = param( 132 ); 
aR_RRL = param( 133 ); 
bR_RRL = param( 134 ); 
cR_RRL = param( 135 ); 
dR_RRL = param( 136 ); 
lR_RRL = param( 137 ); 
RRLas = param( 138 ); 
RRLbs = param( 139 ); 
RRLcs = param( 140 ); 
RRLds = param( 141 ); 
RRLes = param( 142 ); 
RRLfs = param( 143 ); 
RRLstas = param( 144 ); 
RRLends = param( 145 ); 
irrRRLz = param( 146 ); 
aW_FFR = param( 147 ); 
bW_FFR = param( 148 ); 
cW_FFR = param( 149 ); 
dW_FFR = param( 150 ); 
lW_FFR = param( 151 ); 
aR_FFR = param( 152 ); 
bR_FFR = param( 153 ); 
cR_FFR = param( 154 ); 
dR_FFR = param( 155 ); 
lR_FFR = param( 156 ); 
FFRas = param( 157 ); 
FFRbs = param( 158 ); 
FFRcs = param( 159 ); 
FFRds = param( 160 ); 
FFRes = param( 161 ); 
FFRfs = param( 162 ); 
FFRstas = param( 163 ); 
FFRends = param( 164 ); 
irrFFRz = param( 165 ); 
aW_FFL = param( 166 ); 
bW_FFL = param( 167 ); 
cW_FFL = param( 168 ); 
dW_FFL = param( 169 ); 
lW_FFL = param( 170 ); 
aR_FFL = param( 171 ); 
bR_FFL = param( 172 ); 
cR_FFL = param( 173 ); 
dR_FFL = param( 174 ); 
lR_FFL = param( 175 ); 
FFLas = param( 176 ); 
FFLbs = param( 177 ); 
FFLcs = param( 178 ); 
FFLds = param( 179 ); 
FFLes = param( 180 ); 
FFLfs = param( 181 ); 
FFLstas = param( 182 ); 
FFLends = param( 183 ); 
irrFFLz = param( 184 ); 
aW_FRR = param( 185 ); 
bW_FRR = param( 186 ); 
cW_FRR = param( 187 ); 
dW_FRR = param( 188 ); 
lW_FRR = param( 189 ); 
aR_FRR = param( 190 ); 
bR_FRR = param( 191 ); 
cR_FRR = param( 192 ); 
dR_FRR = param( 193 ); 
lR_FRR = param( 194 ); 
FRRas = param( 195 ); 
FRRbs = param( 196 ); 
FRRcs = param( 197 ); 
FRRds = param( 198 ); 
FRRes = param( 199 ); 
FRRfs = param( 200 ); 
FRRstas = param( 201 ); 
FRRends = param( 202 ); 
irrFRRz = param( 203 ); 
aW_FRL = param( 204 ); 
bW_FRL = param( 205 ); 
cW_FRL = param( 206 ); 
dW_FRL = param( 207 ); 
lW_FRL = param( 208 ); 
aR_FRL = param( 209 ); 
bR_FRL = param( 210 ); 
cR_FRL = param( 211 ); 
dR_FRL = param( 212 ); 
lR_FRL = param( 213 ); 
FRLas = param( 214 ); 
FRLbs = param( 215 ); 
FRLcs = param( 216 ); 
FRLds = param( 217 ); 
FRLes = param( 218 ); 
FRLfs = param( 219 ); 
FRLstas = param( 220 ); 
FRLends = param( 221 ); 
irrFRLz = param( 222 ); 
E_elastic = param( 223 ); 
nu_poisson = param( 224 ); 
G_elastic = param( 225 ); 
aRFR = param( 226 ); 
bRFR = param( 227 ); 
C11RFR = param( 228 ); 
C22RFR = param( 229 ); 
C23RFR = param( 230 ); 
C33RFR = param( 231 ); 
aRFL = param( 232 ); 
bRFL = param( 233 ); 
C11RFL = param( 234 ); 
C22RFL = param( 235 ); 
C23RFL = param( 236 ); 
C33RFL = param( 237 ); 
aRRR = param( 238 ); 
bRRR = param( 239 ); 
C11RRR = param( 240 ); 
C22RRR = param( 241 ); 
C23RRR = param( 242 ); 
C33RRR = param( 243 ); 
aRRL = param( 244 ); 
bRRL = param( 245 ); 
C11RRL = param( 246 ); 
C22RRL = param( 247 ); 
C23RRL = param( 248 ); 
C33RRL = param( 249 ); 
aFFR = param( 250 ); 
bFFR = param( 251 ); 
C11FFR = param( 252 ); 
C22FFR = param( 253 ); 
C23FFR = param( 254 ); 
C33FFR = param( 255 ); 
aFFL = param( 256 ); 
bFFL = param( 257 ); 
C11FFL = param( 258 ); 
C22FFL = param( 259 ); 
C23FFL = param( 260 ); 
C33FFL = param( 261 ); 
aFRR = param( 262 ); 
bFRR = param( 263 ); 
C11FRR = param( 264 ); 
C22FRR = param( 265 ); 
C23FRR = param( 266 ); 
C33FRR = param( 267 ); 
aFRL = param( 268 ); 
bFRL = param( 269 ); 
C11FRL = param( 270 ); 
C22FRL = param( 271 ); 
C23FRL = param( 272 ); 
C33FRL = param( 273 ); 
epsiRFR = param( 274 ); 
epsiRFL = param( 275 ); 
epsiRRR = param( 276 ); 
epsiRRL = param( 277 ); 
epsiFFR = param( 278 ); 
epsiFFL = param( 279 ); 
epsiFRR = param( 280 ); 
epsiFRL = param( 281 ); 

atom2326 = (RRRstas-RRRends)^(-1);
atom2327 = atom2326*(RRRstas-xR_RRR);
atom2329 = atom2327*RRRas+RRRbs;
atom2331 = RRRcs+atom2327*atom2329;
atom2338 = -atom2326*RRRas;
atom2341 = -atom2329*atom2326+atom2327*atom2338;
atom2344 = atom2327*atom2341-atom2331*atom2326;
atom2333 = RRRds+atom2327*atom2331;
atom2347 = -atom2333*atom2326+atom2327*atom2344;
atom2350 = -atom2326*(atom2327*atom2333+RRRes)+atom2327*atom2347;
atom2352 = 1+atom2350^2;
atom2353 = sqrt(atom2352);
atom2361 = -atom2326*atom2341;
atom2367 = -atom2344*atom2326;
atom2372 = -atom2347*atom2326;
atom2374 = 2*atom2372+atom2327*(2*atom2367+atom2327*(-(2.0)*atom2327*atom2338*atom2326+2*atom2361));
atom2379 = -atom2350*atom2352^(-1/2)*atom2374*atom2353^(-2);
atom2385 = -(0.5)*L_RAIL*atom2379+atom2350;
atom2383 = 1+(0.5)*L_RAIL*atom2374*atom2353^(-1)+(0.5)*atom2350*L_RAIL*atom2379;
atom2421 = atom2383^2;
atom2429 = (atom2385^2+atom2421)^(-1/2);
atom2430 = atom2429*atom2383;
atom62787 = -C11RRR*epsiRRR*G_elastic*aRRR*bRRR*atom2430;
atom2431 = atom2385*atom2429;
atom865 = sin(bRBOG);
atom862 = cos(aRBOG);
atom864 = cos(bRBOG);
atom869 = atom862*atom864;
atom1725 = -L_OBOG_OWHS*atom865;
atom21988 = zRWHSR*atom869-atom1725;
atom1172 = cos(bWAG);
atom1174 = cos(aWAG);
atom21989 = atom21988+zRBOG;
atom1195 = atom1172*atom1174;
atom863 = sin(aRBOG);
atom21986 = -atom863*zRWHSR;
atom1209 = cos(cRSLD);
atom867 = atom862*atom865;
atom1717 = L_OBOG_OWHS*atom864;
atom21985 = -atom1717+atom867*zRWHSR;
atom1210 = sin(cRSLD);
atom1175 = sin(aWAG);
atom21995 = atom21986*atom1209+atom21985*atom1210;
atom1173 = sin(bWAG);
atom0 = -1/2*L_WAG;
atom21992 = -atom21986*atom1210+atom1209*atom21985;
atom1194 = -atom1173*atom1174;
atom21996 = atom0+atom21992;
atom22011 = atom1175*atom21995+atom1194*atom21996+atom21989*atom1195;
atom50 = sin(aRWHSR);
atom1702 = -(0.5)*L_WHS;
atom2225 = atom50*atom1702+zRWHSR;
atom49 = cos(aRWHSR);
atom868 = atom863*atom864;
atom2223 = atom49*atom1702;
atom2237 = zRBOG+atom868*atom2223-atom1725+atom2225*atom869;
atom2229 = -atom1717+atom867*atom2225+atom863*atom2223*atom865;
atom2232 = atom862*atom2223-atom863*atom2225;
atom2243 = atom2229*atom1210+atom1209*atom2232;
atom2244 = atom0+atom1209*atom2229-atom2232*atom1210;
atom2212 = uW_RRR-lW_RRR;
atom2218 = atom2212*(cW_RRR+atom2212*(bW_RRR+atom2212*aW_RRR))+dW_RRR;
atom1225 = atom1194*atom1209+atom1175*atom1210;
atom1246 = atom1195*atom864+atom1225*atom865;
atom1227 = atom1175*atom1209;
atom1228 = atom1227-atom1194*atom1210;
atom1264 = atom862*atom1246-atom863*atom1228;
atom1261 = atom862*atom1228+atom863*atom1246;
atom2222 = atom2218*cos(thetaW_RRR);
atom1325 = atom49*atom1264-atom50*atom1261;
atom1243 = atom1225*atom864-atom1195*atom865;
atom2220 = -sin(thetaW_RRR)*atom2218;
atom1322 = atom49*atom1261+atom50*atom1264;
atom22017 = atom2222*atom1325+uW_RRR*atom1322+atom1243*atom2220+atom1195*atom2237+atom1194*atom2244+atom1175*atom2243-atom22011;
atom1176 = cos(cWAG);
atom52551 = -atom1176*atom22011;
atom62625 = -atom22017*atom1176+atom52551;
atom1177 = sin(cWAG);
atom52415 = atom1177*atom22011;
atom62627 = (atom22017*atom1177+atom52415)*atom2430+atom62625*atom2431;
atom1181 = -atom1175*atom1176;
atom1191 = atom1177*atom1173;
atom1193 = atom1191+atom1172*atom1181;
atom1180 = atom1176*atom1174;
atom1190 = -atom1181*atom1173+atom1172*atom1177;
atom22006 = atom1193*atom21989+atom1180*atom21995+atom1190*atom21996;
atom1222 = atom1180*atom1209-atom1190*atom1210;
atom1219 = atom1180*atom1210+atom1190*atom1209;
atom1240 = atom1219*atom865+atom1193*atom864;
atom1255 = atom862*atom1222+atom863*atom1240;
atom1258 = -atom863*atom1222+atom862*atom1240;
atom1316 = atom1255*atom49+atom1258*atom50;
atom1237 = atom864*atom1219-atom1193*atom865;
atom1319 = -atom1255*atom50+atom1258*atom49;
atom22016 = -atom22006+atom1180*atom2243+atom1316*uW_RRR+atom1190*atom2244+atom1319*atom2222+atom1193*atom2237+atom2220*atom1237;
atom52439 = atom1180*atom22011-atom22006*atom1175;
atom1179 = atom1175*atom1177;
atom1184 = atom1172*atom1176-atom1173*atom1179;
atom1178 = -atom1177*atom1174;
atom1185 = atom1176*atom1173;
atom1187 = atom1172*atom1179+atom1185;
atom1213 = atom1209*atom1184+atom1178*atom1210;
atom1234 = atom1213*atom865+atom864*atom1187;
atom1216 = -atom1184*atom1210+atom1209*atom1178;
atom1252 = atom862*atom1234-atom863*atom1216;
atom1249 = atom863*atom1234+atom862*atom1216;
atom1310 = atom49*atom1249+atom50*atom1252;
atom1231 = atom1213*atom864-atom1187*atom865;
atom1313 = -atom50*atom1249+atom49*atom1252;
atom22001 = atom21996*atom1184+atom21989*atom1187+atom21995*atom1178;
atom22015 = -atom22001+uW_RRR*atom1310+atom2244*atom1184+atom2222*atom1313+atom2243*atom1178+atom1231*atom2220+atom2237*atom1187;
atom52560 = atom1175*atom22001-atom1178*atom22011;
atom62636 = atom1175*atom22015+atom52560-atom22017*atom1178;
atom62638 = atom62636*atom2431+(atom52439-atom22016*atom1175+atom1180*atom22017)*atom2430;
atom62641 = atom22001+atom22015;
atom62643 = -(atom22006+atom22016)*atom2430+atom62641*atom2431;
atom3814 = -atom1175*atom1172;
atom60833 = -atom3814*atom1177+atom1185;
atom26169 = atom1180*atom21992-atom21995*atom1190;
atom62652 = atom26169+atom1195*atom22015-atom22017*atom60833;
atom60839 = atom1191+atom1176*atom3814;
atom26287 = -atom21995*atom1184+atom21992*atom1178;
atom62654 = -(atom22016*atom1195-atom22017*atom60839-atom26287)*atom2430+atom2431*atom62652;
atom8275 = atom1193*atom2431+atom1187*atom2430;
atom52503 = -atom21986*atom865;
atom52501 = -atom865*atom21985-atom21988*atom864;
atom52509 = atom1209*atom52501-atom52503*atom1210;
atom52505 = -atom52501*atom1210-atom1209*atom52503;
atom52512 = atom21986*atom864;
atom22967 = atom864*atom1210;
atom24052 = atom864*atom1209;
atom60847 = -atom1172*atom865-atom1173*atom24052;
atom60849 = atom60847*atom1174+atom1175*atom22967;
atom22964 = -atom1173*atom865;
atom60856 = atom1172*atom24052+atom22964;
atom60853 = -atom1175*atom60847+atom22967*atom1174;
atom60858 = atom1176*atom60856-atom60853*atom1177;
atom52581 = atom1193*atom52512+atom1180*atom52509+atom52505*atom1190;
atom62662 = atom60849*atom22015-atom22017*atom60858;
atom62663 = atom52581+atom62662;
atom60865 = atom1176*atom60853+atom60856*atom1177;
atom52514 = atom52509*atom1178+atom52505*atom1184+atom1187*atom52512;
atom62657 = atom22017*atom60865-atom22016*atom60849;
atom62665 = atom2431*atom62663+(atom52514+atom62657)*atom2430;
atom22861 = -atom1172*atom1210;
atom22863 = atom1173*atom1210;
atom60874 = atom1209*atom1174-atom1175*atom22863;
atom60877 = atom22861*atom1176-atom60874*atom1177;
atom22942 = atom22863*atom1174+atom1227;
atom26224 = atom21988*atom1210;
atom26233 = atom21988*atom1209;
atom26250 = -atom1193*atom21985+atom1180*atom26224+atom1190*atom26233;
atom62674 = atom22942*atom22015-atom22017*atom60877+atom26250;
atom60884 = atom22861*atom1177+atom60874*atom1176;
atom26315 = atom26233*atom1184-atom1187*atom21985+atom1178*atom26224;
atom62676 = (atom60884*atom22017+atom26315-atom22942*atom22016)*atom2430+atom2431*atom62674;
atom4138 = -atom863*atom1209;
atom4139 = atom4138+atom867*atom1210;
atom4143 = atom867*atom1209+atom863*atom1210;
atom4152 = atom1193*atom869+atom1180*atom4139+atom4143*atom1190;
atom8284 = (atom4143*atom1184+atom4139*atom1178+atom1187*atom869)*atom2430+atom4152*atom2431;
atom62679 = atom62662*atom2431+atom62657*atom2430;
atom25584 = -atom863*atom50+atom862*atom49;
atom25596 = -atom49*atom863-atom862*atom50;
atom62682 = -atom25596*atom865;
atom62691 = atom62682*atom1210+atom1209*atom25584;
atom62685 = atom62682*atom1209-atom25584*atom1210;
atom62680 = -atom25596*atom864;
atom62687 = atom1172*atom62680-atom1173*atom62685;
atom62693 = -atom1175*atom62687+atom62691*atom1174;
atom62697 = atom1172*atom62685+atom62680*atom1173;
atom62699 = atom1176*atom62693+atom1177*atom62697;
atom62703 = atom1175*atom62691+atom62687*atom1174;
atom62709 = -atom1177*atom62693+atom1176*atom62697;
atom62712 = -atom22017*atom62709+atom22015*atom62703;
atom62714 = atom62712*atom2431-(atom22016*atom62703-atom22017*atom62699)*atom2430;
atom62788 = -C11RRR*epsiRRR*G_elastic*aRRR*atom2431*bRRR;
atom2317 = uR_RRR-lR_RRR;
atom2318 = atom2317*aR_RRR;
atom2319 = atom2318+bR_RRR;
atom2388 = cR_RRR+atom2317*(atom2318+atom2319)+atom2317*atom2319;
atom2434 = (1+atom2388^2)^(-1/2);
atom62789 = -epsiRRR*C22RRR*atom2434*G_elastic*aRRR*bRRR;
atom2435 = atom2434*atom2388;
atom52596 = atom22006*atom1176-atom22001*atom1177;
atom62721 = (atom22016*atom1176+atom52596-atom1177*atom22015)*atom2435+atom62625*atom2434;
atom62791 = sqrt(aRRR*bRRR);
atom2389 = atom2385*atom2388;
atom2390 = -atom2383*atom2388;
atom2423 = (atom2390^2+atom2389^2+atom2421)^(-1/2);
atom2424 = atom2423*atom2389;
atom2425 = atom2423*atom2390;
atom62792 = -epsiRRR*atom2434*G_elastic*aRRR*C23RRR*bRRR*atom62791;
atom62762 = atom2425*atom1177+atom1176*atom2424;
atom52605 = atom22006*atom1178-atom1180*atom22001;
atom62728 = atom62636*atom2434+(atom22016*atom1178-atom1180*atom22015+atom52605)*atom2435;
atom2426 = atom2423*atom2383;
atom62767 = atom1180*atom2425+atom1175*atom2426+atom2424*atom1178;
atom62729 = atom62641*atom2434;
atom62771 = atom2425*atom60839+atom2424*atom60833+atom1195*atom2426;
atom26165 = -atom21995*atom1194+atom1175*atom21992;
atom62736 = atom2434*atom62652+(atom22016*atom60833-atom60839*atom22015+atom26165)*atom2435;
atom8324 = atom1193*atom2434+atom1195*atom2435;
atom62739 = -atom60865*atom22015+atom22016*atom60858;
atom52627 = atom1195*atom52512+atom52505*atom1194+atom1175*atom52509;
atom62743 = atom2434*atom62663+(atom62739+atom52627)*atom2435;
atom62776 = atom2425*atom60865+atom2426*atom60849+atom60858*atom2424;
atom62900 = atom62776*atom62792;
atom62781 = atom22942*atom2426+atom60877*atom2424+atom60884*atom2425;
atom26244 = atom1194*atom26233+atom1175*atom26224-atom1195*atom21985;
atom62750 = (atom22016*atom60877+atom26244-atom60884*atom22015)*atom2435+atom2434*atom62674;
atom8333 = (atom4139*atom1175+atom1195*atom869+atom4143*atom1194)*atom2435+atom4152*atom2434;
atom62753 = atom2434*atom62662+atom62739*atom2435;
atom62786 = atom62709*atom2424+atom2426*atom62703+atom2425*atom62699;
atom62759 = atom62712*atom2434+(atom22016*atom62709-atom62699*atom22015)*atom2435;
atom62793 = -epsiRRR*C22RRR*G_elastic*aRRR*bRRR*atom2435;
atom62794 = -epsiRRR*G_elastic*aRRR*C23RRR*bRRR*atom2435*atom62791;
atom62935 = atom62776*atom62794;
atom22860 = atom1172*atom1209;
atom22966 = atom864*atom22860+atom22964;
atom22970 = atom864*atom1173+atom22860*atom865;
atom23996 = atom862*atom22861+atom22970*atom863;
atom23999 = atom862*atom22970-atom22861*atom863;
atom25575 = atom23999*atom50+atom23996*atom49;
atom25587 = -atom23996*atom50+atom23999*atom49;
atom59445 = atom22966*atom1243+atom1325*atom25587+atom25575*atom1322;
atom59458 = atom25587*atom1313+atom1231*atom22966+atom25575*atom1310;
atom59461 = -atom22017*atom59458+atom59445*atom22015+atom52551;
atom59450 = atom1319*atom25587+atom22966*atom1237+atom1316*atom25575;
atom62795 = -C11RRR*epsiRRR*G_elastic*aRRR*bRRR*((atom22017*atom59450+atom52415-atom22016*atom59445)*atom2430+atom59461*atom2431);
atom62545 = atom2434*atom59461+(atom22016*atom59458+atom52596-atom59450*atom22015)*atom2435;
atom62550 = atom1243*atom2426+atom1231*atom2424+atom2425*atom1237;
atom21939 = atom2426*atom1322+atom1316*atom2425+atom2424*atom1310;
atom62558 = atom2426*atom1325+atom1319*atom2425+atom2424*atom1313;
atom62560 = atom62558*atom25587+atom21939*atom25575+atom22966*atom62550;
atom62798 = epsiRRR*atom62560*G_elastic*aRRR*C23RRR*bRRR*atom62791-epsiRRR*atom62545*C22RRR*G_elastic*aRRR*bRRR;
atom62800 = aRRR^2;
atom62801 = bRRR^2;
atom62803 = -epsiRRR*atom62560*G_elastic*atom62800*C33RRR*atom62801-epsiRRR*atom62545*G_elastic*aRRR*C23RRR*bRRR*atom62791;
atom62977 = atom62776*atom62803;
atom22971 = atom865*atom1210;
atom24003 = atom4138+atom862*atom22971;
atom24001 = atom862*atom1209+atom863*atom22971;
atom25590 = -atom24001*atom50+atom24003*atom49;
atom25578 = atom49*atom24001+atom24003*atom50;
atom59492 = atom25590*atom1313+atom25578*atom1310+atom1231*atom22967;
atom59479 = atom1243*atom22967+atom25578*atom1322+atom25590*atom1325;
atom59495 = atom59479*atom22015+atom52560-atom22017*atom59492;
atom59484 = atom22967*atom1237+atom1319*atom25590+atom1316*atom25578;
atom62804 = -C11RRR*epsiRRR*(atom2431*atom59495+(atom52439+atom59484*atom22017-atom22016*atom59479)*atom2430)*G_elastic*aRRR*bRRR;
atom62566 = atom2434*atom59495-(atom59484*atom22015-atom52605-atom22016*atom59492)*atom2435;
atom62571 = atom62550*atom22967+atom62558*atom25590+atom25578*atom21939;
atom62807 = epsiRRR*atom62571*G_elastic*aRRR*C23RRR*bRRR*atom62791-epsiRRR*C22RRR*G_elastic*aRRR*atom62566*bRRR;
atom62810 = -epsiRRR*atom62571*G_elastic*atom62800*C33RRR*atom62801-epsiRRR*G_elastic*aRRR*atom62566*C23RRR*bRRR*atom62791;
atom63027 = atom62776*atom62810;
atom59512 = atom1243^2+atom1325^2+atom1322^2;
atom59516 = atom1319*atom1325+atom1316*atom1322+atom1243*atom1237;
atom59523 = atom1325*atom1313+atom1231*atom1243+atom1322*atom1310;
atom59526 = atom22001-atom22017*atom59523+atom22015*atom59512;
atom62811 = C11RRR*epsiRRR*G_elastic*aRRR*((atom22006+atom22016*atom59512-atom59516*atom22017)*atom2430-atom2431*atom59526)*bRRR;
atom62577 = atom2434*atom59526+(atom22016*atom59523-atom59516*atom22015)*atom2435;
atom62582 = atom21939*atom1322+atom62558*atom1325+atom1243*atom62550;
atom62814 = -epsiRRR*C22RRR*G_elastic*aRRR*atom62577*bRRR+epsiRRR*atom62582*G_elastic*aRRR*C23RRR*bRRR*atom62791;
atom62817 = -epsiRRR*G_elastic*aRRR*atom62577*C23RRR*bRRR*atom62791-epsiRRR*atom62582*G_elastic*atom62800*C33RRR*atom62801;
atom63077 = atom62776*atom62817;
atom25581 = atom49*atom868+atom50*atom869;
atom25593 = atom49*atom869-atom868*atom50;
atom59542 = -atom1243*atom865+atom25593*atom1325+atom25581*atom1322;
atom59546 = -atom865*atom1237+atom1316*atom25581+atom1319*atom25593;
atom59553 = atom25581*atom1310+atom25593*atom1313-atom1231*atom865;
atom59556 = atom59542*atom22015+atom26169-atom22017*atom59553;
atom62818 = -C11RRR*epsiRRR*G_elastic*aRRR*bRRR*(atom2431*atom59556+(atom26287+atom22017*atom59546-atom22016*atom59542)*atom2430);
atom62588 = (atom22016*atom59553-atom59546*atom22015+atom26165)*atom2435+atom2434*atom59556;
atom62593 = atom21939*atom25581-atom62550*atom865+atom62558*atom25593;
atom62821 = epsiRRR*atom62593*G_elastic*aRRR*C23RRR*bRRR*atom62791-epsiRRR*atom62588*C22RRR*G_elastic*aRRR*bRRR;
atom62824 = -epsiRRR*atom62593*G_elastic*atom62800*C33RRR*atom62801-epsiRRR*atom62588*G_elastic*aRRR*C23RRR*bRRR*atom62791;
atom63127 = atom62776*atom62824;
atom62825 = -C11RRR*atom8275*epsiRRR*G_elastic*aRRR*bRRR;
atom62826 = -epsiRRR*C22RRR*G_elastic*aRRR*atom8324*bRRR;
atom62827 = -epsiRRR*G_elastic*aRRR*atom8324*C23RRR*bRRR*atom62791;
atom63177 = atom62776*atom62827;
atom59573 = -atom22016*atom1243+atom22017*atom1237;
atom59577 = -atom1231*atom22017+atom1243*atom22015;
atom59578 = atom52581+atom59577;
atom62828 = -C11RRR*((atom59573+atom52514)*atom2430+atom59578*atom2431)*epsiRRR*G_elastic*aRRR*bRRR;
atom59581 = atom22016*atom1231-atom22015*atom1237;
atom62599 = atom2434*atom59578+(atom59581+atom52627)*atom2435;
atom62830 = epsiRRR*G_elastic*aRRR*C23RRR*atom62550*bRRR*atom62791;
atom62831 = atom62830-epsiRRR*C22RRR*G_elastic*aRRR*bRRR*atom62599;
atom62833 = -epsiRRR*G_elastic*atom62800*atom62550*C33RRR*atom62801;
atom62834 = -epsiRRR*G_elastic*aRRR*C23RRR*bRRR*atom62599*atom62791+atom62833;
atom63227 = atom62834*atom62776;
atom59597 = atom1316*atom25584+atom25596*atom1319;
atom59593 = atom25596*atom1325+atom1322*atom25584;
atom59604 = atom25596*atom1313+atom25584*atom1310;
atom59607 = atom59593*atom22015-atom59604*atom22017+atom26250;
atom62835 = -C11RRR*epsiRRR*(atom59607*atom2431-(atom22016*atom59593-atom26315-atom22017*atom59597)*atom2430)*G_elastic*aRRR*bRRR;
atom62608 = atom25596*atom62558+atom21939*atom25584;
atom62605 = (atom26244+atom59604*atom22016-atom59597*atom22015)*atom2435+atom59607*atom2434;
atom62838 = epsiRRR*G_elastic*aRRR*atom62608*C23RRR*bRRR*atom62791-epsiRRR*C22RRR*G_elastic*aRRR*bRRR*atom62605;
atom62841 = -epsiRRR*G_elastic*atom62800*atom62608*C33RRR*atom62801-epsiRRR*G_elastic*aRRR*C23RRR*bRRR*atom62605*atom62791;
atom63277 = atom62776*atom62841;
atom62842 = -C11RRR*epsiRRR*G_elastic*aRRR*bRRR*atom8284;
atom62843 = -epsiRRR*atom8333*C22RRR*G_elastic*aRRR*bRRR;
atom62844 = -epsiRRR*atom8333*G_elastic*aRRR*C23RRR*bRRR*atom62791;
atom63327 = atom62776*atom62844;
atom62845 = -C11RRR*epsiRRR*G_elastic*aRRR*(atom2431*atom59577+atom59573*atom2430)*bRRR;
atom62614 = atom2435*atom59581+atom2434*atom59577;
atom62847 = -epsiRRR*C22RRR*G_elastic*aRRR*atom62614*bRRR+atom62830;
atom62849 = -epsiRRR*G_elastic*aRRR*C23RRR*atom62614*bRRR*atom62791+atom62833;
atom63377 = atom62776*atom62849;
atom59632 = -atom22017*atom1310+atom1322*atom22015;
atom62850 = -C11RRR*epsiRRR*G_elastic*aRRR*(atom2431*atom59632-(atom22016*atom1322-atom1316*atom22017)*atom2430)*bRRR;
atom62620 = (atom22016*atom1310-atom1316*atom22015)*atom2435+atom2434*atom59632;
atom62853 = epsiRRR*G_elastic*aRRR*atom21939*C23RRR*bRRR*atom62791-epsiRRR*atom62620*C22RRR*G_elastic*aRRR*bRRR;
atom62856 = -epsiRRR*atom62620*G_elastic*aRRR*C23RRR*bRRR*atom62791-epsiRRR*G_elastic*atom62800*atom21939*C33RRR*atom62801;
atom63427 = atom62776*atom62856;

CKRRR_ = [atom2430*atom62787 , atom2431*atom62787 , 0 , atom62627*atom62787 , atom62638*atom62787 , atom62643*atom62787 , atom62654*atom62787 , 0 , atom8275*atom62787 , atom62787*atom62665 , atom62676*atom62787 , 0 , 0 , 0 , 0 , 0 , 0 , atom8284*atom62787 , atom62679*atom62787 , atom62714*atom62787 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom62788*atom2430 , atom62788*atom2431+atom2434*atom62789 , atom62789*atom2435 , atom62789*atom62721+atom62627*atom62788+atom62792*atom62762 , atom62728*atom62789+atom62767*atom62792+atom62788*atom62638 , atom62792*atom2426+atom62789*atom62729+atom62788*atom62643 , atom62788*atom62654+atom62792*atom62771+atom62789*atom62736 , 0 , atom62789*atom8324+atom62788*atom8275 , atom62788*atom62665+atom62743*atom62789+atom62900 , atom62781*atom62792+atom62789*atom62750+atom62788*atom62676 , 0 , 0 , 0 , 0 , 0 , 0 , atom62788*atom8284+atom8333*atom62789 , atom62788*atom62679+atom62900+atom62753*atom62789 , atom62789*atom62759+atom62786*atom62792+atom62788*atom62714 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , atom2434*atom62793 , atom2435*atom62793 , atom62721*atom62793+atom62762*atom62794 , atom62728*atom62793+atom62767*atom62794 , atom2426*atom62794+atom62729*atom62793 , atom62736*atom62793+atom62771*atom62794 , 0 , atom8324*atom62793 , atom62935+atom62743*atom62793 , atom62781*atom62794+atom62750*atom62793 , 0 , 0 , 0 , 0 , 0 , 0 , atom8333*atom62793 , atom62935+atom62753*atom62793 , atom62786*atom62794+atom62759*atom62793 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom62795*atom2430 , atom62795*atom2431+atom2434*atom62798 , atom62798*atom2435 , atom62762*atom62803+atom62627*atom62795+atom62798*atom62721 , atom62767*atom62803+atom62638*atom62795+atom62728*atom62798 , atom62803*atom2426+atom62643*atom62795+atom62798*atom62729 , atom62654*atom62795+atom62803*atom62771+atom62736*atom62798 , 0 , atom8324*atom62798+atom8275*atom62795 , atom62743*atom62798+atom62977+atom62795*atom62665 , atom62781*atom62803+atom62750*atom62798+atom62795*atom62676 , 0 , 0 , 0 , 0 , 0 , 0 , atom8333*atom62798+atom62795*atom8284 , atom62753*atom62798+atom62795*atom62679+atom62977 , atom62786*atom62803+atom62714*atom62795+atom62798*atom62759 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom62804*atom2430 , atom2434*atom62807+atom62804*atom2431 , atom62807*atom2435 , atom62810*atom62762+atom62807*atom62721+atom62627*atom62804 , atom62804*atom62638+atom62810*atom62767+atom62728*atom62807 , atom62643*atom62804+atom62807*atom62729+atom62810*atom2426 , atom62810*atom62771+atom62654*atom62804+atom62736*atom62807 , 0 , atom8324*atom62807+atom8275*atom62804 , atom62743*atom62807+atom62804*atom62665+atom63027 , atom62750*atom62807+atom62804*atom62676+atom62781*atom62810 , 0 , 0 , 0 , 0 , 0 , 0 , atom8333*atom62807+atom62804*atom8284 , atom62804*atom62679+atom62753*atom62807+atom63027 , atom62804*atom62714+atom62807*atom62759+atom62786*atom62810 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom62811*atom2430 , atom2434*atom62814+atom62811*atom2431 , atom62814*atom2435 , atom62817*atom62762+atom62811*atom62627+atom62814*atom62721 , atom62728*atom62814+atom62767*atom62817+atom62811*atom62638 , atom62817*atom2426+atom62811*atom62643+atom62814*atom62729 , atom62814*atom62736+atom62811*atom62654+atom62817*atom62771 , 0 , atom62814*atom8324+atom62811*atom8275 , atom63077+atom62811*atom62665+atom62743*atom62814 , atom62781*atom62817+atom62811*atom62676+atom62750*atom62814 , 0 , 0 , 0 , 0 , 0 , 0 , atom62811*atom8284+atom8333*atom62814 , atom63077+atom62753*atom62814+atom62811*atom62679 , atom62786*atom62817+atom62814*atom62759+atom62811*atom62714 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom62818*atom2430 , atom62818*atom2431+atom2434*atom62821 , atom62821*atom2435 , atom62821*atom62721+atom62627*atom62818+atom62824*atom62762 , atom62824*atom62767+atom62818*atom62638+atom62728*atom62821 , atom62821*atom62729+atom62824*atom2426+atom62818*atom62643 , atom62736*atom62821+atom62824*atom62771+atom62818*atom62654 , 0 , atom8324*atom62821+atom62818*atom8275 , atom62743*atom62821+atom62818*atom62665+atom63127 , atom62750*atom62821+atom62818*atom62676+atom62781*atom62824 , 0 , 0 , 0 , 0 , 0 , 0 , atom8333*atom62821+atom62818*atom8284 , atom62753*atom62821+atom62818*atom62679+atom63127 , atom62824*atom62786+atom62821*atom62759+atom62818*atom62714 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom62825*atom2430 , atom62826*atom2434+atom2431*atom62825 , atom62826*atom2435 , atom62826*atom62721+atom62627*atom62825+atom62827*atom62762 , atom62827*atom62767+atom62826*atom62728+atom62638*atom62825 , atom62826*atom62729+atom62827*atom2426+atom62643*atom62825 , atom62654*atom62825+atom62826*atom62736+atom62827*atom62771 , 0 , atom8275*atom62825+atom62826*atom8324 , atom62825*atom62665+atom62826*atom62743+atom63177 , atom62826*atom62750+atom62781*atom62827+atom62825*atom62676 , 0 , 0 , 0 , 0 , 0 , 0 , atom8284*atom62825+atom62826*atom8333 , atom62679*atom62825+atom63177+atom62826*atom62753 , atom62827*atom62786+atom62826*atom62759+atom62714*atom62825 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom62828*atom2430 , atom2431*atom62828+atom2434*atom62831 , atom62831*atom2435 , atom62831*atom62721+atom62834*atom62762+atom62627*atom62828 , atom62728*atom62831+atom62638*atom62828+atom62834*atom62767 , atom62834*atom2426+atom62831*atom62729+atom62643*atom62828 , atom62736*atom62831+atom62654*atom62828+atom62834*atom62771 , 0 , atom8275*atom62828+atom8324*atom62831 , atom63227+atom62828*atom62665+atom62743*atom62831 , atom62750*atom62831+atom62828*atom62676+atom62834*atom62781 , 0 , 0 , 0 , 0 , 0 , 0 , atom8333*atom62831+atom62828*atom8284 , atom63227+atom62679*atom62828+atom62753*atom62831 , atom62714*atom62828+atom62831*atom62759+atom62834*atom62786 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom62835*atom2430 , atom2431*atom62835+atom2434*atom62838 , atom62838*atom2435 , atom62762*atom62841+atom62838*atom62721+atom62627*atom62835 , atom62638*atom62835+atom62728*atom62838+atom62767*atom62841 , atom62643*atom62835+atom2426*atom62841+atom62838*atom62729 , atom62771*atom62841+atom62736*atom62838+atom62654*atom62835 , 0 , atom8324*atom62838+atom8275*atom62835 , atom62743*atom62838+atom62835*atom62665+atom63277 , atom62835*atom62676+atom62750*atom62838+atom62781*atom62841 , 0 , 0 , 0 , 0 , 0 , 0 , atom8333*atom62838+atom62835*atom8284 , atom62753*atom62838+atom63277+atom62679*atom62835 , atom62838*atom62759+atom62714*atom62835+atom62786*atom62841 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom62842*atom2430 , atom2434*atom62843+atom62842*atom2431 , atom62843*atom2435 , atom62843*atom62721+atom62627*atom62842+atom62762*atom62844 , atom62767*atom62844+atom62728*atom62843+atom62638*atom62842 , atom62843*atom62729+atom62844*atom2426+atom62643*atom62842 , atom62654*atom62842+atom62843*atom62736+atom62844*atom62771 , 0 , atom8275*atom62842+atom8324*atom62843 , atom62743*atom62843+atom63327+atom62842*atom62665 , atom62750*atom62843+atom62781*atom62844+atom62842*atom62676 , 0 , 0 , 0 , 0 , 0 , 0 , atom8333*atom62843+atom62842*atom8284 , atom62842*atom62679+atom62753*atom62843+atom63327 , atom62786*atom62844+atom62843*atom62759+atom62714*atom62842 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom62845*atom2430 , atom2431*atom62845+atom2434*atom62847 , atom62847*atom2435 , atom62762*atom62849+atom62627*atom62845+atom62847*atom62721 , atom62638*atom62845+atom62767*atom62849+atom62728*atom62847 , atom62643*atom62845+atom2426*atom62849+atom62847*atom62729 , atom62654*atom62845+atom62771*atom62849+atom62736*atom62847 , 0 , atom8324*atom62847+atom8275*atom62845 , atom62743*atom62847+atom62845*atom62665+atom63377 , atom62750*atom62847+atom62845*atom62676+atom62781*atom62849 , 0 , 0 , 0 , 0 , 0 , 0 , atom62845*atom8284+atom8333*atom62847 , atom62753*atom62847+atom62679*atom62845+atom63377 , atom62714*atom62845+atom62847*atom62759+atom62786*atom62849 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom62850*atom2430 , atom2434*atom62853+atom62850*atom2431 , atom62853*atom2435 , atom62762*atom62856+atom62627*atom62850+atom62853*atom62721 , atom62728*atom62853+atom62638*atom62850+atom62767*atom62856 , atom62856*atom2426+atom62853*atom62729+atom62643*atom62850 , atom62654*atom62850+atom62853*atom62736+atom62771*atom62856 , 0 , atom8275*atom62850+atom8324*atom62853 , atom63427+atom62850*atom62665+atom62743*atom62853 , atom62781*atom62856+atom62850*atom62676+atom62750*atom62853 , 0 , 0 , 0 , 0 , 0 , 0 , atom8333*atom62853+atom62850*atom8284 , atom63427+atom62850*atom62679+atom62753*atom62853 , atom62714*atom62850+atom62853*atom62759+atom62786*atom62856 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0];

%endfunction
