function CKFFR_ = CKFFR(q,qaux,dq,time,param)

xWAG = q( 1 ); 
yWAG = q( 2 ); 
zWAG = q( 3 ); 
aWAG = q( 4 ); 
bWAG = q( 5 ); 
cWAG = q( 6 ); 
cRSLD = q( 7 ); 
cFSLD = q( 8 ); 
zRBOG = q( 9 ); 
aRBOG = q( 10 ); 
bRBOG = q( 11 ); 
zFBOG = q( 12 ); 
aFBOG = q( 13 ); 
bFBOG = q( 14 ); 
zRWHSF = q( 15 ); 
aRWHSF = q( 16 ); 
bRWHSF = q( 17 ); 
zRWHSR = q( 18 ); 
aRWHSR = q( 19 ); 
bRWHSR = q( 20 ); 
zFWHSF = q( 21 ); 
aFWHSF = q( 22 ); 
bFWHSF = q( 23 ); 
zFWHSR = q( 24 ); 
aFWHSR = q( 25 ); 
bFWHSR = q( 26 ); 
bRAXBFL = q( 27 ); 
bRAXBFR = q( 28 ); 
bRAXBRL = q( 29 ); 
bRAXBRR = q( 30 ); 
bFAXBFL = q( 31 ); 
bFAXBFR = q( 32 ); 
bFAXBRL = q( 33 ); 
bFAXBRR = q( 34 ); 
xRMOTF = q( 35 ); 
yRMOTF = q( 36 ); 
zRMOTF = q( 37 ); 
bRMOTF = q( 38 ); 
xRMOTR = q( 39 ); 
yRMOTR = q( 40 ); 
zRMOTR = q( 41 ); 
bRMOTR = q( 42 ); 
bRROTF = q( 43 ); 
bRROTR = q( 44 ); 

thetaW_RFR = qaux( 1 ); 
uW_RFR = qaux( 2 ); 
uR_RFR = qaux( 3 ); 
xR_RFR = qaux( 4 ); 
thetaW_RFL = qaux( 5 ); 
uW_RFL = qaux( 6 ); 
uR_RFL = qaux( 7 ); 
xR_RFL = qaux( 8 ); 
thetaW_RRR = qaux( 9 ); 
uW_RRR = qaux( 10 ); 
uR_RRR = qaux( 11 ); 
xR_RRR = qaux( 12 ); 
thetaW_RRL = qaux( 13 ); 
uW_RRL = qaux( 14 ); 
uR_RRL = qaux( 15 ); 
xR_RRL = qaux( 16 ); 
thetaW_FFR = qaux( 17 ); 
uW_FFR = qaux( 18 ); 
uR_FFR = qaux( 19 ); 
xR_FFR = qaux( 20 ); 
thetaW_FFL = qaux( 21 ); 
uW_FFL = qaux( 22 ); 
uR_FFL = qaux( 23 ); 
xR_FFL = qaux( 24 ); 
thetaW_FRR = qaux( 25 ); 
uW_FRR = qaux( 26 ); 
uR_FRR = qaux( 27 ); 
xR_FRR = qaux( 28 ); 
thetaW_FRL = qaux( 29 ); 
uW_FRL = qaux( 30 ); 
uR_FRL = qaux( 31 ); 
xR_FRL = qaux( 32 ); 

dxWAG = dq( 1 ); 
dyWAG = dq( 2 ); 
dzWAG = dq( 3 ); 
daWAG = dq( 4 ); 
dbWAG = dq( 5 ); 
dcWAG = dq( 6 ); 
dcRSLD = dq( 7 ); 
dcFSLD = dq( 8 ); 
dzRBOG = dq( 9 ); 
daRBOG = dq( 10 ); 
dbRBOG = dq( 11 ); 
dzFBOG = dq( 12 ); 
daFBOG = dq( 13 ); 
dbFBOG = dq( 14 ); 
dzRWHSF = dq( 15 ); 
daRWHSF = dq( 16 ); 
dbRWHSF = dq( 17 ); 
dzRWHSR = dq( 18 ); 
daRWHSR = dq( 19 ); 
dbRWHSR = dq( 20 ); 
dzFWHSF = dq( 21 ); 
daFWHSF = dq( 22 ); 
dbFWHSF = dq( 23 ); 
dzFWHSR = dq( 24 ); 
daFWHSR = dq( 25 ); 
dbFWHSR = dq( 26 ); 
dbRAXBFL = dq( 27 ); 
dbRAXBFR = dq( 28 ); 
dbRAXBRL = dq( 29 ); 
dbRAXBRR = dq( 30 ); 
dbFAXBFL = dq( 31 ); 
dbFAXBFR = dq( 32 ); 
dbFAXBRL = dq( 33 ); 
dbFAXBRR = dq( 34 ); 
dxRMOTF = dq( 35 ); 
dyRMOTF = dq( 36 ); 
dzRMOTF = dq( 37 ); 
dbRMOTF = dq( 38 ); 
dxRMOTR = dq( 39 ); 
dyRMOTR = dq( 40 ); 
dzRMOTR = dq( 41 ); 
dbRMOTR = dq( 42 ); 
dbRROTF = dq( 43 ); 
dbRROTR = dq( 44 ); 

t= time ;

g = param( 1 ); 
L_OBOG_OAXBy = param( 2 ); 
L_OBOG_OAXBz = param( 3 ); 
L_OBOG_OSUSPy = param( 4 ); 
L_OBOG_OSUSPx = param( 5 ); 
L_OBOG_OSUSPz = param( 6 ); 
L_OBOG_OWHS = param( 7 ); 
L_OBOG_P1BOG = param( 8 ); 
L_MOT = param( 9 ); 
L_GEAR = param( 10 ); 
L_AXB1 = param( 11 ); 
L_AXB2 = param( 12 ); 
L_SUSP = param( 13 ); 
L_WHS = param( 14 ); 
L_RAIL = param( 15 ); 
L_WAG = param( 16 ); 
L_SUSPBEAM1 = param( 17 ); 
L_SUSPBEAM2 = param( 18 ); 
L_SLDx = param( 19 ); 
L_SLDy = param( 20 ); 
b_pend = param( 21 ); 
a_pend = param( 22 ); 
L0_1 = param( 23 ); 
L0_2 = param( 24 ); 
m_WAG = param( 25 ); 
I_WAGx = param( 26 ); 
I_WAGy = param( 27 ); 
I_WAGz = param( 28 ); 
xCGWAG = param( 29 ); 
yCGWAG = param( 30 ); 
zCGWAG = param( 31 ); 
G_BOGz = param( 32 ); 
m_BOG = param( 33 ); 
I_BOGx = param( 34 ); 
I_BOGy = param( 35 ); 
I_BOGz = param( 36 ); 
m_MOT = param( 37 ); 
I_MOTx = param( 38 ); 
I_MOTy = param( 39 ); 
I_MOTz = param( 40 ); 
m_ROT = param( 41 ); 
I_ROTx = param( 42 ); 
I_ROTy = param( 43 ); 
I_ROTz = param( 44 ); 
m_WHS = param( 45 ); 
I_WHSx = param( 46 ); 
I_WHSy = param( 47 ); 
I_WHSz = param( 48 ); 
I_CORy = param( 49 ); 
m_AXB = param( 50 ); 
I_AXBx = param( 51 ); 
I_AXBy = param( 52 ); 
I_AXBz = param( 53 ); 
m_SLD = param( 54 ); 
I_SLDx = param( 55 ); 
I_SLDy = param( 56 ); 
I_SLDz = param( 57 ); 
K_SSl = param( 58 ); 
C_SSl = param( 59 ); 
C_SSr = param( 60 ); 
K_SSr = param( 61 ); 
Kgear = param( 62 ); 
Cgear = param( 63 ); 
alpha_gear = param( 64 ); 
zROT = param( 65 ); 
zWHS = param( 66 ); 
K_S1 = param( 67 ); 
C_S1 = param( 68 ); 
K_S2 = param( 69 ); 
C_S2 = param( 70 ); 
aW_RFR = param( 71 ); 
bW_RFR = param( 72 ); 
cW_RFR = param( 73 ); 
dW_RFR = param( 74 ); 
lW_RFR = param( 75 ); 
aR_RFR = param( 76 ); 
bR_RFR = param( 77 ); 
cR_RFR = param( 78 ); 
dR_RFR = param( 79 ); 
lR_RFR = param( 80 ); 
RFRas = param( 81 ); 
RFRbs = param( 82 ); 
RFRcs = param( 83 ); 
RFRds = param( 84 ); 
RFRes = param( 85 ); 
RFRfs = param( 86 ); 
RFRstas = param( 87 ); 
RFRends = param( 88 ); 
irrRFRz = param( 89 ); 
aW_RFL = param( 90 ); 
bW_RFL = param( 91 ); 
cW_RFL = param( 92 ); 
dW_RFL = param( 93 ); 
lW_RFL = param( 94 ); 
aR_RFL = param( 95 ); 
bR_RFL = param( 96 ); 
cR_RFL = param( 97 ); 
dR_RFL = param( 98 ); 
lR_RFL = param( 99 ); 
RFLas = param( 100 ); 
RFLbs = param( 101 ); 
RFLcs = param( 102 ); 
RFLds = param( 103 ); 
RFLes = param( 104 ); 
RFLfs = param( 105 ); 
RFLstas = param( 106 ); 
RFLends = param( 107 ); 
irrRFLz = param( 108 ); 
aW_RRR = param( 109 ); 
bW_RRR = param( 110 ); 
cW_RRR = param( 111 ); 
dW_RRR = param( 112 ); 
lW_RRR = param( 113 ); 
aR_RRR = param( 114 ); 
bR_RRR = param( 115 ); 
cR_RRR = param( 116 ); 
dR_RRR = param( 117 ); 
lR_RRR = param( 118 ); 
RRRas = param( 119 ); 
RRRbs = param( 120 ); 
RRRcs = param( 121 ); 
RRRds = param( 122 ); 
RRRes = param( 123 ); 
RRRfs = param( 124 ); 
RRRstas = param( 125 ); 
RRRends = param( 126 ); 
irrRRRz = param( 127 ); 
aW_RRL = param( 128 ); 
bW_RRL = param( 129 ); 
cW_RRL = param( 130 ); 
dW_RRL = param( 131 ); 
lW_RRL = param( 132 ); 
aR_RRL = param( 133 ); 
bR_RRL = param( 134 ); 
cR_RRL = param( 135 ); 
dR_RRL = param( 136 ); 
lR_RRL = param( 137 ); 
RRLas = param( 138 ); 
RRLbs = param( 139 ); 
RRLcs = param( 140 ); 
RRLds = param( 141 ); 
RRLes = param( 142 ); 
RRLfs = param( 143 ); 
RRLstas = param( 144 ); 
RRLends = param( 145 ); 
irrRRLz = param( 146 ); 
aW_FFR = param( 147 ); 
bW_FFR = param( 148 ); 
cW_FFR = param( 149 ); 
dW_FFR = param( 150 ); 
lW_FFR = param( 151 ); 
aR_FFR = param( 152 ); 
bR_FFR = param( 153 ); 
cR_FFR = param( 154 ); 
dR_FFR = param( 155 ); 
lR_FFR = param( 156 ); 
FFRas = param( 157 ); 
FFRbs = param( 158 ); 
FFRcs = param( 159 ); 
FFRds = param( 160 ); 
FFRes = param( 161 ); 
FFRfs = param( 162 ); 
FFRstas = param( 163 ); 
FFRends = param( 164 ); 
irrFFRz = param( 165 ); 
aW_FFL = param( 166 ); 
bW_FFL = param( 167 ); 
cW_FFL = param( 168 ); 
dW_FFL = param( 169 ); 
lW_FFL = param( 170 ); 
aR_FFL = param( 171 ); 
bR_FFL = param( 172 ); 
cR_FFL = param( 173 ); 
dR_FFL = param( 174 ); 
lR_FFL = param( 175 ); 
FFLas = param( 176 ); 
FFLbs = param( 177 ); 
FFLcs = param( 178 ); 
FFLds = param( 179 ); 
FFLes = param( 180 ); 
FFLfs = param( 181 ); 
FFLstas = param( 182 ); 
FFLends = param( 183 ); 
irrFFLz = param( 184 ); 
aW_FRR = param( 185 ); 
bW_FRR = param( 186 ); 
cW_FRR = param( 187 ); 
dW_FRR = param( 188 ); 
lW_FRR = param( 189 ); 
aR_FRR = param( 190 ); 
bR_FRR = param( 191 ); 
cR_FRR = param( 192 ); 
dR_FRR = param( 193 ); 
lR_FRR = param( 194 ); 
FRRas = param( 195 ); 
FRRbs = param( 196 ); 
FRRcs = param( 197 ); 
FRRds = param( 198 ); 
FRRes = param( 199 ); 
FRRfs = param( 200 ); 
FRRstas = param( 201 ); 
FRRends = param( 202 ); 
irrFRRz = param( 203 ); 
aW_FRL = param( 204 ); 
bW_FRL = param( 205 ); 
cW_FRL = param( 206 ); 
dW_FRL = param( 207 ); 
lW_FRL = param( 208 ); 
aR_FRL = param( 209 ); 
bR_FRL = param( 210 ); 
cR_FRL = param( 211 ); 
dR_FRL = param( 212 ); 
lR_FRL = param( 213 ); 
FRLas = param( 214 ); 
FRLbs = param( 215 ); 
FRLcs = param( 216 ); 
FRLds = param( 217 ); 
FRLes = param( 218 ); 
FRLfs = param( 219 ); 
FRLstas = param( 220 ); 
FRLends = param( 221 ); 
irrFRLz = param( 222 ); 
E_elastic = param( 223 ); 
nu_poisson = param( 224 ); 
G_elastic = param( 225 ); 
aRFR = param( 226 ); 
bRFR = param( 227 ); 
C11RFR = param( 228 ); 
C22RFR = param( 229 ); 
C23RFR = param( 230 ); 
C33RFR = param( 231 ); 
aRFL = param( 232 ); 
bRFL = param( 233 ); 
C11RFL = param( 234 ); 
C22RFL = param( 235 ); 
C23RFL = param( 236 ); 
C33RFL = param( 237 ); 
aRRR = param( 238 ); 
bRRR = param( 239 ); 
C11RRR = param( 240 ); 
C22RRR = param( 241 ); 
C23RRR = param( 242 ); 
C33RRR = param( 243 ); 
aRRL = param( 244 ); 
bRRL = param( 245 ); 
C11RRL = param( 246 ); 
C22RRL = param( 247 ); 
C23RRL = param( 248 ); 
C33RRL = param( 249 ); 
aFFR = param( 250 ); 
bFFR = param( 251 ); 
C11FFR = param( 252 ); 
C22FFR = param( 253 ); 
C23FFR = param( 254 ); 
C33FFR = param( 255 ); 
aFFL = param( 256 ); 
bFFL = param( 257 ); 
C11FFL = param( 258 ); 
C22FFL = param( 259 ); 
C23FFL = param( 260 ); 
C33FFL = param( 261 ); 
aFRR = param( 262 ); 
bFRR = param( 263 ); 
C11FRR = param( 264 ); 
C22FRR = param( 265 ); 
C23FRR = param( 266 ); 
C33FRR = param( 267 ); 
aFRL = param( 268 ); 
bFRL = param( 269 ); 
C11FRL = param( 270 ); 
C22FRL = param( 271 ); 
C23FRL = param( 272 ); 
C33FRL = param( 273 ); 
epsiRFR = param( 274 ); 
epsiRFL = param( 275 ); 
epsiRRR = param( 276 ); 
epsiRRL = param( 277 ); 
epsiFFR = param( 278 ); 
epsiFFL = param( 279 ); 
epsiFRR = param( 280 ); 
epsiFRL = param( 281 ); 

atom2834 = (FFRends-FFRstas)^(-1);
atom2836 = atom2834*(xR_FFR-FFRstas);
atom2838 = FFRbs+atom2836*FFRas;
atom2840 = FFRcs+atom2836*atom2838;
atom2842 = FFRds+atom2836*atom2840;
atom2847 = atom2834*FFRas;
atom2850 = atom2834*atom2838+atom2836*atom2847;
atom2853 = atom2834*atom2840+atom2836*atom2850;
atom2856 = atom2836*atom2853+atom2842*atom2834;
atom2871 = atom2834*atom2850;
atom2870 = atom2834*atom2853;
atom2881 = atom2834*atom2856;
atom2859 = atom2836*atom2856+atom2834*(FFRes+atom2836*atom2842);
atom2861 = 1+atom2859^2;
atom2862 = sqrt(atom2861);
atom2883 = 2*atom2881+2*atom2836*(atom2870+atom2836*(atom2871+atom2836*atom2834*atom2847));
atom2888 = -atom2862^(-2)*atom2859*atom2861^(-1/2)*atom2883;
atom2892 = 1+(0.5)*atom2888*atom2859*L_RAIL+(0.5)*atom2862^(-1)*atom2883*L_RAIL;
atom2894 = atom2859-(0.5)*atom2888*L_RAIL;
atom2930 = atom2892^2;
atom2938 = (atom2894^2+atom2930)^(-1/2);
atom2939 = atom2892*atom2938;
atom64596 = -aFFR*atom2939*G_elastic*bFFR*C11FFR*epsiFFR;
atom2940 = atom2894*atom2938;
atom1172 = cos(bWAG);
atom1174 = cos(aWAG);
atom1019 = sin(bFBOG);
atom1195 = atom1172*atom1174;
atom1173 = sin(bWAG);
atom1194 = -atom1173*atom1174;
atom1496 = cos(cFSLD);
atom1497 = sin(cFSLD);
atom1175 = sin(aWAG);
atom1018 = cos(bFBOG);
atom1512 = atom1194*atom1496+atom1497*atom1175;
atom2720 = uW_FFR-lW_FFR;
atom2726 = dW_FFR+(cW_FFR+(bW_FFR+aW_FFR*atom2720)*atom2720)*atom2720;
atom1530 = -atom1019*atom1195+atom1018*atom1512;
atom2727 = -sin(thetaW_FFR)*atom2726;
atom1016 = cos(aFBOG);
atom1533 = atom1018*atom1195+atom1019*atom1512;
atom1514 = atom1175*atom1496;
atom1515 = atom1514-atom1497*atom1194;
atom1017 = sin(aFBOG);
atom498 = sin(aFWHSF);
atom1551 = -atom1515*atom1017+atom1016*atom1533;
atom497 = cos(aFWHSF);
atom1548 = atom1533*atom1017+atom1515*atom1016;
atom1571 = atom497*atom1548+atom498*atom1551;
atom2729 = atom2726*cos(thetaW_FFR);
atom1574 = -atom498*atom1548+atom497*atom1551;
atom1702 = -(0.5)*L_WHS;
atom2730 = atom497*atom1702;
atom1022 = atom1018*atom1017;
atom2741 = -L_OBOG_OWHS*atom1019;
atom1023 = atom1018*atom1016;
atom2732 = atom498*atom1702+zFWHSF;
atom2746 = atom2741+zFBOG+atom2730*atom1022+atom1023*atom2732;
atom2733 = atom1018*L_OBOG_OWHS;
atom1021 = atom1019*atom1016;
atom2737 = atom1021*atom2732+atom2733+atom1019*atom2730*atom1017;
atom2740 = -atom2732*atom1017+atom1016*atom2730;
atom2752 = atom1497*atom2737+atom2740*atom1496;
atom0 = -1/2*L_WAG;
atom2753 = -atom1497*atom2740-atom0+atom2737*atom1496;
atom22217 = atom2741+atom1023*zFWHSF;
atom22218 = zFBOG+atom22217;
atom22214 = atom1021*zFWHSF+atom2733;
atom22215 = -zFWHSF*atom1017;
atom22221 = -atom1497*atom22215+atom22214*atom1496;
atom22225 = -atom0+atom22221;
atom22224 = atom1496*atom22215+atom1497*atom22214;
atom22240 = atom1194*atom22225+atom22218*atom1195+atom1175*atom22224;
atom1176 = cos(cWAG);
atom22246 = atom2753*atom1194+atom2746*atom1195+atom1571*uW_FFR+atom2729*atom1574-atom22240+atom1175*atom2752+atom1530*atom2727;
atom58338 = -atom1176*atom22240;
atom64408 = atom58338-atom1176*atom22246;
atom1177 = sin(cWAG);
atom58337 = atom22240*atom1177;
atom64413 = atom64408*atom2940+(atom58337+atom1177*atom22246)*atom2939;
atom1178 = -atom1177*atom1174;
atom1179 = atom1175*atom1177;
atom1184 = atom1172*atom1176-atom1173*atom1179;
atom1185 = atom1176*atom1173;
atom1187 = atom1172*atom1179+atom1185;
atom22230 = atom22225*atom1184+atom22218*atom1187+atom22224*atom1178;
atom1500 = atom1496*atom1184+atom1497*atom1178;
atom1521 = atom1019*atom1500+atom1018*atom1187;
atom1503 = atom1496*atom1178-atom1497*atom1184;
atom1539 = -atom1503*atom1017+atom1016*atom1521;
atom1536 = atom1521*atom1017+atom1503*atom1016;
atom1562 = atom497*atom1539-atom498*atom1536;
atom1559 = atom497*atom1536+atom498*atom1539;
atom1518 = atom1018*atom1500-atom1019*atom1187;
atom22244 = atom2752*atom1178+atom2746*atom1187+atom1559*uW_FFR+atom2753*atom1184-atom22230+atom2727*atom1518+atom2729*atom1562;
atom58348 = -atom22240*atom1178+atom1175*atom22230;
atom64417 = atom1175*atom22244+atom58348-atom22246*atom1178;
atom1181 = -atom1175*atom1176;
atom1191 = atom1177*atom1173;
atom1193 = atom1191+atom1172*atom1181;
atom1180 = atom1176*atom1174;
atom1190 = -atom1181*atom1173+atom1172*atom1177;
atom22235 = atom1193*atom22218+atom1180*atom22224+atom1190*atom22225;
atom1506 = atom1190*atom1496+atom1497*atom1180;
atom1527 = atom1019*atom1506+atom1193*atom1018;
atom1509 = atom1180*atom1496-atom1497*atom1190;
atom1545 = atom1527*atom1016-atom1017*atom1509;
atom1542 = atom1016*atom1509+atom1527*atom1017;
atom1568 = atom497*atom1545-atom498*atom1542;
atom1565 = atom497*atom1542+atom498*atom1545;
atom1524 = -atom1193*atom1019+atom1018*atom1506;
atom22245 = atom2753*atom1190+atom1180*atom2752+uW_FFR*atom1565+atom1524*atom2727+atom2729*atom1568-atom22235+atom2746*atom1193;
atom58345 = -atom1175*atom22235+atom1180*atom22240;
atom64424 = atom2939*(atom1180*atom22246-atom1175*atom22245+atom58345)+atom64417*atom2940;
atom64425 = atom22244+atom22230;
atom64429 = -atom2939*(atom22235+atom22245)+atom64425*atom2940;
atom3814 = -atom1175*atom1172;
atom60833 = -atom3814*atom1177+atom1185;
atom42760 = atom1180*atom22221-atom22224*atom1190;
atom64433 = -atom60833*atom22246+atom1195*atom22244+atom42760;
atom60839 = atom1191+atom1176*atom3814;
atom42906 = -atom22224*atom1184+atom22221*atom1178;
atom64440 = atom64433*atom2940-(atom1195*atom22245-atom60839*atom22246-atom42906)*atom2939;
atom8887 = atom1193*atom2940+atom2939*atom1187;
atom58356 = -atom1019*atom22214-atom1018*atom22217;
atom58358 = -atom1019*atom22215;
atom58360 = -atom58358*atom1496-atom1497*atom58356;
atom58364 = -atom1497*atom58358+atom58356*atom1496;
atom58367 = atom1018*atom22215;
atom41956 = atom1018*atom1496;
atom40896 = -atom1019*atom1173;
atom64448 = atom40896+atom41956*atom1172;
atom40899 = atom1497*atom1018;
atom64442 = -atom1172*atom1019-atom41956*atom1173;
atom64445 = atom40899*atom1174-atom1175*atom64442;
atom64461 = atom1176*atom64445+atom64448*atom1177;
atom64453 = atom64442*atom1174+atom1175*atom40899;
atom58369 = atom58360*atom1184+atom58364*atom1178+atom1187*atom58367;
atom64463 = -atom64453*atom22245+atom22246*atom64461;
atom64450 = atom1176*atom64448-atom64445*atom1177;
atom64455 = atom64453*atom22244-atom64450*atom22246;
atom58374 = atom1193*atom58367+atom58364*atom1180+atom1190*atom58360;
atom64456 = atom64455+atom58374;
atom64466 = atom64456*atom2940+atom2939*(atom58369+atom64463);
atom42824 = atom22217*atom1496;
atom42819 = atom1497*atom22217;
atom40806 = atom1497*atom1173;
atom40875 = atom40806*atom1174+atom1514;
atom40804 = -atom1497*atom1172;
atom64468 = atom1496*atom1174-atom1175*atom40806;
atom64471 = -atom1177*atom64468+atom1176*atom40804;
atom42841 = -atom1193*atom22214+atom1180*atom42819+atom42824*atom1190;
atom64475 = atom42841+atom40875*atom22244-atom64471*atom22246;
atom64480 = atom1176*atom64468+atom1177*atom40804;
atom42934 = atom42824*atom1184-atom22214*atom1187+atom1178*atom42819;
atom64485 = atom2939*(atom42934+atom64480*atom22246-atom40875*atom22245)+atom2940*atom64475;
atom6041 = atom1497*atom1017+atom1021*atom1496;
atom6036 = -atom1496*atom1017;
atom6037 = atom1497*atom1021+atom6036;
atom6044 = atom1193*atom1023+atom1190*atom6041+atom1180*atom6037;
atom8896 = atom6044*atom2940+atom2939*(atom1023*atom1187+atom6041*atom1184+atom6037*atom1178);
atom64488 = atom2939*atom64463+atom64455*atom2940;
atom42093 = -atom497*atom1017-atom498*atom1016;
atom64491 = -atom1019*atom42093;
atom42081 = -atom498*atom1017+atom497*atom1016;
atom64500 = atom1497*atom64491+atom42081*atom1496;
atom64494 = atom64491*atom1496-atom1497*atom42081;
atom64489 = -atom1018*atom42093;
atom64496 = atom1172*atom64489-atom1173*atom64494;
atom64512 = atom1175*atom64500+atom64496*atom1174;
atom64502 = -atom1175*atom64496+atom64500*atom1174;
atom64506 = atom1172*atom64494+atom1173*atom64489;
atom64508 = atom64506*atom1176-atom64502*atom1177;
atom64514 = -atom64508*atom22246+atom22244*atom64512;
atom64519 = atom1176*atom64502+atom64506*atom1177;
atom64523 = -atom2939*(atom64512*atom22245-atom64519*atom22246)+atom64514*atom2940;
atom64597 = -aFFR*G_elastic*bFFR*C11FFR*epsiFFR*atom2940;
atom2826 = uR_FFR-lR_FFR;
atom2827 = atom2826*aR_FFR;
atom2828 = bR_FFR+atom2827;
atom2897 = atom2828*atom2826+cR_FFR+atom2826*(atom2828+atom2827);
atom2943 = (1+atom2897^2)^(-1/2);
atom64598 = -C22FFR*aFFR*atom2943*G_elastic*bFFR*epsiFFR;
atom2944 = atom2943*atom2897;
atom64600 = sqrt(aFFR*bFFR);
atom2899 = -atom2892*atom2897;
atom2898 = atom2894*atom2897;
atom2932 = (atom2899^2+atom2930+atom2898^2)^(-1/2);
atom2934 = atom2899*atom2932;
atom2933 = atom2932*atom2898;
atom64601 = -aFFR*atom2943*C23FFR*G_elastic*bFFR*atom64600*epsiFFR;
atom64571 = atom2934*atom1177+atom1176*atom2933;
atom58341 = atom1176*atom22235-atom1177*atom22230;
atom64530 = (atom1176*atom22245+atom58341-atom22244*atom1177)*atom2944+atom2943*atom64408;
atom58351 = -atom1180*atom22230+atom22235*atom1178;
atom64537 = (atom58351+atom22245*atom1178-atom1180*atom22244)*atom2944+atom2943*atom64417;
atom2935 = atom2932*atom2892;
atom64576 = atom1180*atom2934+atom2933*atom1178+atom2935*atom1175;
atom64538 = atom2943*atom64425;
atom64580 = atom2933*atom60833+atom2935*atom1195+atom2934*atom60839;
atom42756 = atom1175*atom22221-atom22224*atom1194;
atom64545 = -(atom60839*atom22244-atom22245*atom60833-atom42756)*atom2944+atom2943*atom64433;
atom8936 = atom1193*atom2943+atom1195*atom2944;
atom64585 = atom2935*atom64453+atom64450*atom2933+atom2934*atom64461;
atom58379 = atom1194*atom58360+atom1195*atom58367+atom58364*atom1175;
atom64548 = -atom22244*atom64461+atom64450*atom22245;
atom64552 = (atom58379+atom64548)*atom2944+atom64456*atom2943;
atom64709 = atom64601*atom64585;
atom64590 = atom2934*atom64480+atom64471*atom2933+atom40875*atom2935;
atom42835 = atom1175*atom42819+atom42824*atom1194-atom22214*atom1195;
atom64559 = atom2943*atom64475+(atom42835+atom64471*atom22245-atom22244*atom64480)*atom2944;
atom8945 = atom2943*atom6044+(atom1175*atom6037+atom1194*atom6041+atom1023*atom1195)*atom2944;
atom64562 = atom2944*atom64548+atom2943*atom64455;
atom64595 = atom64508*atom2933+atom2934*atom64519+atom2935*atom64512;
atom64568 = atom2943*atom64514+(atom64508*atom22245-atom22244*atom64519)*atom2944;
atom64602 = -C22FFR*aFFR*G_elastic*bFFR*epsiFFR*atom2944;
atom64603 = -aFFR*C23FFR*G_elastic*bFFR*atom64600*epsiFFR*atom2944;
atom64744 = atom64585*atom64603;
atom40803 = atom1172*atom1496;
atom40902 = atom1019*atom40803+atom1018*atom1173;
atom41903 = -atom1017*atom40804+atom40902*atom1016;
atom41900 = atom40902*atom1017+atom1016*atom40804;
atom42072 = atom41900*atom497+atom41903*atom498;
atom40898 = atom1018*atom40803+atom40896;
atom42084 = -atom41900*atom498+atom497*atom41903;
atom59883 = atom42072*atom1571+atom42084*atom1574+atom1530*atom40898;
atom59897 = atom40898*atom1518+atom1562*atom42084+atom1559*atom42072;
atom59901 = atom59883*atom22244-atom59897*atom22246+atom58338;
atom59889 = atom40898*atom1524+atom42072*atom1565+atom42084*atom1568;
atom64604 = -aFFR*G_elastic*bFFR*C11FFR*(atom59901*atom2940-(atom59883*atom22245-atom58337-atom59889*atom22246)*atom2939)*epsiFFR;
atom64331 = atom2944*(atom59897*atom22245+atom58341-atom22244*atom59889)+atom59901*atom2943;
atom64343 = atom2933*atom1518+atom1530*atom2935+atom2934*atom1524;
atom22168 = atom1559*atom2933+atom2935*atom1571+atom2934*atom1565;
atom64336 = atom2935*atom1574+atom1562*atom2933+atom2934*atom1568;
atom64346 = atom22168*atom42072+atom64336*atom42084+atom40898*atom64343;
atom64607 = -C22FFR*aFFR*G_elastic*bFFR*atom64331*epsiFFR+aFFR*atom64346*C23FFR*G_elastic*bFFR*atom64600*epsiFFR;
atom64609 = aFFR^2;
atom64610 = bFFR^2;
atom64612 = -atom64346*G_elastic*atom64609*C33FFR*epsiFFR*atom64610-aFFR*C23FFR*G_elastic*bFFR*atom64600*atom64331*epsiFFR;
atom64786 = atom64612*atom64585;
atom40903 = atom1497*atom1019;
atom41907 = atom1016*atom40903+atom6036;
atom41905 = atom40903*atom1017+atom1016*atom1496;
atom42087 = atom497*atom41907-atom41905*atom498;
atom42075 = atom497*atom41905+atom498*atom41907;
atom59926 = atom1524*atom40899+atom42087*atom1568+atom42075*atom1565;
atom59920 = atom42087*atom1574+atom42075*atom1571+atom1530*atom40899;
atom59934 = atom40899*atom1518+atom1562*atom42087+atom42075*atom1559;
atom59938 = atom58348+atom59920*atom22244-atom59934*atom22246;
atom64613 = ((atom59920*atom22245-atom59926*atom22246-atom58345)*atom2939-atom59938*atom2940)*aFFR*G_elastic*bFFR*C11FFR*epsiFFR;
atom64352 = atom2944*(atom58351+atom59934*atom22245-atom22244*atom59926)+atom2943*atom59938;
atom64357 = atom64336*atom42087+atom22168*atom42075+atom64343*atom40899;
atom64616 = -C22FFR*aFFR*atom64352*G_elastic*bFFR*epsiFFR+aFFR*atom64357*C23FFR*G_elastic*bFFR*atom64600*epsiFFR;
atom64619 = -aFFR*C23FFR*atom64352*G_elastic*bFFR*atom64600*epsiFFR-atom64357*G_elastic*atom64609*C33FFR*epsiFFR*atom64610;
atom64836 = atom64619*atom64585;
atom59959 = atom1571*atom1565+atom1530*atom1524+atom1574*atom1568;
atom59955 = atom1530^2+atom1574^2+atom1571^2;
atom59965 = atom1562*atom1574+atom1559*atom1571+atom1530*atom1518;
atom59969 = -atom59965*atom22246+atom22244*atom59955+atom22230;
atom64620 = -aFFR*G_elastic*bFFR*C11FFR*(atom59969*atom2940+atom2939*(atom59959*atom22246-atom59955*atom22245-atom22235))*epsiFFR;
atom64363 = -atom2944*(atom59959*atom22244-atom59965*atom22245)+atom2943*atom59969;
atom64368 = atom22168*atom1571+atom64336*atom1574+atom1530*atom64343;
atom64623 = -C22FFR*aFFR*atom64363*G_elastic*bFFR*epsiFFR+atom64368*aFFR*C23FFR*G_elastic*bFFR*atom64600*epsiFFR;
atom64626 = -atom64368*G_elastic*atom64609*C33FFR*epsiFFR*atom64610-aFFR*C23FFR*atom64363*G_elastic*bFFR*atom64600*epsiFFR;
atom64886 = atom64626*atom64585;
atom42090 = atom497*atom1023-atom498*atom1022;
atom42078 = atom497*atom1022+atom1023*atom498;
atom59985 = atom42078*atom1571+atom42090*atom1574-atom1530*atom1019;
atom59989 = atom42078*atom1565+atom42090*atom1568-atom1019*atom1524;
atom59995 = atom1559*atom42078-atom1019*atom1518+atom1562*atom42090;
atom59999 = atom22244*atom59985+atom42760-atom59995*atom22246;
atom64627 = -aFFR*(atom2939*(atom59989*atom22246-atom59985*atom22245+atom42906)+atom59999*atom2940)*G_elastic*bFFR*C11FFR*epsiFFR;
atom64379 = -atom1019*atom64343+atom42090*atom64336+atom22168*atom42078;
atom64374 = atom2943*atom59999+(atom59995*atom22245-atom59989*atom22244+atom42756)*atom2944;
atom64630 = -C22FFR*aFFR*G_elastic*bFFR*atom64374*epsiFFR+aFFR*C23FFR*G_elastic*atom64379*bFFR*atom64600*epsiFFR;
atom64633 = -G_elastic*atom64379*atom64609*C33FFR*epsiFFR*atom64610-aFFR*C23FFR*G_elastic*bFFR*atom64600*atom64374*epsiFFR;
atom64936 = atom64633*atom64585;
atom64634 = -aFFR*G_elastic*bFFR*atom8887*C11FFR*epsiFFR;
atom64635 = -C22FFR*aFFR*atom8936*G_elastic*bFFR*epsiFFR;
atom64636 = -aFFR*atom8936*C23FFR*G_elastic*bFFR*atom64600*epsiFFR;
atom64986 = atom64585*atom64636;
atom60016 = atom1524*atom22246-atom1530*atom22245;
atom60020 = atom1530*atom22244-atom22246*atom1518;
atom60021 = atom58374+atom60020;
atom64637 = -aFFR*G_elastic*((atom58369+atom60016)*atom2939+atom60021*atom2940)*bFFR*C11FFR*epsiFFR;
atom60024 = -atom22244*atom1524+atom22245*atom1518;
atom64385 = atom2943*atom60021+(atom60024+atom58379)*atom2944;
atom64639 = aFFR*C23FFR*G_elastic*bFFR*atom64343*atom64600*epsiFFR;
atom64640 = -C22FFR*aFFR*G_elastic*bFFR*epsiFFR*atom64385+atom64639;
atom64642 = -G_elastic*atom64609*atom64343*C33FFR*epsiFFR*atom64610;
atom64643 = -aFFR*C23FFR*G_elastic*bFFR*atom64600*epsiFFR*atom64385+atom64642;
atom65036 = atom64643*atom64585;
atom60036 = atom42081*atom1571+atom42093*atom1574;
atom60046 = atom1559*atom42081+atom1562*atom42093;
atom60050 = -atom60046*atom22246+atom42841+atom60036*atom22244;
atom60040 = atom42093*atom1568+atom42081*atom1565;
atom64644 = -aFFR*G_elastic*bFFR*C11FFR*epsiFFR*(atom60050*atom2940+atom2939*(atom42934+atom60040*atom22246-atom60036*atom22245));
atom64391 = (atom42835+atom60046*atom22245-atom60040*atom22244)*atom2944+atom2943*atom60050;
atom64394 = atom64336*atom42093+atom22168*atom42081;
atom64647 = aFFR*C23FFR*atom64394*G_elastic*bFFR*atom64600*epsiFFR-C22FFR*aFFR*G_elastic*bFFR*atom64391*epsiFFR;
atom64650 = -atom64394*G_elastic*atom64609*C33FFR*epsiFFR*atom64610-aFFR*C23FFR*G_elastic*bFFR*atom64600*atom64391*epsiFFR;
atom65086 = atom64650*atom64585;
atom64651 = -aFFR*G_elastic*bFFR*C11FFR*epsiFFR*atom8896;
atom64652 = -C22FFR*aFFR*atom8945*G_elastic*bFFR*epsiFFR;
atom64653 = -aFFR*atom8945*C23FFR*G_elastic*bFFR*atom64600*epsiFFR;
atom65136 = atom64653*atom64585;
atom64654 = -aFFR*G_elastic*bFFR*(atom60020*atom2940+atom2939*atom60016)*C11FFR*epsiFFR;
atom64400 = atom60024*atom2944+atom2943*atom60020;
atom64656 = -C22FFR*aFFR*G_elastic*bFFR*epsiFFR*atom64400+atom64639;
atom64658 = -aFFR*C23FFR*G_elastic*bFFR*atom64600*epsiFFR*atom64400+atom64642;
atom65186 = atom64658*atom64585;
atom60075 = atom22244*atom1571-atom1559*atom22246;
atom64659 = -aFFR*G_elastic*bFFR*C11FFR*epsiFFR*(atom60075*atom2940-atom2939*(atom22245*atom1571-atom22246*atom1565));
atom64406 = atom60075*atom2943-(atom22244*atom1565-atom1559*atom22245)*atom2944;
atom64662 = aFFR*atom22168*C23FFR*G_elastic*bFFR*atom64600*epsiFFR-C22FFR*aFFR*G_elastic*bFFR*epsiFFR*atom64406;
atom64665 = -atom22168*G_elastic*atom64609*C33FFR*epsiFFR*atom64610-aFFR*C23FFR*G_elastic*bFFR*atom64600*epsiFFR*atom64406;
atom65236 = atom64665*atom64585;

CKFFR_ = [atom2939*atom64596 , atom2940*atom64596 , 0 , atom64413*atom64596 , atom64424*atom64596 , atom64429*atom64596 , 0 , atom64440*atom64596 , 0 , 0 , 0 , atom8887*atom64596 , atom64466*atom64596 , atom64485*atom64596 , 0 , 0 , 0 , 0 , 0 , 0 , atom8896*atom64596 , atom64488*atom64596 , atom64523*atom64596 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2939*atom64597 , atom64597*atom2940+atom2943*atom64598 , atom2944*atom64598 , atom64530*atom64598+atom64601*atom64571+atom64413*atom64597 , atom64537*atom64598+atom64576*atom64601+atom64424*atom64597 , atom64597*atom64429+atom2935*atom64601+atom64538*atom64598 , 0 , atom64440*atom64597+atom64601*atom64580+atom64545*atom64598 , 0 , 0 , 0 , atom8936*atom64598+atom8887*atom64597 , atom64709+atom64466*atom64597+atom64552*atom64598 , atom64601*atom64590+atom64559*atom64598+atom64485*atom64597 , 0 , 0 , 0 , 0 , 0 , 0 , atom8896*atom64597+atom8945*atom64598 , atom64709+atom64562*atom64598+atom64488*atom64597 , atom64601*atom64595+atom64523*atom64597+atom64568*atom64598 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , atom2943*atom64602 , atom64602*atom2944 , atom64571*atom64603+atom64602*atom64530 , atom64576*atom64603+atom64537*atom64602 , atom2935*atom64603+atom64602*atom64538 , 0 , atom64545*atom64602+atom64580*atom64603 , 0 , 0 , 0 , atom8936*atom64602 , atom64602*atom64552+atom64744 , atom64559*atom64602+atom64590*atom64603 , 0 , 0 , 0 , 0 , 0 , 0 , atom8945*atom64602 , atom64744+atom64602*atom64562 , atom64595*atom64603+atom64602*atom64568 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2939*atom64604 , atom2943*atom64607+atom2940*atom64604 , atom64607*atom2944 , atom64612*atom64571+atom64413*atom64604+atom64607*atom64530 , atom64537*atom64607+atom64576*atom64612+atom64424*atom64604 , atom64607*atom64538+atom64429*atom64604+atom2935*atom64612 , 0 , atom64440*atom64604+atom64607*atom64545+atom64612*atom64580 , 0 , 0 , 0 , atom8936*atom64607+atom8887*atom64604 , atom64607*atom64552+atom64466*atom64604+atom64786 , atom64485*atom64604+atom64559*atom64607+atom64612*atom64590 , 0 , 0 , 0 , 0 , 0 , 0 , atom8896*atom64604+atom8945*atom64607 , atom64786+atom64607*atom64562+atom64488*atom64604 , atom64523*atom64604+atom64607*atom64568+atom64612*atom64595 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2939*atom64613 , atom2943*atom64616+atom2940*atom64613 , atom64616*atom2944 , atom64619*atom64571+atom64413*atom64613+atom64616*atom64530 , atom64537*atom64616+atom64576*atom64619+atom64424*atom64613 , atom64429*atom64613+atom2935*atom64619+atom64616*atom64538 , 0 , atom64616*atom64545+atom64440*atom64613+atom64619*atom64580 , 0 , 0 , 0 , atom8936*atom64616+atom8887*atom64613 , atom64466*atom64613+atom64836+atom64616*atom64552 , atom64485*atom64613+atom64619*atom64590+atom64559*atom64616 , 0 , 0 , 0 , 0 , 0 , 0 , atom8896*atom64613+atom8945*atom64616 , atom64836+atom64616*atom64562+atom64488*atom64613 , atom64523*atom64613+atom64595*atom64619+atom64616*atom64568 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom64620*atom2939 , atom2943*atom64623+atom64620*atom2940 , atom64623*atom2944 , atom64626*atom64571+atom64623*atom64530+atom64620*atom64413 , atom64537*atom64623+atom64576*atom64626+atom64620*atom64424 , atom2935*atom64626+atom64620*atom64429+atom64623*atom64538 , 0 , atom64580*atom64626+atom64623*atom64545+atom64620*atom64440 , 0 , 0 , 0 , atom8936*atom64623+atom64620*atom8887 , atom64623*atom64552+atom64886+atom64620*atom64466 , atom64590*atom64626+atom64559*atom64623+atom64620*atom64485 , 0 , 0 , 0 , 0 , 0 , 0 , atom64620*atom8896+atom8945*atom64623 , atom64620*atom64488+atom64886+atom64623*atom64562 , atom64595*atom64626+atom64623*atom64568+atom64620*atom64523 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2939*atom64627 , atom2943*atom64630+atom64627*atom2940 , atom64630*atom2944 , atom64633*atom64571+atom64630*atom64530+atom64413*atom64627 , atom64537*atom64630+atom64576*atom64633+atom64424*atom64627 , atom64627*atom64429+atom64630*atom64538+atom2935*atom64633 , 0 , atom64440*atom64627+atom64633*atom64580+atom64630*atom64545 , 0 , 0 , 0 , atom8936*atom64630+atom8887*atom64627 , atom64466*atom64627+atom64630*atom64552+atom64936 , atom64630*atom64559+atom64633*atom64590+atom64485*atom64627 , 0 , 0 , 0 , 0 , 0 , 0 , atom8896*atom64627+atom8945*atom64630 , atom64630*atom64562+atom64936+atom64488*atom64627 , atom64630*atom64568+atom64523*atom64627+atom64633*atom64595 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2939*atom64634 , atom2943*atom64635+atom64634*atom2940 , atom64635*atom2944 , atom64413*atom64634+atom64635*atom64530+atom64571*atom64636 , atom64537*atom64635+atom64424*atom64634+atom64576*atom64636 , atom64635*atom64538+atom64634*atom64429+atom2935*atom64636 , 0 , atom64545*atom64635+atom64580*atom64636+atom64440*atom64634 , 0 , 0 , 0 , atom8887*atom64634+atom8936*atom64635 , atom64986+atom64466*atom64634+atom64552*atom64635 , atom64485*atom64634+atom64559*atom64635+atom64590*atom64636 , 0 , 0 , 0 , 0 , 0 , 0 , atom8945*atom64635+atom64634*atom8896 , atom64635*atom64562+atom64488*atom64634+atom64986 , atom64523*atom64634+atom64635*atom64568+atom64595*atom64636 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom64637*atom2939 , atom2943*atom64640+atom64637*atom2940 , atom64640*atom2944 , atom64640*atom64530+atom64571*atom64643+atom64413*atom64637 , atom64537*atom64640+atom64576*atom64643+atom64424*atom64637 , atom2935*atom64643+atom64640*atom64538+atom64637*atom64429 , 0 , atom64545*atom64640+atom64440*atom64637+atom64580*atom64643 , 0 , 0 , 0 , atom8936*atom64640+atom64637*atom8887 , atom65036+atom64466*atom64637+atom64552*atom64640 , atom64590*atom64643+atom64559*atom64640+atom64485*atom64637 , 0 , 0 , 0 , 0 , 0 , 0 , atom64637*atom8896+atom8945*atom64640 , atom64640*atom64562+atom65036+atom64637*atom64488 , atom64595*atom64643+atom64640*atom64568+atom64523*atom64637 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom64644*atom2939 , atom64644*atom2940+atom2943*atom64647 , atom64647*atom2944 , atom64650*atom64571+atom64644*atom64413+atom64647*atom64530 , atom64644*atom64424+atom64537*atom64647+atom64576*atom64650 , atom2935*atom64650+atom64647*atom64538+atom64644*atom64429 , 0 , atom64650*atom64580+atom64545*atom64647+atom64440*atom64644 , 0 , 0 , 0 , atom64644*atom8887+atom8936*atom64647 , atom65086+atom64647*atom64552+atom64466*atom64644 , atom64559*atom64647+atom64644*atom64485+atom64650*atom64590 , 0 , 0 , 0 , 0 , 0 , 0 , atom8945*atom64647+atom64644*atom8896 , atom65086+atom64647*atom64562+atom64644*atom64488 , atom64644*atom64523+atom64650*atom64595+atom64647*atom64568 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2939*atom64651 , atom64651*atom2940+atom64652*atom2943 , atom64652*atom2944 , atom64652*atom64530+atom64653*atom64571+atom64413*atom64651 , atom64652*atom64537+atom64424*atom64651+atom64576*atom64653 , atom64652*atom64538+atom64651*atom64429+atom64653*atom2935 , 0 , atom64440*atom64651+atom64653*atom64580+atom64652*atom64545 , 0 , 0 , 0 , atom64652*atom8936+atom8887*atom64651 , atom64466*atom64651+atom64652*atom64552+atom65136 , atom64652*atom64559+atom64485*atom64651+atom64653*atom64590 , 0 , 0 , 0 , 0 , 0 , 0 , atom64651*atom8896+atom64652*atom8945 , atom64652*atom64562+atom64488*atom64651+atom65136 , atom64652*atom64568+atom64653*atom64595+atom64523*atom64651 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom2939*atom64654 , atom64654*atom2940+atom2943*atom64656 , atom64656*atom2944 , atom64413*atom64654+atom64656*atom64530+atom64658*atom64571 , atom64424*atom64654+atom64576*atom64658+atom64537*atom64656 , atom64654*atom64429+atom64656*atom64538+atom2935*atom64658 , 0 , atom64656*atom64545+atom64440*atom64654+atom64580*atom64658 , 0 , 0 , 0 , atom64654*atom8887+atom8936*atom64656 , atom65186+atom64466*atom64654+atom64656*atom64552 , atom64559*atom64656+atom64485*atom64654+atom64658*atom64590 , 0 , 0 , 0 , 0 , 0 , 0 , atom64654*atom8896+atom8945*atom64656 , atom64656*atom64562+atom64488*atom64654+atom65186 , atom64656*atom64568+atom64523*atom64654+atom64595*atom64658 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom64659*atom2939 , atom64659*atom2940+atom2943*atom64662 , atom64662*atom2944 , atom64659*atom64413+atom64662*atom64530+atom64665*atom64571 , atom64576*atom64665+atom64424*atom64659+atom64537*atom64662 , atom64662*atom64538+atom2935*atom64665+atom64659*atom64429 , 0 , atom64665*atom64580+atom64662*atom64545+atom64440*atom64659 , 0 , 0 , 0 , atom64659*atom8887+atom8936*atom64662 , atom65236+atom64466*atom64659+atom64662*atom64552 , atom64559*atom64662+atom64665*atom64590+atom64485*atom64659 , 0 , 0 , 0 , 0 , 0 , 0 , atom8945*atom64662+atom64659*atom8896 , atom64662*atom64562+atom65236+atom64659*atom64488 , atom64659*atom64523+atom64665*atom64595+atom64662*atom64568 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0];

%endfunction
