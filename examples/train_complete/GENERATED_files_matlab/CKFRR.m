function CKFRR_ = CKFRR(q,qaux,dq,time,param)

xWAG = q( 1 ); 
yWAG = q( 2 ); 
zWAG = q( 3 ); 
aWAG = q( 4 ); 
bWAG = q( 5 ); 
cWAG = q( 6 ); 
cRSLD = q( 7 ); 
cFSLD = q( 8 ); 
zRBOG = q( 9 ); 
aRBOG = q( 10 ); 
bRBOG = q( 11 ); 
zFBOG = q( 12 ); 
aFBOG = q( 13 ); 
bFBOG = q( 14 ); 
zRWHSF = q( 15 ); 
aRWHSF = q( 16 ); 
bRWHSF = q( 17 ); 
zRWHSR = q( 18 ); 
aRWHSR = q( 19 ); 
bRWHSR = q( 20 ); 
zFWHSF = q( 21 ); 
aFWHSF = q( 22 ); 
bFWHSF = q( 23 ); 
zFWHSR = q( 24 ); 
aFWHSR = q( 25 ); 
bFWHSR = q( 26 ); 
bRAXBFL = q( 27 ); 
bRAXBFR = q( 28 ); 
bRAXBRL = q( 29 ); 
bRAXBRR = q( 30 ); 
bFAXBFL = q( 31 ); 
bFAXBFR = q( 32 ); 
bFAXBRL = q( 33 ); 
bFAXBRR = q( 34 ); 
xRMOTF = q( 35 ); 
yRMOTF = q( 36 ); 
zRMOTF = q( 37 ); 
bRMOTF = q( 38 ); 
xRMOTR = q( 39 ); 
yRMOTR = q( 40 ); 
zRMOTR = q( 41 ); 
bRMOTR = q( 42 ); 
bRROTF = q( 43 ); 
bRROTR = q( 44 ); 

thetaW_RFR = qaux( 1 ); 
uW_RFR = qaux( 2 ); 
uR_RFR = qaux( 3 ); 
xR_RFR = qaux( 4 ); 
thetaW_RFL = qaux( 5 ); 
uW_RFL = qaux( 6 ); 
uR_RFL = qaux( 7 ); 
xR_RFL = qaux( 8 ); 
thetaW_RRR = qaux( 9 ); 
uW_RRR = qaux( 10 ); 
uR_RRR = qaux( 11 ); 
xR_RRR = qaux( 12 ); 
thetaW_RRL = qaux( 13 ); 
uW_RRL = qaux( 14 ); 
uR_RRL = qaux( 15 ); 
xR_RRL = qaux( 16 ); 
thetaW_FFR = qaux( 17 ); 
uW_FFR = qaux( 18 ); 
uR_FFR = qaux( 19 ); 
xR_FFR = qaux( 20 ); 
thetaW_FFL = qaux( 21 ); 
uW_FFL = qaux( 22 ); 
uR_FFL = qaux( 23 ); 
xR_FFL = qaux( 24 ); 
thetaW_FRR = qaux( 25 ); 
uW_FRR = qaux( 26 ); 
uR_FRR = qaux( 27 ); 
xR_FRR = qaux( 28 ); 
thetaW_FRL = qaux( 29 ); 
uW_FRL = qaux( 30 ); 
uR_FRL = qaux( 31 ); 
xR_FRL = qaux( 32 ); 

dxWAG = dq( 1 ); 
dyWAG = dq( 2 ); 
dzWAG = dq( 3 ); 
daWAG = dq( 4 ); 
dbWAG = dq( 5 ); 
dcWAG = dq( 6 ); 
dcRSLD = dq( 7 ); 
dcFSLD = dq( 8 ); 
dzRBOG = dq( 9 ); 
daRBOG = dq( 10 ); 
dbRBOG = dq( 11 ); 
dzFBOG = dq( 12 ); 
daFBOG = dq( 13 ); 
dbFBOG = dq( 14 ); 
dzRWHSF = dq( 15 ); 
daRWHSF = dq( 16 ); 
dbRWHSF = dq( 17 ); 
dzRWHSR = dq( 18 ); 
daRWHSR = dq( 19 ); 
dbRWHSR = dq( 20 ); 
dzFWHSF = dq( 21 ); 
daFWHSF = dq( 22 ); 
dbFWHSF = dq( 23 ); 
dzFWHSR = dq( 24 ); 
daFWHSR = dq( 25 ); 
dbFWHSR = dq( 26 ); 
dbRAXBFL = dq( 27 ); 
dbRAXBFR = dq( 28 ); 
dbRAXBRL = dq( 29 ); 
dbRAXBRR = dq( 30 ); 
dbFAXBFL = dq( 31 ); 
dbFAXBFR = dq( 32 ); 
dbFAXBRL = dq( 33 ); 
dbFAXBRR = dq( 34 ); 
dxRMOTF = dq( 35 ); 
dyRMOTF = dq( 36 ); 
dzRMOTF = dq( 37 ); 
dbRMOTF = dq( 38 ); 
dxRMOTR = dq( 39 ); 
dyRMOTR = dq( 40 ); 
dzRMOTR = dq( 41 ); 
dbRMOTR = dq( 42 ); 
dbRROTF = dq( 43 ); 
dbRROTR = dq( 44 ); 

t= time ;

g = param( 1 ); 
L_OBOG_OAXBy = param( 2 ); 
L_OBOG_OAXBz = param( 3 ); 
L_OBOG_OSUSPy = param( 4 ); 
L_OBOG_OSUSPx = param( 5 ); 
L_OBOG_OSUSPz = param( 6 ); 
L_OBOG_OWHS = param( 7 ); 
L_OBOG_P1BOG = param( 8 ); 
L_MOT = param( 9 ); 
L_GEAR = param( 10 ); 
L_AXB1 = param( 11 ); 
L_AXB2 = param( 12 ); 
L_SUSP = param( 13 ); 
L_WHS = param( 14 ); 
L_RAIL = param( 15 ); 
L_WAG = param( 16 ); 
L_SUSPBEAM1 = param( 17 ); 
L_SUSPBEAM2 = param( 18 ); 
L_SLDx = param( 19 ); 
L_SLDy = param( 20 ); 
b_pend = param( 21 ); 
a_pend = param( 22 ); 
L0_1 = param( 23 ); 
L0_2 = param( 24 ); 
m_WAG = param( 25 ); 
I_WAGx = param( 26 ); 
I_WAGy = param( 27 ); 
I_WAGz = param( 28 ); 
xCGWAG = param( 29 ); 
yCGWAG = param( 30 ); 
zCGWAG = param( 31 ); 
G_BOGz = param( 32 ); 
m_BOG = param( 33 ); 
I_BOGx = param( 34 ); 
I_BOGy = param( 35 ); 
I_BOGz = param( 36 ); 
m_MOT = param( 37 ); 
I_MOTx = param( 38 ); 
I_MOTy = param( 39 ); 
I_MOTz = param( 40 ); 
m_ROT = param( 41 ); 
I_ROTx = param( 42 ); 
I_ROTy = param( 43 ); 
I_ROTz = param( 44 ); 
m_WHS = param( 45 ); 
I_WHSx = param( 46 ); 
I_WHSy = param( 47 ); 
I_WHSz = param( 48 ); 
I_CORy = param( 49 ); 
m_AXB = param( 50 ); 
I_AXBx = param( 51 ); 
I_AXBy = param( 52 ); 
I_AXBz = param( 53 ); 
m_SLD = param( 54 ); 
I_SLDx = param( 55 ); 
I_SLDy = param( 56 ); 
I_SLDz = param( 57 ); 
K_SSl = param( 58 ); 
C_SSl = param( 59 ); 
C_SSr = param( 60 ); 
K_SSr = param( 61 ); 
Kgear = param( 62 ); 
Cgear = param( 63 ); 
alpha_gear = param( 64 ); 
zROT = param( 65 ); 
zWHS = param( 66 ); 
K_S1 = param( 67 ); 
C_S1 = param( 68 ); 
K_S2 = param( 69 ); 
C_S2 = param( 70 ); 
aW_RFR = param( 71 ); 
bW_RFR = param( 72 ); 
cW_RFR = param( 73 ); 
dW_RFR = param( 74 ); 
lW_RFR = param( 75 ); 
aR_RFR = param( 76 ); 
bR_RFR = param( 77 ); 
cR_RFR = param( 78 ); 
dR_RFR = param( 79 ); 
lR_RFR = param( 80 ); 
RFRas = param( 81 ); 
RFRbs = param( 82 ); 
RFRcs = param( 83 ); 
RFRds = param( 84 ); 
RFRes = param( 85 ); 
RFRfs = param( 86 ); 
RFRstas = param( 87 ); 
RFRends = param( 88 ); 
irrRFRz = param( 89 ); 
aW_RFL = param( 90 ); 
bW_RFL = param( 91 ); 
cW_RFL = param( 92 ); 
dW_RFL = param( 93 ); 
lW_RFL = param( 94 ); 
aR_RFL = param( 95 ); 
bR_RFL = param( 96 ); 
cR_RFL = param( 97 ); 
dR_RFL = param( 98 ); 
lR_RFL = param( 99 ); 
RFLas = param( 100 ); 
RFLbs = param( 101 ); 
RFLcs = param( 102 ); 
RFLds = param( 103 ); 
RFLes = param( 104 ); 
RFLfs = param( 105 ); 
RFLstas = param( 106 ); 
RFLends = param( 107 ); 
irrRFLz = param( 108 ); 
aW_RRR = param( 109 ); 
bW_RRR = param( 110 ); 
cW_RRR = param( 111 ); 
dW_RRR = param( 112 ); 
lW_RRR = param( 113 ); 
aR_RRR = param( 114 ); 
bR_RRR = param( 115 ); 
cR_RRR = param( 116 ); 
dR_RRR = param( 117 ); 
lR_RRR = param( 118 ); 
RRRas = param( 119 ); 
RRRbs = param( 120 ); 
RRRcs = param( 121 ); 
RRRds = param( 122 ); 
RRRes = param( 123 ); 
RRRfs = param( 124 ); 
RRRstas = param( 125 ); 
RRRends = param( 126 ); 
irrRRRz = param( 127 ); 
aW_RRL = param( 128 ); 
bW_RRL = param( 129 ); 
cW_RRL = param( 130 ); 
dW_RRL = param( 131 ); 
lW_RRL = param( 132 ); 
aR_RRL = param( 133 ); 
bR_RRL = param( 134 ); 
cR_RRL = param( 135 ); 
dR_RRL = param( 136 ); 
lR_RRL = param( 137 ); 
RRLas = param( 138 ); 
RRLbs = param( 139 ); 
RRLcs = param( 140 ); 
RRLds = param( 141 ); 
RRLes = param( 142 ); 
RRLfs = param( 143 ); 
RRLstas = param( 144 ); 
RRLends = param( 145 ); 
irrRRLz = param( 146 ); 
aW_FFR = param( 147 ); 
bW_FFR = param( 148 ); 
cW_FFR = param( 149 ); 
dW_FFR = param( 150 ); 
lW_FFR = param( 151 ); 
aR_FFR = param( 152 ); 
bR_FFR = param( 153 ); 
cR_FFR = param( 154 ); 
dR_FFR = param( 155 ); 
lR_FFR = param( 156 ); 
FFRas = param( 157 ); 
FFRbs = param( 158 ); 
FFRcs = param( 159 ); 
FFRds = param( 160 ); 
FFRes = param( 161 ); 
FFRfs = param( 162 ); 
FFRstas = param( 163 ); 
FFRends = param( 164 ); 
irrFFRz = param( 165 ); 
aW_FFL = param( 166 ); 
bW_FFL = param( 167 ); 
cW_FFL = param( 168 ); 
dW_FFL = param( 169 ); 
lW_FFL = param( 170 ); 
aR_FFL = param( 171 ); 
bR_FFL = param( 172 ); 
cR_FFL = param( 173 ); 
dR_FFL = param( 174 ); 
lR_FFL = param( 175 ); 
FFLas = param( 176 ); 
FFLbs = param( 177 ); 
FFLcs = param( 178 ); 
FFLds = param( 179 ); 
FFLes = param( 180 ); 
FFLfs = param( 181 ); 
FFLstas = param( 182 ); 
FFLends = param( 183 ); 
irrFFLz = param( 184 ); 
aW_FRR = param( 185 ); 
bW_FRR = param( 186 ); 
cW_FRR = param( 187 ); 
dW_FRR = param( 188 ); 
lW_FRR = param( 189 ); 
aR_FRR = param( 190 ); 
bR_FRR = param( 191 ); 
cR_FRR = param( 192 ); 
dR_FRR = param( 193 ); 
lR_FRR = param( 194 ); 
FRRas = param( 195 ); 
FRRbs = param( 196 ); 
FRRcs = param( 197 ); 
FRRds = param( 198 ); 
FRRes = param( 199 ); 
FRRfs = param( 200 ); 
FRRstas = param( 201 ); 
FRRends = param( 202 ); 
irrFRRz = param( 203 ); 
aW_FRL = param( 204 ); 
bW_FRL = param( 205 ); 
cW_FRL = param( 206 ); 
dW_FRL = param( 207 ); 
lW_FRL = param( 208 ); 
aR_FRL = param( 209 ); 
bR_FRL = param( 210 ); 
cR_FRL = param( 211 ); 
dR_FRL = param( 212 ); 
lR_FRL = param( 213 ); 
FRLas = param( 214 ); 
FRLbs = param( 215 ); 
FRLcs = param( 216 ); 
FRLds = param( 217 ); 
FRLes = param( 218 ); 
FRLfs = param( 219 ); 
FRLstas = param( 220 ); 
FRLends = param( 221 ); 
irrFRLz = param( 222 ); 
E_elastic = param( 223 ); 
nu_poisson = param( 224 ); 
G_elastic = param( 225 ); 
aRFR = param( 226 ); 
bRFR = param( 227 ); 
C11RFR = param( 228 ); 
C22RFR = param( 229 ); 
C23RFR = param( 230 ); 
C33RFR = param( 231 ); 
aRFL = param( 232 ); 
bRFL = param( 233 ); 
C11RFL = param( 234 ); 
C22RFL = param( 235 ); 
C23RFL = param( 236 ); 
C33RFL = param( 237 ); 
aRRR = param( 238 ); 
bRRR = param( 239 ); 
C11RRR = param( 240 ); 
C22RRR = param( 241 ); 
C23RRR = param( 242 ); 
C33RRR = param( 243 ); 
aRRL = param( 244 ); 
bRRL = param( 245 ); 
C11RRL = param( 246 ); 
C22RRL = param( 247 ); 
C23RRL = param( 248 ); 
C33RRL = param( 249 ); 
aFFR = param( 250 ); 
bFFR = param( 251 ); 
C11FFR = param( 252 ); 
C22FFR = param( 253 ); 
C23FFR = param( 254 ); 
C33FFR = param( 255 ); 
aFFL = param( 256 ); 
bFFL = param( 257 ); 
C11FFL = param( 258 ); 
C22FFL = param( 259 ); 
C23FFL = param( 260 ); 
C33FFL = param( 261 ); 
aFRR = param( 262 ); 
bFRR = param( 263 ); 
C11FRR = param( 264 ); 
C22FRR = param( 265 ); 
C23FRR = param( 266 ); 
C33FRR = param( 267 ); 
aFRL = param( 268 ); 
bFRL = param( 269 ); 
C11FRL = param( 270 ); 
C22FRL = param( 271 ); 
C23FRL = param( 272 ); 
C33FRL = param( 273 ); 
epsiRFR = param( 274 ); 
epsiRFL = param( 275 ); 
epsiRRR = param( 276 ); 
epsiRRL = param( 277 ); 
epsiFFR = param( 278 ); 
epsiFFL = param( 279 ); 
epsiFRR = param( 280 ); 
epsiFRL = param( 281 ); 

atom3341 = (FRRstas-FRRends)^(-1);
atom3353 = -atom3341*FRRas;
atom3342 = atom3341*(FRRstas-xR_FRR);
atom3344 = FRRas*atom3342+FRRbs;
atom3356 = -atom3341*atom3344+atom3353*atom3342;
atom3346 = FRRcs+atom3344*atom3342;
atom3359 = atom3342*atom3356-atom3341*atom3346;
atom3348 = FRRds+atom3346*atom3342;
atom3362 = atom3359*atom3342-atom3341*atom3348;
atom3365 = atom3362*atom3342-atom3341*(atom3342*atom3348+FRRes);
atom3367 = 1+atom3365^2;
atom3368 = sqrt(atom3367);
atom3378 = -atom3341*atom3356;
atom3383 = -atom3341*atom3359;
atom3387 = -atom3341*atom3362;
atom3389 = 2*atom3342*(atom3383-(atom3341*atom3353*atom3342-atom3378)*atom3342)+2*atom3387;
atom3394 = -atom3368^(-2)*atom3365*atom3389*atom3367^(-1/2);
atom3398 = 1+(0.5)*atom3368^(-1)*atom3389*L_RAIL+(0.5)*atom3365*L_RAIL*atom3394;
atom3400 = -(0.5)*L_RAIL*atom3394+atom3365;
atom3436 = atom3398^2;
atom3444 = (atom3400^2+atom3436)^(-1/2);
atom3445 = atom3444*atom3398;
atom66382 = -bFRR*epsiFRR*G_elastic*C11FRR*atom3445*aFRR;
atom3446 = atom3444*atom3400;
atom1017 = sin(aFBOG);
atom1497 = sin(cFSLD);
atom22450 = -zFWHSR*atom1017;
atom1018 = cos(bFBOG);
atom1019 = sin(bFBOG);
atom1016 = cos(aFBOG);
atom1021 = atom1019*atom1016;
atom2733 = atom1018*L_OBOG_OWHS;
atom22449 = zFWHSR*atom1021-atom2733;
atom1496 = cos(cFSLD);
atom22456 = atom22449*atom1496-atom1497*atom22450;
atom0 = -1/2*L_WAG;
atom1173 = sin(bWAG);
atom1174 = cos(aWAG);
atom22460 = atom22456-atom0;
atom1194 = -atom1173*atom1174;
atom1175 = sin(aWAG);
atom22459 = atom22450*atom1496+atom1497*atom22449;
atom1023 = atom1018*atom1016;
atom2741 = -L_OBOG_OWHS*atom1019;
atom22452 = -atom2741+zFWHSR*atom1023;
atom1172 = cos(bWAG);
atom22453 = zFBOG+atom22452;
atom1195 = atom1172*atom1174;
atom22475 = atom22460*atom1194+atom22453*atom1195+atom1175*atom22459;
atom1176 = cos(cWAG);
atom3229 = uW_FRR-lW_FRR;
atom3235 = atom3229*(cW_FRR+atom3229*(bW_FRR+atom3229*aW_FRR))+dW_FRR;
atom1512 = atom1194*atom1496+atom1497*atom1175;
atom3236 = -sin(thetaW_FRR)*atom3235;
atom1530 = -atom1019*atom1195+atom1018*atom1512;
atom1533 = atom1018*atom1195+atom1019*atom1512;
atom1514 = atom1175*atom1496;
atom1515 = atom1514-atom1497*atom1194;
atom684 = sin(aFWHSR);
atom1551 = -atom1515*atom1017+atom1016*atom1533;
atom683 = cos(aFWHSR);
atom1548 = atom1533*atom1017+atom1515*atom1016;
atom1607 = atom683*atom1548+atom684*atom1551;
atom1610 = -atom684*atom1548+atom683*atom1551;
atom3238 = atom3235*cos(thetaW_FRR);
atom1702 = -(0.5)*L_WHS;
atom3241 = atom684*atom1702+zFWHSR;
atom3239 = atom683*atom1702;
atom3248 = atom3239*atom1016-atom3241*atom1017;
atom3245 = atom3239*atom1019*atom1017-atom2733+atom3241*atom1021;
atom3260 = -atom1497*atom3248+atom3245*atom1496-atom0;
atom3259 = atom1497*atom3245+atom3248*atom1496;
atom1022 = atom1018*atom1017;
atom3253 = -atom2741+zFBOG+atom3241*atom1023+atom3239*atom1022;
atom22481 = atom1175*atom3259+atom1610*atom3238-atom22475+atom1194*atom3260+atom1607*uW_FRR+atom3253*atom1195+atom3236*atom1530;
atom58407 = -atom22475*atom1176;
atom66220 = atom58407-atom1176*atom22481;
atom1177 = sin(cWAG);
atom58406 = atom22475*atom1177;
atom66222 = (atom58406+atom1177*atom22481)*atom3445+atom3446*atom66220;
atom1178 = -atom1177*atom1174;
atom1179 = atom1175*atom1177;
atom1185 = atom1176*atom1173;
atom1187 = atom1172*atom1179+atom1185;
atom1184 = atom1172*atom1176-atom1173*atom1179;
atom1500 = atom1496*atom1184+atom1497*atom1178;
atom1521 = atom1019*atom1500+atom1018*atom1187;
atom1503 = atom1496*atom1178-atom1497*atom1184;
atom1539 = -atom1503*atom1017+atom1016*atom1521;
atom1536 = atom1521*atom1017+atom1503*atom1016;
atom1598 = atom683*atom1539-atom684*atom1536;
atom1595 = atom684*atom1539+atom683*atom1536;
atom1518 = atom1018*atom1500-atom1019*atom1187;
atom22465 = atom22453*atom1187+atom1178*atom22459+atom22460*atom1184;
atom22479 = -atom22465+atom3260*atom1184+atom3253*atom1187+atom3236*atom1518+uW_FRR*atom1595+atom3259*atom1178+atom1598*atom3238;
atom58417 = -atom22475*atom1178+atom22465*atom1175;
atom66231 = atom1175*atom22479+atom58417-atom1178*atom22481;
atom1181 = -atom1175*atom1176;
atom1191 = atom1177*atom1173;
atom1193 = atom1191+atom1172*atom1181;
atom1180 = atom1176*atom1174;
atom1190 = -atom1181*atom1173+atom1172*atom1177;
atom22470 = atom22460*atom1190+atom1180*atom22459+atom1193*atom22453;
atom1506 = atom1190*atom1496+atom1497*atom1180;
atom1527 = atom1019*atom1506+atom1193*atom1018;
atom1509 = atom1180*atom1496-atom1497*atom1190;
atom1542 = atom1016*atom1509+atom1527*atom1017;
atom1545 = atom1527*atom1016-atom1017*atom1509;
atom1604 = atom683*atom1545-atom684*atom1542;
atom1601 = atom683*atom1542+atom684*atom1545;
atom1524 = -atom1193*atom1019+atom1018*atom1506;
atom22480 = atom1193*atom3253+atom3236*atom1524+atom1604*atom3238+atom1180*atom3259+atom1190*atom3260-atom22470+uW_FRR*atom1601;
atom58414 = -atom1175*atom22470+atom1180*atom22475;
atom66233 = atom3446*atom66231+(atom58414+atom1180*atom22481-atom1175*atom22480)*atom3445;
atom66236 = atom22465+atom22479;
atom66238 = atom3446*atom66236-(atom22470+atom22480)*atom3445;
atom3814 = -atom1175*atom1172;
atom60839 = atom1191+atom1176*atom3814;
atom44188 = -atom1184*atom22459+atom22456*atom1178;
atom60833 = -atom3814*atom1177+atom1185;
atom44063 = atom1180*atom22456-atom1190*atom22459;
atom66247 = atom44063-atom60833*atom22481+atom1195*atom22479;
atom66249 = atom3445*(atom44188+atom60839*atom22481-atom1195*atom22480)+atom66247*atom3446;
atom9499 = atom3445*atom1187+atom1193*atom3446;
atom58423 = atom1018*atom22450;
atom58429 = -atom1019*atom22450;
atom58427 = -atom1018*atom22452-atom1019*atom22449;
atom58435 = -atom1496*atom58429-atom1497*atom58427;
atom58431 = atom58427*atom1496-atom1497*atom58429;
atom41956 = atom1018*atom1496;
atom40896 = -atom1019*atom1173;
atom64448 = atom40896+atom41956*atom1172;
atom40899 = atom1497*atom1018;
atom64442 = -atom1172*atom1019-atom41956*atom1173;
atom64445 = atom40899*atom1174-atom1175*atom64442;
atom64461 = atom1176*atom64445+atom64448*atom1177;
atom64453 = atom64442*atom1174+atom1175*atom40899;
atom58438 = atom58431*atom1178+atom58423*atom1187+atom58435*atom1184;
atom66252 = -atom64453*atom22480+atom64461*atom22481;
atom64450 = atom1176*atom64448-atom64445*atom1177;
atom66257 = atom64453*atom22479-atom64450*atom22481;
atom58443 = atom1180*atom58431+atom58435*atom1190+atom1193*atom58423;
atom66258 = atom66257+atom58443;
atom66260 = atom3446*atom66258+atom3445*(atom58438+atom66252);
atom40804 = -atom1497*atom1172;
atom40806 = atom1497*atom1173;
atom64468 = atom1496*atom1174-atom1175*atom40806;
atom64480 = atom1176*atom64468+atom1177*atom40804;
atom40875 = atom40806*atom1174+atom1514;
atom44126 = atom1497*atom22452;
atom44128 = atom1496*atom22452;
atom44216 = atom44128*atom1184-atom22449*atom1187+atom1178*atom44126;
atom64471 = -atom1177*atom64468+atom1176*atom40804;
atom44131 = -atom1193*atom22449+atom1180*atom44126+atom44128*atom1190;
atom66269 = atom40875*atom22479+atom44131-atom64471*atom22481;
atom66271 = atom3446*atom66269-(atom40875*atom22480-atom44216-atom64480*atom22481)*atom3445;
atom6041 = atom1497*atom1017+atom1021*atom1496;
atom6036 = -atom1496*atom1017;
atom6037 = atom1497*atom1021+atom6036;
atom6044 = atom1193*atom1023+atom1190*atom6041+atom1180*atom6037;
atom9508 = atom3446*atom6044+atom3445*(atom1023*atom1187+atom6041*atom1184+atom6037*atom1178);
atom66274 = atom3445*atom66252+atom3446*atom66257;
atom43497 = -atom683*atom1017-atom684*atom1016;
atom66275 = -atom1018*atom43497;
atom66278 = -atom1019*atom43497;
atom43485 = -atom684*atom1017+atom683*atom1016;
atom66280 = atom66278*atom1496-atom1497*atom43485;
atom66282 = atom66275*atom1172-atom66280*atom1173;
atom66286 = atom43485*atom1496+atom1497*atom66278;
atom66288 = atom1175*atom66286+atom1174*atom66282;
atom66292 = -atom1175*atom66282+atom66286*atom1174;
atom66296 = atom66275*atom1173+atom1172*atom66280;
atom66298 = atom1176*atom66292+atom1177*atom66296;
atom66305 = -atom66292*atom1177+atom1176*atom66296;
atom66307 = atom66288*atom22479-atom66305*atom22481;
atom66309 = atom3445*(atom66298*atom22481-atom66288*atom22480)+atom3446*atom66307;
atom66383 = -atom3446*bFRR*epsiFRR*G_elastic*C11FRR*aFRR;
atom3332 = uR_FRR-lR_FRR;
atom3333 = atom3332*aR_FRR;
atom3334 = atom3333+bR_FRR;
atom3403 = atom3332*atom3334+cR_FRR+atom3332*(atom3333+atom3334);
atom3449 = (1+atom3403^2)^(-1/2);
atom66384 = -bFRR*epsiFRR*G_elastic*C22FRR*aFRR*atom3449;
atom3450 = atom3403*atom3449;
atom58410 = atom1176*atom22470-atom22465*atom1177;
atom66316 = atom66220*atom3449+(atom58410-atom22479*atom1177+atom1176*atom22480)*atom3450;
atom3404 = atom3400*atom3403;
atom3405 = -atom3398*atom3403;
atom3438 = (atom3405^2+atom3404^2+atom3436)^(-1/2);
atom3439 = atom3404*atom3438;
atom3440 = atom3405*atom3438;
atom66386 = sqrt(bFRR*aFRR);
atom66357 = atom1176*atom3439+atom3440*atom1177;
atom66387 = -C23FRR*bFRR*epsiFRR*G_elastic*atom66386*aFRR*atom3449;
atom58420 = atom22470*atom1178-atom22465*atom1180;
atom66323 = atom3450*(atom22480*atom1178+atom58420-atom1180*atom22479)+atom66231*atom3449;
atom3441 = atom3398*atom3438;
atom66362 = atom3439*atom1178+atom1175*atom3441+atom3440*atom1180;
atom66324 = atom66236*atom3449;
atom66366 = atom3440*atom60839+atom3439*atom60833+atom1195*atom3441;
atom44067 = atom1175*atom22456-atom1194*atom22459;
atom66331 = -atom3450*(atom60839*atom22479-atom22480*atom60833-atom44067)+atom66247*atom3449;
atom9548 = atom1193*atom3449+atom1195*atom3450;
atom66371 = atom3440*atom64461+atom64450*atom3439+atom64453*atom3441;
atom58448 = atom58423*atom1195+atom58435*atom1194+atom1175*atom58431;
atom66334 = atom64450*atom22480-atom22479*atom64461;
atom66338 = atom3450*(atom58448+atom66334)+atom66258*atom3449;
atom66495 = atom66371*atom66387;
atom66376 = atom3440*atom64480+atom40875*atom3441+atom3439*atom64471;
atom44137 = atom1175*atom44126+atom44128*atom1194-atom22449*atom1195;
atom66345 = atom66269*atom3449+(atom44137-atom64480*atom22479+atom64471*atom22480)*atom3450;
atom9557 = atom6044*atom3449+atom3450*(atom1175*atom6037+atom1194*atom6041+atom1023*atom1195);
atom66348 = atom66257*atom3449+atom3450*atom66334;
atom66354 = atom66307*atom3449+(atom66305*atom22480-atom66298*atom22479)*atom3450;
atom66381 = atom66288*atom3441+atom3439*atom66305+atom66298*atom3440;
atom66388 = -bFRR*epsiFRR*G_elastic*atom3450*C22FRR*aFRR;
atom66389 = -C23FRR*bFRR*epsiFRR*G_elastic*atom66386*atom3450*aFRR;
atom66530 = atom66371*atom66389;
atom40803 = atom1172*atom1496;
atom40902 = atom1019*atom40803+atom1018*atom1173;
atom41903 = -atom1017*atom40804+atom40902*atom1016;
atom41900 = atom40902*atom1017+atom1016*atom40804;
atom43488 = atom683*atom41903-atom41900*atom684;
atom40898 = atom1018*atom40803+atom40896;
atom43476 = atom684*atom41903+atom683*atom41900;
atom60330 = atom40898*atom1524+atom1604*atom43488+atom43476*atom1601;
atom60325 = atom1610*atom43488+atom1530*atom40898+atom1607*atom43476;
atom60337 = atom40898*atom1518+atom43476*atom1595+atom1598*atom43488;
atom60341 = atom58407+atom60325*atom22479-atom60337*atom22481;
atom66390 = -bFRR*epsiFRR*G_elastic*C11FRR*aFRR*(atom3446*atom60341-(atom60325*atom22480-atom60330*atom22481-atom58406)*atom3445);
atom66140 = atom60341*atom3449+atom3450*(atom58410+atom60337*atom22480-atom60330*atom22479);
atom22397 = atom3439*atom1595+atom3440*atom1601+atom1607*atom3441;
atom66146 = atom1530*atom3441+atom3440*atom1524+atom3439*atom1518;
atom66153 = atom3440*atom1604+atom1610*atom3441+atom1598*atom3439;
atom66155 = atom66146*atom40898+atom22397*atom43476+atom66153*atom43488;
atom66393 = C23FRR*bFRR*epsiFRR*G_elastic*atom66386*aFRR*atom66155-bFRR*epsiFRR*G_elastic*C22FRR*atom66140*aFRR;
atom66395 = bFRR^2;
atom66396 = aFRR^2;
atom66398 = -C23FRR*bFRR*epsiFRR*G_elastic*atom66386*atom66140*aFRR-atom66395*C33FRR*epsiFRR*G_elastic*atom66396*atom66155;
atom66572 = atom66371*atom66398;
atom40903 = atom1497*atom1019;
atom41907 = atom1016*atom40903+atom6036;
atom41905 = atom40903*atom1017+atom1016*atom1496;
atom43491 = -atom684*atom41905+atom683*atom41907;
atom43479 = atom684*atom41907+atom683*atom41905;
atom60359 = atom1607*atom43479+atom1610*atom43491+atom1530*atom40899;
atom60364 = atom1524*atom40899+atom1604*atom43491+atom1601*atom43479;
atom60371 = atom40899*atom1518+atom1598*atom43491+atom1595*atom43479;
atom60375 = -atom60371*atom22481+atom22479*atom60359+atom58417;
atom66399 = -bFRR*epsiFRR*G_elastic*C11FRR*aFRR*(atom3445*(atom58414-atom60359*atom22480+atom60364*atom22481)+atom60375*atom3446);
atom66161 = atom60375*atom3449+(atom22480*atom60371-atom60364*atom22479+atom58420)*atom3450;
atom66166 = atom66153*atom43491+atom66146*atom40899+atom22397*atom43479;
atom66402 = -bFRR*epsiFRR*G_elastic*atom66161*C22FRR*aFRR+C23FRR*bFRR*epsiFRR*G_elastic*atom66386*aFRR*atom66166;
atom66405 = -C23FRR*bFRR*epsiFRR*G_elastic*atom66386*atom66161*aFRR-atom66395*C33FRR*epsiFRR*G_elastic*atom66396*atom66166;
atom66622 = atom66371*atom66405;
atom60392 = atom1607^2+atom1530^2+atom1610^2;
atom60396 = atom1530*atom1524+atom1610*atom1604+atom1607*atom1601;
atom60402 = atom1607*atom1595+atom1598*atom1610+atom1530*atom1518;
atom60406 = atom22465+atom22479*atom60392-atom60402*atom22481;
atom66406 = -bFRR*epsiFRR*G_elastic*C11FRR*aFRR*((atom60396*atom22481-atom22470-atom60392*atom22480)*atom3445+atom3446*atom60406);
atom66177 = atom22397*atom1607+atom66153*atom1610+atom66146*atom1530;
atom66172 = atom60406*atom3449-(atom60396*atom22479-atom60402*atom22480)*atom3450;
atom66409 = -bFRR*atom66172*epsiFRR*G_elastic*C22FRR*aFRR+C23FRR*bFRR*atom66177*epsiFRR*G_elastic*atom66386*aFRR;
atom66412 = -atom66395*atom66177*C33FRR*epsiFRR*G_elastic*atom66396-C23FRR*bFRR*atom66172*epsiFRR*G_elastic*atom66386*aFRR;
atom66672 = atom66371*atom66412;
atom43482 = atom683*atom1022+atom684*atom1023;
atom43494 = atom683*atom1023-atom684*atom1022;
atom60426 = atom43494*atom1604-atom1019*atom1524+atom43482*atom1601;
atom60422 = atom1607*atom43482-atom1530*atom1019+atom1610*atom43494;
atom60432 = atom1598*atom43494+atom43482*atom1595-atom1019*atom1518;
atom60436 = atom44063+atom60422*atom22479-atom60432*atom22481;
atom66413 = -bFRR*(atom3446*atom60436+(atom60426*atom22481+atom44188-atom60422*atom22480)*atom3445)*epsiFRR*G_elastic*C11FRR*aFRR;
atom66183 = atom60436*atom3449-atom3450*(atom60426*atom22479-atom44067-atom60432*atom22480);
atom66188 = -atom66146*atom1019+atom66153*atom43494+atom22397*atom43482;
atom66416 = -bFRR*atom66183*epsiFRR*G_elastic*C22FRR*aFRR+C23FRR*bFRR*epsiFRR*G_elastic*atom66386*atom66188*aFRR;
atom66419 = -C23FRR*bFRR*atom66183*epsiFRR*G_elastic*atom66386*aFRR-atom66395*C33FRR*epsiFRR*G_elastic*atom66188*atom66396;
atom66722 = atom66371*atom66419;
atom66420 = -bFRR*epsiFRR*G_elastic*C11FRR*atom9499*aFRR;
atom66421 = -bFRR*epsiFRR*G_elastic*C22FRR*atom9548*aFRR;
atom66422 = -C23FRR*bFRR*epsiFRR*G_elastic*atom66386*atom9548*aFRR;
atom66772 = atom66371*atom66422;
atom60457 = atom1530*atom22479-atom22481*atom1518;
atom60458 = atom58443+atom60457;
atom60453 = atom1524*atom22481-atom1530*atom22480;
atom66423 = -bFRR*(atom3445*(atom58438+atom60453)+atom3446*atom60458)*epsiFRR*G_elastic*C11FRR*aFRR;
atom60461 = atom22480*atom1518-atom22479*atom1524;
atom66194 = atom60458*atom3449+atom3450*(atom60461+atom58448);
atom66425 = C23FRR*atom66146*bFRR*epsiFRR*G_elastic*atom66386*aFRR;
atom66426 = atom66425-bFRR*atom66194*epsiFRR*G_elastic*C22FRR*aFRR;
atom66428 = -atom66146*atom66395*C33FRR*epsiFRR*G_elastic*atom66396;
atom66429 = -C23FRR*bFRR*atom66194*epsiFRR*G_elastic*atom66386*aFRR+atom66428;
atom66822 = atom66371*atom66429;
atom60473 = atom1607*atom43485+atom1610*atom43497;
atom60483 = atom1598*atom43497+atom43485*atom1595;
atom60487 = atom22479*atom60473-atom60483*atom22481+atom44131;
atom60477 = atom1601*atom43485+atom1604*atom43497;
atom66430 = -bFRR*(atom3446*atom60487+(atom60477*atom22481-atom60473*atom22480+atom44216)*atom3445)*epsiFRR*G_elastic*C11FRR*aFRR;
atom66200 = atom3450*(atom22480*atom60483+atom44137-atom22479*atom60477)+atom60487*atom3449;
atom66203 = atom66153*atom43497+atom22397*atom43485;
atom66433 = C23FRR*bFRR*epsiFRR*G_elastic*atom66386*atom66203*aFRR-bFRR*epsiFRR*G_elastic*C22FRR*atom66200*aFRR;
atom66436 = -C23FRR*bFRR*epsiFRR*G_elastic*atom66386*atom66200*aFRR-atom66395*C33FRR*epsiFRR*G_elastic*atom66203*atom66396;
atom66872 = atom66371*atom66436;
atom66437 = -bFRR*atom9508*epsiFRR*G_elastic*C11FRR*aFRR;
atom66438 = -bFRR*epsiFRR*G_elastic*C22FRR*aFRR*atom9557;
atom66439 = -C23FRR*bFRR*epsiFRR*G_elastic*atom66386*aFRR*atom9557;
atom66922 = atom66439*atom66371;
atom66440 = -bFRR*epsiFRR*G_elastic*C11FRR*(atom3445*atom60453+atom3446*atom60457)*aFRR;
atom66209 = atom60461*atom3450+atom60457*atom3449;
atom66442 = -bFRR*epsiFRR*G_elastic*atom66209*C22FRR*aFRR+atom66425;
atom66444 = atom66428-C23FRR*bFRR*epsiFRR*G_elastic*atom66386*atom66209*aFRR;
atom66972 = atom66371*atom66444;
atom60512 = atom1607*atom22479-atom1595*atom22481;
atom66445 = bFRR*epsiFRR*G_elastic*C11FRR*((atom1607*atom22480-atom1601*atom22481)*atom3445-atom3446*atom60512)*aFRR;
atom66215 = atom60512*atom3449+(atom22480*atom1595-atom22479*atom1601)*atom3450;
atom66448 = -bFRR*epsiFRR*G_elastic*C22FRR*aFRR*atom66215+atom22397*C23FRR*bFRR*epsiFRR*G_elastic*atom66386*aFRR;
atom66451 = -C23FRR*bFRR*epsiFRR*G_elastic*atom66386*aFRR*atom66215-atom22397*atom66395*C33FRR*epsiFRR*G_elastic*atom66396;
atom67022 = atom66371*atom66451;

CKFRR_ = [atom3445*atom66382 , atom3446*atom66382 , 0 , atom66382*atom66222 , atom66233*atom66382 , atom66382*atom66238 , 0 , atom66249*atom66382 , 0 , 0 , 0 , atom9499*atom66382 , atom66260*atom66382 , atom66271*atom66382 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom9508*atom66382 , atom66274*atom66382 , atom66309*atom66382 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom66383*atom3445 , atom66384*atom3449+atom3446*atom66383 , atom66384*atom3450 , atom66383*atom66222+atom66384*atom66316+atom66357*atom66387 , atom66383*atom66233+atom66323*atom66384+atom66362*atom66387 , atom3441*atom66387+atom66384*atom66324+atom66383*atom66238 , 0 , atom66366*atom66387+atom66383*atom66249+atom66384*atom66331 , 0 , 0 , 0 , atom66383*atom9499+atom66384*atom9548 , atom66384*atom66338+atom66495+atom66260*atom66383 , atom66384*atom66345+atom66376*atom66387+atom66383*atom66271 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom66384*atom9557+atom66383*atom9508 , atom66495+atom66384*atom66348+atom66383*atom66274 , atom66384*atom66354+atom66381*atom66387+atom66383*atom66309 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , atom66388*atom3449 , atom66388*atom3450 , atom66388*atom66316+atom66357*atom66389 , atom66323*atom66388+atom66362*atom66389 , atom66389*atom3441+atom66388*atom66324 , 0 , atom66366*atom66389+atom66388*atom66331 , 0 , 0 , 0 , atom66388*atom9548 , atom66530+atom66388*atom66338 , atom66389*atom66376+atom66345*atom66388 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom66388*atom9557 , atom66388*atom66348+atom66530 , atom66381*atom66389+atom66388*atom66354 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom66390*atom3445 , atom66393*atom3449+atom66390*atom3446 , atom66393*atom3450 , atom66390*atom66222+atom66393*atom66316+atom66357*atom66398 , atom66390*atom66233+atom66393*atom66323+atom66362*atom66398 , atom66390*atom66238+atom66398*atom3441+atom66393*atom66324 , 0 , atom66366*atom66398+atom66393*atom66331+atom66390*atom66249 , 0 , 0 , 0 , atom66390*atom9499+atom66393*atom9548 , atom66572+atom66260*atom66390+atom66393*atom66338 , atom66398*atom66376+atom66393*atom66345+atom66390*atom66271 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom66393*atom9557+atom66390*atom9508 , atom66572+atom66393*atom66348+atom66390*atom66274 , atom66381*atom66398+atom66390*atom66309+atom66393*atom66354 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom66399*atom3445 , atom66402*atom3449+atom66399*atom3446 , atom66402*atom3450 , atom66399*atom66222+atom66402*atom66316+atom66405*atom66357 , atom66399*atom66233+atom66402*atom66323+atom66362*atom66405 , atom66399*atom66238+atom66405*atom3441+atom66402*atom66324 , 0 , atom66402*atom66331+atom66366*atom66405+atom66399*atom66249 , 0 , 0 , 0 , atom66402*atom9548+atom66399*atom9499 , atom66622+atom66399*atom66260+atom66402*atom66338 , atom66405*atom66376+atom66402*atom66345+atom66399*atom66271 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom66402*atom9557+atom66399*atom9508 , atom66402*atom66348+atom66622+atom66399*atom66274 , atom66381*atom66405+atom66402*atom66354+atom66399*atom66309 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3445*atom66406 , atom3446*atom66406+atom66409*atom3449 , atom3450*atom66409 , atom66406*atom66222+atom66316*atom66409+atom66412*atom66357 , atom66233*atom66406+atom66323*atom66409+atom66362*atom66412 , atom66412*atom3441+atom66406*atom66238+atom66324*atom66409 , 0 , atom66331*atom66409+atom66249*atom66406+atom66366*atom66412 , 0 , 0 , 0 , atom9548*atom66409+atom9499*atom66406 , atom66260*atom66406+atom66338*atom66409+atom66672 , atom66412*atom66376+atom66345*atom66409+atom66271*atom66406 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom9508*atom66406+atom66409*atom9557 , atom66274*atom66406+atom66672+atom66348*atom66409 , atom66354*atom66409+atom66412*atom66381+atom66309*atom66406 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3445*atom66413 , atom3449*atom66416+atom3446*atom66413 , atom3450*atom66416 , atom66413*atom66222+atom66316*atom66416+atom66419*atom66357 , atom66323*atom66416+atom66362*atom66419+atom66413*atom66233 , atom66419*atom3441+atom66413*atom66238+atom66324*atom66416 , 0 , atom66331*atom66416+atom66249*atom66413+atom66366*atom66419 , 0 , 0 , 0 , atom9499*atom66413+atom9548*atom66416 , atom66722+atom66338*atom66416+atom66260*atom66413 , atom66413*atom66271+atom66419*atom66376+atom66345*atom66416 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom9508*atom66413+atom9557*atom66416 , atom66722+atom66274*atom66413+atom66348*atom66416 , atom66309*atom66413+atom66354*atom66416+atom66419*atom66381 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3445*atom66420 , atom66421*atom3449+atom3446*atom66420 , atom3450*atom66421 , atom66420*atom66222+atom66357*atom66422+atom66316*atom66421 , atom66420*atom66233+atom66323*atom66421+atom66362*atom66422 , atom3441*atom66422+atom66420*atom66238+atom66324*atom66421 , 0 , atom66366*atom66422+atom66421*atom66331+atom66249*atom66420 , 0 , 0 , 0 , atom9548*atom66421+atom9499*atom66420 , atom66338*atom66421+atom66260*atom66420+atom66772 , atom66376*atom66422+atom66345*atom66421+atom66271*atom66420 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom66421*atom9557+atom9508*atom66420 , atom66421*atom66348+atom66274*atom66420+atom66772 , atom66354*atom66421+atom66381*atom66422+atom66309*atom66420 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom66423*atom3445 , atom66426*atom3449+atom3446*atom66423 , atom3450*atom66426 , atom66316*atom66426+atom66357*atom66429+atom66423*atom66222 , atom66362*atom66429+atom66423*atom66233+atom66323*atom66426 , atom66426*atom66324+atom3441*atom66429+atom66423*atom66238 , 0 , atom66426*atom66331+atom66366*atom66429+atom66249*atom66423 , 0 , 0 , 0 , atom66426*atom9548+atom66423*atom9499 , atom66822+atom66338*atom66426+atom66260*atom66423 , atom66345*atom66426+atom66423*atom66271+atom66376*atom66429 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom66426*atom9557+atom66423*atom9508 , atom66822+atom66423*atom66274+atom66426*atom66348 , atom66423*atom66309+atom66354*atom66426+atom66381*atom66429 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3445*atom66430 , atom3446*atom66430+atom66433*atom3449 , atom66433*atom3450 , atom66357*atom66436+atom66433*atom66316+atom66222*atom66430 , atom66362*atom66436+atom66233*atom66430+atom66323*atom66433 , atom66430*atom66238+atom66436*atom3441+atom66433*atom66324 , 0 , atom66249*atom66430+atom66433*atom66331+atom66366*atom66436 , 0 , 0 , 0 , atom66433*atom9548+atom9499*atom66430 , atom66872+atom66260*atom66430+atom66433*atom66338 , atom66271*atom66430+atom66436*atom66376+atom66345*atom66433 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom66433*atom9557+atom9508*atom66430 , atom66274*atom66430+atom66872+atom66433*atom66348 , atom66381*atom66436+atom66309*atom66430+atom66433*atom66354 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom66437*atom3445 , atom66437*atom3446+atom66438*atom3449 , atom3450*atom66438 , atom66439*atom66357+atom66437*atom66222+atom66316*atom66438 , atom66323*atom66438+atom66437*atom66233+atom66439*atom66362 , atom66437*atom66238+atom66439*atom3441+atom66324*atom66438 , 0 , atom66331*atom66438+atom66437*atom66249+atom66439*atom66366 , 0 , 0 , 0 , atom66437*atom9499+atom9548*atom66438 , atom66338*atom66438+atom66922+atom66260*atom66437 , atom66439*atom66376+atom66345*atom66438+atom66437*atom66271 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom9557*atom66438+atom66437*atom9508 , atom66437*atom66274+atom66922+atom66348*atom66438 , atom66439*atom66381+atom66354*atom66438+atom66437*atom66309 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom66440*atom3445 , atom3446*atom66440+atom66442*atom3449 , atom3450*atom66442 , atom66444*atom66357+atom66316*atom66442+atom66440*atom66222 , atom66323*atom66442+atom66362*atom66444+atom66440*atom66233 , atom66324*atom66442+atom66440*atom66238+atom66444*atom3441 , 0 , atom66442*atom66331+atom66249*atom66440+atom66366*atom66444 , 0 , 0 , 0 , atom9548*atom66442+atom66440*atom9499 , atom66338*atom66442+atom66260*atom66440+atom66972 , atom66440*atom66271+atom66444*atom66376+atom66345*atom66442 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom66442*atom9557+atom9508*atom66440 , atom66440*atom66274+atom66442*atom66348+atom66972 , atom66354*atom66442+atom66381*atom66444+atom66309*atom66440 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
atom3445*atom66445 , atom66448*atom3449+atom3446*atom66445 , atom66448*atom3450 , atom66448*atom66316+atom66445*atom66222+atom66451*atom66357 , atom66233*atom66445+atom66323*atom66448+atom66362*atom66451 , atom66445*atom66238+atom66451*atom3441+atom66448*atom66324 , 0 , atom66366*atom66451+atom66249*atom66445+atom66448*atom66331 , 0 , 0 , 0 , atom66448*atom9548+atom9499*atom66445 , atom66260*atom66445+atom67022+atom66448*atom66338 , atom66451*atom66376+atom66271*atom66445+atom66345*atom66448 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , atom66448*atom9557+atom9508*atom66445 , atom67022+atom66448*atom66348+atom66274*atom66445 , atom66381*atom66451+atom66309*atom66445+atom66448*atom66354 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0;
0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0];

%endfunction
