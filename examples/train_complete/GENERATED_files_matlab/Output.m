function Output_ = Output(q,qaux,dq,dqaux,ddq,ddqaux,unknowns,time,param,inputs)

xWAG = q( 1 ); 
yWAG = q( 2 ); 
zWAG = q( 3 ); 
aWAG = q( 4 ); 
bWAG = q( 5 ); 
cWAG = q( 6 ); 
cRSLD = q( 7 ); 
cFSLD = q( 8 ); 
zRBOG = q( 9 ); 
aRBOG = q( 10 ); 
bRBOG = q( 11 ); 
zFBOG = q( 12 ); 
aFBOG = q( 13 ); 
bFBOG = q( 14 ); 
zRWHSF = q( 15 ); 
aRWHSF = q( 16 ); 
bRWHSF = q( 17 ); 
zRWHSR = q( 18 ); 
aRWHSR = q( 19 ); 
bRWHSR = q( 20 ); 
zFWHSF = q( 21 ); 
aFWHSF = q( 22 ); 
bFWHSF = q( 23 ); 
zFWHSR = q( 24 ); 
aFWHSR = q( 25 ); 
bFWHSR = q( 26 ); 
bRAXBFL = q( 27 ); 
bRAXBFR = q( 28 ); 
bRAXBRL = q( 29 ); 
bRAXBRR = q( 30 ); 
bFAXBFL = q( 31 ); 
bFAXBFR = q( 32 ); 
bFAXBRL = q( 33 ); 
bFAXBRR = q( 34 ); 
xRMOTF = q( 35 ); 
yRMOTF = q( 36 ); 
zRMOTF = q( 37 ); 
bRMOTF = q( 38 ); 
xRMOTR = q( 39 ); 
yRMOTR = q( 40 ); 
zRMOTR = q( 41 ); 
bRMOTR = q( 42 ); 
bRROTF = q( 43 ); 
bRROTR = q( 44 ); 

thetaW_RFR = qaux( 1 ); 
uW_RFR = qaux( 2 ); 
uR_RFR = qaux( 3 ); 
xR_RFR = qaux( 4 ); 
thetaW_RFL = qaux( 5 ); 
uW_RFL = qaux( 6 ); 
uR_RFL = qaux( 7 ); 
xR_RFL = qaux( 8 ); 
thetaW_RRR = qaux( 9 ); 
uW_RRR = qaux( 10 ); 
uR_RRR = qaux( 11 ); 
xR_RRR = qaux( 12 ); 
thetaW_RRL = qaux( 13 ); 
uW_RRL = qaux( 14 ); 
uR_RRL = qaux( 15 ); 
xR_RRL = qaux( 16 ); 
thetaW_FFR = qaux( 17 ); 
uW_FFR = qaux( 18 ); 
uR_FFR = qaux( 19 ); 
xR_FFR = qaux( 20 ); 
thetaW_FFL = qaux( 21 ); 
uW_FFL = qaux( 22 ); 
uR_FFL = qaux( 23 ); 
xR_FFL = qaux( 24 ); 
thetaW_FRR = qaux( 25 ); 
uW_FRR = qaux( 26 ); 
uR_FRR = qaux( 27 ); 
xR_FRR = qaux( 28 ); 
thetaW_FRL = qaux( 29 ); 
uW_FRL = qaux( 30 ); 
uR_FRL = qaux( 31 ); 
xR_FRL = qaux( 32 ); 

dxWAG = dq( 1 ); 
dyWAG = dq( 2 ); 
dzWAG = dq( 3 ); 
daWAG = dq( 4 ); 
dbWAG = dq( 5 ); 
dcWAG = dq( 6 ); 
dcRSLD = dq( 7 ); 
dcFSLD = dq( 8 ); 
dzRBOG = dq( 9 ); 
daRBOG = dq( 10 ); 
dbRBOG = dq( 11 ); 
dzFBOG = dq( 12 ); 
daFBOG = dq( 13 ); 
dbFBOG = dq( 14 ); 
dzRWHSF = dq( 15 ); 
daRWHSF = dq( 16 ); 
dbRWHSF = dq( 17 ); 
dzRWHSR = dq( 18 ); 
daRWHSR = dq( 19 ); 
dbRWHSR = dq( 20 ); 
dzFWHSF = dq( 21 ); 
daFWHSF = dq( 22 ); 
dbFWHSF = dq( 23 ); 
dzFWHSR = dq( 24 ); 
daFWHSR = dq( 25 ); 
dbFWHSR = dq( 26 ); 
dbRAXBFL = dq( 27 ); 
dbRAXBFR = dq( 28 ); 
dbRAXBRL = dq( 29 ); 
dbRAXBRR = dq( 30 ); 
dbFAXBFL = dq( 31 ); 
dbFAXBFR = dq( 32 ); 
dbFAXBRL = dq( 33 ); 
dbFAXBRR = dq( 34 ); 
dxRMOTF = dq( 35 ); 
dyRMOTF = dq( 36 ); 
dzRMOTF = dq( 37 ); 
dbRMOTF = dq( 38 ); 
dxRMOTR = dq( 39 ); 
dyRMOTR = dq( 40 ); 
dzRMOTR = dq( 41 ); 
dbRMOTR = dq( 42 ); 
dbRROTF = dq( 43 ); 
dbRROTR = dq( 44 ); 

dthetaW_RFR = dqaux( 1 ); 
duW_RFR = dqaux( 2 ); 
duR_RFR = dqaux( 3 ); 
dxR_RFR = dqaux( 4 ); 
dthetaW_RFL = dqaux( 5 ); 
duW_RFL = dqaux( 6 ); 
duR_RFL = dqaux( 7 ); 
dxR_RFL = dqaux( 8 ); 
dthetaW_RRR = dqaux( 9 ); 
duW_RRR = dqaux( 10 ); 
duR_RRR = dqaux( 11 ); 
dxR_RRR = dqaux( 12 ); 
dthetaW_RRL = dqaux( 13 ); 
duW_RRL = dqaux( 14 ); 
duR_RRL = dqaux( 15 ); 
dxR_RRL = dqaux( 16 ); 
dthetaW_FFR = dqaux( 17 ); 
duW_FFR = dqaux( 18 ); 
duR_FFR = dqaux( 19 ); 
dxR_FFR = dqaux( 20 ); 
dthetaW_FFL = dqaux( 21 ); 
duW_FFL = dqaux( 22 ); 
duR_FFL = dqaux( 23 ); 
dxR_FFL = dqaux( 24 ); 
dthetaW_FRR = dqaux( 25 ); 
duW_FRR = dqaux( 26 ); 
duR_FRR = dqaux( 27 ); 
dxR_FRR = dqaux( 28 ); 
dthetaW_FRL = dqaux( 29 ); 
duW_FRL = dqaux( 30 ); 
duR_FRL = dqaux( 31 ); 
dxR_FRL = dqaux( 32 ); 

ddxWAG = ddq( 1 ); 
ddyWAG = ddq( 2 ); 
ddzWAG = ddq( 3 ); 
ddaWAG = ddq( 4 ); 
ddbWAG = ddq( 5 ); 
ddcWAG = ddq( 6 ); 
ddcRSLD = ddq( 7 ); 
ddcFSLD = ddq( 8 ); 
ddzRBOG = ddq( 9 ); 
ddaRBOG = ddq( 10 ); 
ddbRBOG = ddq( 11 ); 
ddzFBOG = ddq( 12 ); 
ddaFBOG = ddq( 13 ); 
ddbFBOG = ddq( 14 ); 
ddzRWHSF = ddq( 15 ); 
ddaRWHSF = ddq( 16 ); 
ddbRWHSF = ddq( 17 ); 
ddzRWHSR = ddq( 18 ); 
ddaRWHSR = ddq( 19 ); 
ddbRWHSR = ddq( 20 ); 
ddzFWHSF = ddq( 21 ); 
ddaFWHSF = ddq( 22 ); 
ddbFWHSF = ddq( 23 ); 
ddzFWHSR = ddq( 24 ); 
ddaFWHSR = ddq( 25 ); 
ddbFWHSR = ddq( 26 ); 
ddbRAXBFL = ddq( 27 ); 
ddbRAXBFR = ddq( 28 ); 
ddbRAXBRL = ddq( 29 ); 
ddbRAXBRR = ddq( 30 ); 
ddbFAXBFL = ddq( 31 ); 
ddbFAXBFR = ddq( 32 ); 
ddbFAXBRL = ddq( 33 ); 
ddbFAXBRR = ddq( 34 ); 
ddxRMOTF = ddq( 35 ); 
ddyRMOTF = ddq( 36 ); 
ddzRMOTF = ddq( 37 ); 
ddbRMOTF = ddq( 38 ); 
ddxRMOTR = ddq( 39 ); 
ddyRMOTR = ddq( 40 ); 
ddzRMOTR = ddq( 41 ); 
ddbRMOTR = ddq( 42 ); 
ddbRROTF = ddq( 43 ); 
ddbRROTR = ddq( 44 ); 

ddthetaW_RFR = ddqaux( 1 ); 
dduW_RFR = ddqaux( 2 ); 
dduR_RFR = ddqaux( 3 ); 
ddxR_RFR = ddqaux( 4 ); 
ddthetaW_RFL = ddqaux( 5 ); 
dduW_RFL = ddqaux( 6 ); 
dduR_RFL = ddqaux( 7 ); 
ddxR_RFL = ddqaux( 8 ); 
ddthetaW_RRR = ddqaux( 9 ); 
dduW_RRR = ddqaux( 10 ); 
dduR_RRR = ddqaux( 11 ); 
ddxR_RRR = ddqaux( 12 ); 
ddthetaW_RRL = ddqaux( 13 ); 
dduW_RRL = ddqaux( 14 ); 
dduR_RRL = ddqaux( 15 ); 
ddxR_RRL = ddqaux( 16 ); 
ddthetaW_FFR = ddqaux( 17 ); 
dduW_FFR = ddqaux( 18 ); 
dduR_FFR = ddqaux( 19 ); 
ddxR_FFR = ddqaux( 20 ); 
ddthetaW_FFL = ddqaux( 21 ); 
dduW_FFL = ddqaux( 22 ); 
dduR_FFL = ddqaux( 23 ); 
ddxR_FFL = ddqaux( 24 ); 
ddthetaW_FRR = ddqaux( 25 ); 
dduW_FRR = ddqaux( 26 ); 
dduR_FRR = ddqaux( 27 ); 
ddxR_FRR = ddqaux( 28 ); 
ddthetaW_FRL = ddqaux( 29 ); 
dduW_FRL = ddqaux( 30 ); 
dduR_FRL = ddqaux( 31 ); 
ddxR_FRL = ddqaux( 32 ); 

lambda1 = unknowns( 1 ); 
lambda2 = unknowns( 2 ); 
lambda3 = unknowns( 3 ); 
lambda4 = unknowns( 4 ); 
lambda5 = unknowns( 5 ); 
lambda6 = unknowns( 6 ); 
lambda7 = unknowns( 7 ); 
lambda8 = unknowns( 8 ); 

t= time ;

g = param( 1 ); 
L_OBOG_OAXBy = param( 2 ); 
L_OBOG_OAXBz = param( 3 ); 
L_OBOG_OSUSPy = param( 4 ); 
L_OBOG_OSUSPx = param( 5 ); 
L_OBOG_OSUSPz = param( 6 ); 
L_OBOG_OWHS = param( 7 ); 
L_OBOG_P1BOG = param( 8 ); 
L_MOT = param( 9 ); 
L_GEAR = param( 10 ); 
L_AXB1 = param( 11 ); 
L_AXB2 = param( 12 ); 
L_SUSP = param( 13 ); 
L_WHS = param( 14 ); 
L_RAIL = param( 15 ); 
L_WAG = param( 16 ); 
L_SUSPBEAM1 = param( 17 ); 
L_SUSPBEAM2 = param( 18 ); 
L_SLDx = param( 19 ); 
L_SLDy = param( 20 ); 
b_pend = param( 21 ); 
a_pend = param( 22 ); 
L0_1 = param( 23 ); 
L0_2 = param( 24 ); 
m_WAG = param( 25 ); 
I_WAGx = param( 26 ); 
I_WAGy = param( 27 ); 
I_WAGz = param( 28 ); 
xCGWAG = param( 29 ); 
yCGWAG = param( 30 ); 
zCGWAG = param( 31 ); 
G_BOGz = param( 32 ); 
m_BOG = param( 33 ); 
I_BOGx = param( 34 ); 
I_BOGy = param( 35 ); 
I_BOGz = param( 36 ); 
m_MOT = param( 37 ); 
I_MOTx = param( 38 ); 
I_MOTy = param( 39 ); 
I_MOTz = param( 40 ); 
m_ROT = param( 41 ); 
I_ROTx = param( 42 ); 
I_ROTy = param( 43 ); 
I_ROTz = param( 44 ); 
m_WHS = param( 45 ); 
I_WHSx = param( 46 ); 
I_WHSy = param( 47 ); 
I_WHSz = param( 48 ); 
I_CORy = param( 49 ); 
m_AXB = param( 50 ); 
I_AXBx = param( 51 ); 
I_AXBy = param( 52 ); 
I_AXBz = param( 53 ); 
m_SLD = param( 54 ); 
I_SLDx = param( 55 ); 
I_SLDy = param( 56 ); 
I_SLDz = param( 57 ); 
K_SSl = param( 58 ); 
C_SSl = param( 59 ); 
C_SSr = param( 60 ); 
K_SSr = param( 61 ); 
Kgear = param( 62 ); 
Cgear = param( 63 ); 
alpha_gear = param( 64 ); 
zROT = param( 65 ); 
zWHS = param( 66 ); 
K_S1 = param( 67 ); 
C_S1 = param( 68 ); 
K_S2 = param( 69 ); 
C_S2 = param( 70 ); 
aW_RFR = param( 71 ); 
bW_RFR = param( 72 ); 
cW_RFR = param( 73 ); 
dW_RFR = param( 74 ); 
lW_RFR = param( 75 ); 
aR_RFR = param( 76 ); 
bR_RFR = param( 77 ); 
cR_RFR = param( 78 ); 
dR_RFR = param( 79 ); 
lR_RFR = param( 80 ); 
RFRas = param( 81 ); 
RFRbs = param( 82 ); 
RFRcs = param( 83 ); 
RFRds = param( 84 ); 
RFRes = param( 85 ); 
RFRfs = param( 86 ); 
RFRstas = param( 87 ); 
RFRends = param( 88 ); 
irrRFRz = param( 89 ); 
aW_RFL = param( 90 ); 
bW_RFL = param( 91 ); 
cW_RFL = param( 92 ); 
dW_RFL = param( 93 ); 
lW_RFL = param( 94 ); 
aR_RFL = param( 95 ); 
bR_RFL = param( 96 ); 
cR_RFL = param( 97 ); 
dR_RFL = param( 98 ); 
lR_RFL = param( 99 ); 
RFLas = param( 100 ); 
RFLbs = param( 101 ); 
RFLcs = param( 102 ); 
RFLds = param( 103 ); 
RFLes = param( 104 ); 
RFLfs = param( 105 ); 
RFLstas = param( 106 ); 
RFLends = param( 107 ); 
irrRFLz = param( 108 ); 
aW_RRR = param( 109 ); 
bW_RRR = param( 110 ); 
cW_RRR = param( 111 ); 
dW_RRR = param( 112 ); 
lW_RRR = param( 113 ); 
aR_RRR = param( 114 ); 
bR_RRR = param( 115 ); 
cR_RRR = param( 116 ); 
dR_RRR = param( 117 ); 
lR_RRR = param( 118 ); 
RRRas = param( 119 ); 
RRRbs = param( 120 ); 
RRRcs = param( 121 ); 
RRRds = param( 122 ); 
RRRes = param( 123 ); 
RRRfs = param( 124 ); 
RRRstas = param( 125 ); 
RRRends = param( 126 ); 
irrRRRz = param( 127 ); 
aW_RRL = param( 128 ); 
bW_RRL = param( 129 ); 
cW_RRL = param( 130 ); 
dW_RRL = param( 131 ); 
lW_RRL = param( 132 ); 
aR_RRL = param( 133 ); 
bR_RRL = param( 134 ); 
cR_RRL = param( 135 ); 
dR_RRL = param( 136 ); 
lR_RRL = param( 137 ); 
RRLas = param( 138 ); 
RRLbs = param( 139 ); 
RRLcs = param( 140 ); 
RRLds = param( 141 ); 
RRLes = param( 142 ); 
RRLfs = param( 143 ); 
RRLstas = param( 144 ); 
RRLends = param( 145 ); 
irrRRLz = param( 146 ); 
aW_FFR = param( 147 ); 
bW_FFR = param( 148 ); 
cW_FFR = param( 149 ); 
dW_FFR = param( 150 ); 
lW_FFR = param( 151 ); 
aR_FFR = param( 152 ); 
bR_FFR = param( 153 ); 
cR_FFR = param( 154 ); 
dR_FFR = param( 155 ); 
lR_FFR = param( 156 ); 
FFRas = param( 157 ); 
FFRbs = param( 158 ); 
FFRcs = param( 159 ); 
FFRds = param( 160 ); 
FFRes = param( 161 ); 
FFRfs = param( 162 ); 
FFRstas = param( 163 ); 
FFRends = param( 164 ); 
irrFFRz = param( 165 ); 
aW_FFL = param( 166 ); 
bW_FFL = param( 167 ); 
cW_FFL = param( 168 ); 
dW_FFL = param( 169 ); 
lW_FFL = param( 170 ); 
aR_FFL = param( 171 ); 
bR_FFL = param( 172 ); 
cR_FFL = param( 173 ); 
dR_FFL = param( 174 ); 
lR_FFL = param( 175 ); 
FFLas = param( 176 ); 
FFLbs = param( 177 ); 
FFLcs = param( 178 ); 
FFLds = param( 179 ); 
FFLes = param( 180 ); 
FFLfs = param( 181 ); 
FFLstas = param( 182 ); 
FFLends = param( 183 ); 
irrFFLz = param( 184 ); 
aW_FRR = param( 185 ); 
bW_FRR = param( 186 ); 
cW_FRR = param( 187 ); 
dW_FRR = param( 188 ); 
lW_FRR = param( 189 ); 
aR_FRR = param( 190 ); 
bR_FRR = param( 191 ); 
cR_FRR = param( 192 ); 
dR_FRR = param( 193 ); 
lR_FRR = param( 194 ); 
FRRas = param( 195 ); 
FRRbs = param( 196 ); 
FRRcs = param( 197 ); 
FRRds = param( 198 ); 
FRRes = param( 199 ); 
FRRfs = param( 200 ); 
FRRstas = param( 201 ); 
FRRends = param( 202 ); 
irrFRRz = param( 203 ); 
aW_FRL = param( 204 ); 
bW_FRL = param( 205 ); 
cW_FRL = param( 206 ); 
dW_FRL = param( 207 ); 
lW_FRL = param( 208 ); 
aR_FRL = param( 209 ); 
bR_FRL = param( 210 ); 
cR_FRL = param( 211 ); 
dR_FRL = param( 212 ); 
lR_FRL = param( 213 ); 
FRLas = param( 214 ); 
FRLbs = param( 215 ); 
FRLcs = param( 216 ); 
FRLds = param( 217 ); 
FRLes = param( 218 ); 
FRLfs = param( 219 ); 
FRLstas = param( 220 ); 
FRLends = param( 221 ); 
irrFRLz = param( 222 ); 
E_elastic = param( 223 ); 
nu_poisson = param( 224 ); 
G_elastic = param( 225 ); 
aRFR = param( 226 ); 
bRFR = param( 227 ); 
C11RFR = param( 228 ); 
C22RFR = param( 229 ); 
C23RFR = param( 230 ); 
C33RFR = param( 231 ); 
aRFL = param( 232 ); 
bRFL = param( 233 ); 
C11RFL = param( 234 ); 
C22RFL = param( 235 ); 
C23RFL = param( 236 ); 
C33RFL = param( 237 ); 
aRRR = param( 238 ); 
bRRR = param( 239 ); 
C11RRR = param( 240 ); 
C22RRR = param( 241 ); 
C23RRR = param( 242 ); 
C33RRR = param( 243 ); 
aRRL = param( 244 ); 
bRRL = param( 245 ); 
C11RRL = param( 246 ); 
C22RRL = param( 247 ); 
C23RRL = param( 248 ); 
C33RRL = param( 249 ); 
aFFR = param( 250 ); 
bFFR = param( 251 ); 
C11FFR = param( 252 ); 
C22FFR = param( 253 ); 
C23FFR = param( 254 ); 
C33FFR = param( 255 ); 
aFFL = param( 256 ); 
bFFL = param( 257 ); 
C11FFL = param( 258 ); 
C22FFL = param( 259 ); 
C23FFL = param( 260 ); 
C33FFL = param( 261 ); 
aFRR = param( 262 ); 
bFRR = param( 263 ); 
C11FRR = param( 264 ); 
C22FRR = param( 265 ); 
C23FRR = param( 266 ); 
C33FRR = param( 267 ); 
aFRL = param( 268 ); 
bFRL = param( 269 ); 
C11FRL = param( 270 ); 
C22FRL = param( 271 ); 
C23FRL = param( 272 ); 
C33FRL = param( 273 ); 
epsiRFR = param( 274 ); 
epsiRFL = param( 275 ); 
epsiRRR = param( 276 ); 
epsiRRL = param( 277 ); 
epsiFFR = param( 278 ); 
epsiFFL = param( 279 ); 
epsiFRR = param( 280 ); 
epsiFRL = param( 281 ); 

T_RMOTF = inputs( 1 ); 
T_RMOTR = inputs( 2 ); 
T_FBRKF = inputs( 3 ); 
T_FBRKR = inputs( 4 ); 
T_RBRKF = inputs( 5 ); 
T_RBRKR = inputs( 6 ); 
Fx_RFR = inputs( 7 ); 
Fy_RFR = inputs( 8 ); 
Mz_RFR = inputs( 9 ); 
Fx_RFL = inputs( 10 ); 
Fy_RFL = inputs( 11 ); 
Mz_RFL = inputs( 12 ); 
Fx_RRR = inputs( 13 ); 
Fy_RRR = inputs( 14 ); 
Mz_RRR = inputs( 15 ); 
Fx_RRL = inputs( 16 ); 
Fy_RRL = inputs( 17 ); 
Mz_RRL = inputs( 18 ); 
Fx_FRR = inputs( 19 ); 
Fy_FRR = inputs( 20 ); 
Mz_FRR = inputs( 21 ); 
Fx_FRL = inputs( 22 ); 
Fy_FRL = inputs( 23 ); 
Mz_FRL = inputs( 24 ); 
Fx_FFR = inputs( 25 ); 
Fy_FFR = inputs( 26 ); 
Mz_FFR = inputs( 27 ); 
Fx_FFL = inputs( 28 ); 
Fy_FFL = inputs( 29 ); 
Mz_FFL = inputs( 30 ); 

atom1176 = cos(cWAG);
atom1174 = cos(aWAG);
atom862 = cos(aRBOG);
atom865 = sin(bRBOG);
atom867 = atom862*atom865;
atom864 = cos(bRBOG);
atom869 = atom862*atom864;
atom1725 = -L_OBOG_OWHS*atom865;
atom21749 = atom1725+zRWHSF*atom869;
atom863 = sin(aRBOG);
atom903 = -daRBOG*atom865;
atom21747 = -atom863*zRWHSF;
atom21800 = dzRWHSF*atom867+atom21749*dbRBOG-atom903*atom21747;
atom1210 = sin(cRSLD);
atom1717 = L_OBOG_OWHS*atom864;
atom21746 = atom1717+atom867*zRWHSF;
atom902 = daRBOG*atom864;
atom1209 = cos(cRSLD);
atom21801 = -atom21749*atom902+atom903*atom21746-dzRWHSF*atom863;
atom21753 = atom21746*atom1209-atom21747*atom1210;
atom1180 = atom1176*atom1174;
atom21813 = dcRSLD*atom21753+atom21800*atom1210+atom1209*atom21801;
atom1172 = cos(bWAG);
atom1177 = sin(cWAG);
atom1175 = sin(aWAG);
atom1181 = -atom1175*atom1176;
atom1173 = sin(bWAG);
atom21756 = atom21746*atom1210+atom1209*atom21747;
atom1190 = -atom1181*atom1173+atom1172*atom1177;
atom21812 = -atom21756*dcRSLD-atom21801*atom1210+atom21800*atom1209;
atom1193 = atom1177*atom1173+atom1172*atom1181;
atom21805 = -atom21746*dbRBOG+atom902*atom21747+dzRWHSF*atom869+dzRBOG;
atom1179 = atom1175*atom1177;
atom1187 = atom1172*atom1179+atom1176*atom1173;
atom21750 = atom21749+zRBOG;
atom0 = -1/2*L_WAG;
atom21757 = atom0+atom21753;
atom1184 = atom1172*atom1176-atom1173*atom1179;
atom1178 = -atom1177*atom1174;
atom21822 = atom1175*dbWAG+dcWAG;
atom21762 = atom1187*atom21750+atom21757*atom1184+atom21756*atom1178;
atom1194 = -atom1173*atom1174;
atom1195 = atom1172*atom1174;
atom21814 = atom1174*dbWAG;
atom21772 = atom1195*atom21750+atom1175*atom21756+atom21757*atom1194;
atom21818 = daWAG*atom1176-atom1177*atom21814;
atom1213 = atom1209*atom1184+atom1178*atom1210;
atom1234 = atom1213*atom865+atom864*atom1187;
atom1216 = -atom1184*atom1210+atom1209*atom1178;
atom1252 = atom862*atom1234-atom863*atom1216;
atom30 = cos(aRWHSF);
atom1249 = atom863*atom1234+atom862*atom1216;
atom31 = sin(aRWHSF);
atom1704 = uW_RFR-lW_RFR;
atom1710 = ((bW_RFR+aW_RFR*atom1704)*atom1704+cW_RFR)*atom1704+dW_RFR;
atom1276 = atom1252*atom30-atom1249*atom31;
atom1713 = cos(thetaW_RFR)*atom1710;
atom1273 = atom1252*atom31+atom30*atom1249;
atom1231 = atom1213*atom864-atom1187*atom865;
atom1711 = -atom1710*sin(thetaW_RFR);
atom1702 = -(0.5)*L_WHS;
atom868 = atom863*atom864;
atom1714 = atom30*atom1702;
atom1726 = atom868*atom1714;
atom1715 = atom1702*atom31;
atom1716 = atom1715+zRWHSF;
atom1730 = atom1716*atom869+zRBOG+atom1726+atom1725;
atom866 = atom863*atom865;
atom1718 = atom866*atom1714;
atom1721 = atom1717+atom867*atom1716+atom1718;
atom1722 = atom862*atom1714;
atom1724 = -atom863*atom1716+atom1722;
atom1736 = atom1721*atom1210+atom1724*atom1209;
atom1737 = atom0-atom1724*atom1210+atom1721*atom1209;
atom1760 = atom1276*atom1713+uW_RFR*atom1273+atom1231*atom1711;
atom21773 = atom21762+xWAG;
atom21709 = daRWHSF+daRBOG;
atom21701 = dbRWHSF*atom30;
atom21702 = dbRWHSF*atom31;
atom21708 = atom21701*atom863+atom862*atom21702;
atom21712 = atom864*atom21709+atom21708*atom865;
atom21716 = -atom863*atom21702+dbRBOG+atom21701*atom862;
atom21730 = atom21716*atom1209+dbWAG+atom21712*atom1210;
atom21719 = -atom21716*atom1210+atom21712*atom1209;
atom21723 = atom21708*atom864-atom21709*atom865+dcRSLD;
atom21729 = atom1172*atom21723-atom21719*atom1173;
atom21776 = atom1184*atom1737-atom21773+atom1730*atom1187+atom1760+xWAG+atom1736*atom1178;
atom21744 = atom21729*atom1174+dcWAG+atom1175*atom21730;
atom21733 = atom21730*atom1174-atom1175*atom21729;
atom21737 = daWAG+atom21719*atom1172+atom1173*atom21723;
atom1225 = atom1194*atom1209+atom1175*atom1210;
atom1243 = atom1225*atom864-atom1195*atom865;
atom1246 = atom1195*atom864+atom1225*atom865;
atom1228 = atom1175*atom1209-atom1194*atom1210;
atom1264 = atom862*atom1246-atom863*atom1228;
atom1261 = atom862*atom1228+atom863*atom1246;
atom1285 = atom30*atom1261+atom1264*atom31;
atom1288 = -atom1261*atom31+atom30*atom1264;
atom1770 = atom1243*atom1711+uW_RFR*atom1285+atom1288*atom1713;
atom21775 = atom21772+zWAG;
atom21740 = atom21737*atom1176-atom21733*atom1177;
atom21778 = atom1730*atom1195+atom1770+atom1175*atom1736-atom21775+zWAG+atom1194*atom1737;
atom21851 = atom1193*atom21805+dyWAG+atom1180*atom21813-atom21772*atom21818+atom21822*atom21762+atom1190*atom21812;
atom1818 = (RFRstas-RFRends)^(-1);
atom1831 = -RFRas*atom1818;
atom1820 = atom1818*(RFRstas-xR_RFR);
atom1822 = atom1820*RFRas+RFRbs;
atom1834 = -atom1822*atom1818+atom1831*atom1820;
atom1824 = atom1820*atom1822+RFRcs;
atom1837 = -atom1818*atom1824+atom1820*atom1834;
atom1826 = RFRds+atom1820*atom1824;
atom1840 = atom1820*atom1837-atom1818*atom1826;
atom1857 = -atom1834*atom1818;
atom1860 = -atom1818*atom1837;
atom1864 = -atom1818*atom1840;
atom1843 = -atom1818*(atom1820*atom1826+RFRes)+atom1820*atom1840;
atom1867 = 2*(atom1860+atom1820*(atom1857-atom1831*atom1820*atom1818))*atom1820+2*atom1864;
atom1845 = 1+atom1843^2;
atom1846 = sqrt(atom1845);
atom1872 = -atom1846^(-2)*atom1843*atom1867*atom1845^(-1/2);
atom1876 = 1+(0.5)*atom1846^(-1)*atom1867*L_RAIL+(0.5)*atom1872*atom1843*L_RAIL;
atom1878 = -(0.5)*atom1872*L_RAIL+atom1843;
atom1914 = atom1876^2;
atom1922 = (atom1914+atom1878^2)^(-1/2);
atom21854 = atom21776*atom21744+atom21851-atom21740*atom21778;
atom21743 = atom21733*atom1176+atom21737*atom1177;
atom21767 = atom21757*atom1190+atom1193*atom21750+atom1180*atom21756;
atom1219 = atom1180*atom1210+atom1190*atom1209;
atom1237 = atom864*atom1219-atom1193*atom865;
atom1222 = atom1180*atom1209-atom1190*atom1210;
atom1240 = atom1219*atom865+atom1193*atom864;
atom1255 = atom862*atom1222+atom863*atom1240;
atom1258 = -atom863*atom1222+atom862*atom1240;
atom1279 = atom1258*atom31+atom1255*atom30;
atom1282 = atom1258*atom30-atom1255*atom31;
atom1765 = uW_RFR*atom1279+atom1711*atom1237+atom1282*atom1713;
atom21774 = atom21767+yWAG;
atom21777 = atom1180*atom1736-atom21774+atom1765+atom1190*atom1737+yWAG+atom1730*atom1193;
atom21821 = atom1176*atom21814+daWAG*atom1177;
atom21850 = atom1184*atom21812+dxWAG+atom21813*atom1178-atom21822*atom21767+atom1187*atom21805+atom21772*atom21821;
atom1810 = uR_RFR-lR_RFR;
atom1811 = aR_RFR*atom1810;
atom1812 = atom1811+bR_RFR;
atom1879 = atom1812+atom1811;
atom1881 = cR_RFR+atom1812*atom1810+atom1879*atom1810;
atom1927 = (1+atom1881^2)^(-1/2);
atom21852 = dzWAG+atom1195*atom21805-atom21762*atom21821+atom21818*atom21767+atom1194*atom21812+atom1175*atom21813;
atom1882 = atom1881*atom1878;
atom1883 = -atom1876*atom1881;
atom1916 = (atom1914+atom1882^2+atom1883^2)^(-1/2);
atom1917 = atom1882*atom1916;
atom1918 = atom1916*atom1883;
atom1919 = atom1876*atom1916;
atom21858 = atom1702*atom1285;
atom21857 = atom1702*atom1279;
atom21861 = -atom21744*atom21857+atom21858*atom21743;
atom21856 = atom1273*atom1702;
atom21867 = atom21740*atom21857-atom21856*atom21743;
atom21864 = -atom21740*atom21858+atom21856*atom21744;
atom1962 = uW_RFL-lW_RFL;
atom1968 = dW_RFL+(cW_RFL+(aW_RFL*atom1962+bW_RFL)*atom1962)*atom1962;
atom1971 = atom1968*cos(thetaW_RFL);
atom1969 = -sin(thetaW_RFL)*atom1968;
atom1972 = -atom1715+zRWHSF;
atom1981 = zRBOG+atom1972*atom869-atom1726+atom1725;
atom1975 = atom1972*atom867+atom1717-atom1718;
atom1977 = -atom1722-atom863*atom1972;
atom1987 = atom1977*atom1209+atom1975*atom1210;
atom1988 = atom0-atom1977*atom1210+atom1975*atom1209;
atom2021 = atom1243*atom1969+uW_RFL*atom1285+atom1288*atom1971;
atom21899 = atom2021+atom1175*atom1987+atom1988*atom1194-atom21775+atom1981*atom1195+zWAG;
atom2016 = atom1969*atom1237+uW_RFL*atom1279+atom1282*atom1971;
atom21898 = -atom21774+atom2016+atom1193*atom1981+atom1988*atom1190+atom1180*atom1987+yWAG;
atom2069 = (RFLstas-RFLends)^(-1);
atom2071 = atom2069*(RFLstas-xR_RFL);
atom2073 = atom2071*RFLas+RFLbs;
atom2075 = RFLcs+atom2071*atom2073;
atom2077 = atom2071*atom2075+RFLds;
atom2082 = -atom2069*RFLas;
atom2085 = atom2082*atom2071-atom2073*atom2069;
atom2088 = -atom2069*atom2075+atom2071*atom2085;
atom2091 = atom2071*atom2088-atom2069*atom2077;
atom2094 = atom2071*atom2091-atom2069*(atom2071*atom2077+RFLes);
atom2096 = 1+atom2094^2;
atom2097 = sqrt(atom2096);
atom2108 = -atom2085*atom2069;
atom2112 = -atom2069*atom2088;
atom2105 = -atom2069*atom2091;
atom2118 = 2*atom2105+(2*atom2112+(-(2.0)*atom2082*atom2071*atom2069+2*atom2108)*atom2071)*atom2071;
atom2123 = -atom2094*atom2096^(-1/2)*atom2118*atom2097^(-2);
atom2127 = 1-(0.5)*atom2094*atom2123*L_RAIL-(0.5)*atom2118*atom2097^(-1)*L_RAIL;
atom2129 = atom2094+(0.5)*atom2123*L_RAIL;
atom2165 = atom2127^2;
atom2173 = (atom2129^2+atom2165)^(-1/2);
atom2011 = atom1276*atom1971+atom1231*atom1969+uW_RFL*atom1273;
atom21897 = atom1981*atom1187+atom2011+atom1987*atom1178+atom1988*atom1184-atom21773+xWAG;
atom21910 = -atom21740*atom21899+atom21897*atom21744+atom21851;
atom2061 = uR_RFL-lR_RFL;
atom2062 = atom2061*aR_RFL;
atom2063 = atom2062+bR_RFL;
atom2130 = atom2063+atom2062;
atom2132 = atom2063*atom2061+cR_RFL+atom2061*atom2130;
atom2178 = (1+atom2132^2)^(-1/2);
atom2134 = -atom2127*atom2132;
atom2133 = atom2129*atom2132;
atom2167 = (atom2165+atom2133^2+atom2134^2)^(-1/2);
atom2170 = atom2167*atom2127;
atom2169 = atom2167*atom2134;
atom2168 = atom2167*atom2133;
atom21986 = -atom863*zRWHSR;
atom21985 = -atom1717+atom867*zRWHSR;
atom21995 = atom21986*atom1209+atom21985*atom1210;
atom21988 = zRWHSR*atom869-atom1725;
atom22040 = -dzRWHSR*atom863+atom903*atom21985-atom21988*atom902;
atom22039 = -atom21986*atom903+atom21988*dbRBOG+dzRWHSR*atom867;
atom22051 = -atom22040*atom1210-atom21995*dcRSLD+atom22039*atom1209;
atom21992 = -atom21986*atom1210+atom1209*atom21985;
atom22052 = atom22039*atom1210+atom21992*dcRSLD+atom22040*atom1209;
atom22044 = -dbRBOG*atom21985+dzRWHSR*atom869+dzRBOG+atom21986*atom902;
atom21989 = atom21988+zRBOG;
atom21996 = atom0+atom21992;
atom22011 = atom1175*atom21995+atom1194*atom21996+atom21989*atom1195;
atom22006 = atom1193*atom21989+atom1180*atom21995+atom1190*atom21996;
atom50 = sin(aRWHSR);
atom2224 = atom50*atom1702;
atom2225 = atom2224+zRWHSR;
atom49 = cos(aRWHSR);
atom2223 = atom49*atom1702;
atom2233 = atom868*atom2223;
atom2237 = zRBOG+atom2233-atom1725+atom2225*atom869;
atom2226 = atom866*atom2223;
atom2229 = -atom1717+atom2226+atom867*atom2225;
atom2230 = atom862*atom2223;
atom2232 = atom2230-atom863*atom2225;
atom2243 = atom2229*atom1210+atom1209*atom2232;
atom2244 = atom0+atom1209*atom2229-atom2232*atom1210;
atom2212 = uW_RRR-lW_RRR;
atom2218 = atom2212*(cW_RRR+atom2212*(bW_RRR+atom2212*aW_RRR))+dW_RRR;
atom2222 = atom2218*cos(thetaW_RRR);
atom1325 = atom49*atom1264-atom50*atom1261;
atom2220 = -sin(thetaW_RRR)*atom2218;
atom1322 = atom49*atom1261+atom50*atom1264;
atom2277 = atom2222*atom1325+uW_RRR*atom1322+atom1243*atom2220;
atom22014 = zWAG+atom22011;
atom21940 = atom49*dbRWHSR;
atom21941 = atom50*dbRWHSR;
atom21947 = atom21940*atom863+atom862*atom21941;
atom21948 = daRBOG+daRWHSR;
atom21962 = atom21947*atom864-atom21948*atom865+dcRSLD;
atom21951 = atom21948*atom864+atom21947*atom865;
atom21955 = -atom863*atom21941+dbRBOG+atom21940*atom862;
atom21958 = atom21951*atom1209-atom21955*atom1210;
atom21968 = atom21962*atom1172-atom21958*atom1173;
atom21969 = atom1209*atom21955+atom21951*atom1210+dbWAG;
atom21972 = -atom1175*atom21968+atom21969*atom1174;
atom21976 = daWAG+atom21958*atom1172+atom21962*atom1173;
atom22017 = -atom22014+atom1195*atom2237+atom2277+atom1194*atom2244+zWAG+atom1175*atom2243;
atom21982 = atom21972*atom1176+atom21976*atom1177;
atom1316 = atom1255*atom49+atom1258*atom50;
atom1319 = -atom1255*atom50+atom1258*atom49;
atom2272 = atom1316*uW_RRR+atom1319*atom2222+atom2220*atom1237;
atom22013 = atom22006+yWAG;
atom22016 = atom2272+atom1180*atom2243+atom1190*atom2244-atom22013+atom1193*atom2237+yWAG;
atom21983 = atom21968*atom1174+atom21969*atom1175+dcWAG;
atom22080 = -atom22006*atom21822+atom1184*atom22051+dxWAG+atom22052*atom1178+atom1187*atom22044+atom21821*atom22011;
atom2326 = (RRRstas-RRRends)^(-1);
atom2327 = atom2326*(RRRstas-xR_RRR);
atom2329 = atom2327*RRRas+RRRbs;
atom2331 = RRRcs+atom2327*atom2329;
atom2338 = -atom2326*RRRas;
atom2341 = -atom2329*atom2326+atom2327*atom2338;
atom2344 = atom2327*atom2341-atom2331*atom2326;
atom2333 = RRRds+atom2327*atom2331;
atom2347 = -atom2333*atom2326+atom2327*atom2344;
atom2350 = -atom2326*(atom2327*atom2333+RRRes)+atom2327*atom2347;
atom2352 = 1+atom2350^2;
atom2353 = sqrt(atom2352);
atom2361 = -atom2326*atom2341;
atom2367 = -atom2344*atom2326;
atom2372 = -atom2347*atom2326;
atom2374 = 2*atom2372+atom2327*(2*atom2367+atom2327*(-(2.0)*atom2327*atom2338*atom2326+2*atom2361));
atom2379 = -atom2350*atom2352^(-1/2)*atom2374*atom2353^(-2);
atom2385 = -(0.5)*L_RAIL*atom2379+atom2350;
atom2383 = 1+(0.5)*L_RAIL*atom2374*atom2353^(-1)+(0.5)*atom2350*L_RAIL*atom2379;
atom2421 = atom2383^2;
atom2429 = (atom2385^2+atom2421)^(-1/2);
atom21979 = -atom21972*atom1177+atom1176*atom21976;
atom1310 = atom49*atom1249+atom50*atom1252;
atom1313 = -atom50*atom1249+atom49*atom1252;
atom2267 = uW_RRR*atom1310+atom2222*atom1313+atom1231*atom2220;
atom22001 = atom21996*atom1184+atom21989*atom1187+atom21995*atom1178;
atom22012 = atom22001+xWAG;
atom22015 = atom2244*atom1184+atom2267+atom2243*atom1178-atom22012+xWAG+atom2237*atom1187;
atom22081 = atom21822*atom22001+atom1193*atom22044+dyWAG-atom21818*atom22011+atom22052*atom1180+atom1190*atom22051;
atom22084 = atom21983*atom22015-atom22017*atom21979+atom22081;
atom22082 = dzWAG+atom1195*atom22044+atom22006*atom21818+atom22052*atom1175-atom22001*atom21821+atom1194*atom22051;
atom2317 = uR_RRR-lR_RRR;
atom2318 = atom2317*aR_RRR;
atom2319 = atom2318+bR_RRR;
atom2386 = atom2318+atom2319;
atom2388 = atom2317*atom2386+cR_RRR+atom2317*atom2319;
atom2434 = (1+atom2388^2)^(-1/2);
atom2389 = atom2385*atom2388;
atom2390 = -atom2383*atom2388;
atom2423 = (atom2390^2+atom2389^2+atom2421)^(-1/2);
atom2425 = atom2423*atom2390;
atom2424 = atom2423*atom2389;
atom2426 = atom2423*atom2383;
atom22086 = atom1702*atom1310;
atom22087 = atom1316*atom1702;
atom22097 = -atom21982*atom22086+atom21979*atom22087;
atom22088 = atom1702*atom1322;
atom22091 = -atom21983*atom22087+atom21982*atom22088;
atom22094 = atom22086*atom21983-atom22088*atom21979;
atom2469 = uW_RRL-lW_RRL;
atom2475 = dW_RRL+atom2469*(cW_RRL+atom2469*(atom2469*aW_RRL+bW_RRL));
atom2478 = atom2475*cos(thetaW_RRL);
atom2476 = -sin(thetaW_RRL)*atom2475;
atom2479 = -atom2224+zRWHSR;
atom2482 = -atom1717+atom867*atom2479-atom2226;
atom2484 = -atom863*atom2479-atom2230;
atom2494 = atom1209*atom2484+atom2482*atom1210;
atom2495 = -atom2484*atom1210+atom2482*atom1209+atom0;
atom2488 = zRBOG-atom2233+atom2479*atom869-atom1725;
atom2528 = uW_RRL*atom1322+atom2476*atom1243+atom2478*atom1325;
atom22128 = atom2528+atom1195*atom2488-atom22014+atom1175*atom2494+zWAG+atom1194*atom2495;
atom2523 = atom2476*atom1237+atom1316*uW_RRL+atom1319*atom2478;
atom22127 = atom1180*atom2494+atom2523+atom1193*atom2488+atom1190*atom2495-atom22013+yWAG;
atom2577 = (RRLstas-RRLends)^(-1);
atom2578 = (RRLstas-xR_RRL)*atom2577;
atom2580 = atom2578*RRLas+RRLbs;
atom2582 = RRLcs+atom2578*atom2580;
atom2584 = atom2578*atom2582+RRLds;
atom2589 = -RRLas*atom2577;
atom2592 = atom2578*atom2589-atom2580*atom2577;
atom2595 = -atom2582*atom2577+atom2578*atom2592;
atom2598 = atom2578*atom2595-atom2584*atom2577;
atom2601 = atom2578*atom2598-(atom2578*atom2584+RRLes)*atom2577;
atom2603 = 1+atom2601^2;
atom2604 = sqrt(atom2603);
atom2616 = -atom2592*atom2577;
atom2612 = -atom2595*atom2577;
atom2623 = -atom2598*atom2577;
atom2625 = 2*atom2623-2*atom2578*(atom2578*(atom2578*atom2589*atom2577-atom2616)-atom2612);
atom2630 = -atom2603^(-1/2)*atom2601*atom2625*atom2604^(-2);
atom2634 = 1-(0.5)*atom2601*atom2630*L_RAIL-(0.5)*atom2625*L_RAIL*atom2604^(-1);
atom2636 = (0.5)*atom2630*L_RAIL+atom2601;
atom2672 = atom2634^2;
atom2680 = (atom2672+atom2636^2)^(-1/2);
atom2518 = uW_RRL*atom1310+atom2476*atom1231+atom2478*atom1313;
atom22126 = atom1184*atom2495+atom2488*atom1187-atom22012+atom2518+xWAG+atom2494*atom1178;
atom22139 = -atom21979*atom22128+atom22126*atom21983+atom22081;
atom2568 = uR_RRL-lR_RRL;
atom2569 = atom2568*aR_RRL;
atom2570 = bR_RRL+atom2569;
atom2637 = atom2570+atom2569;
atom2639 = atom2570*atom2568+atom2568*atom2637+cR_RRL;
atom2685 = (1+atom2639^2)^(-1/2);
atom2641 = -atom2639*atom2634;
atom2640 = atom2639*atom2636;
atom2674 = (atom2672+atom2641^2+atom2640^2)^(-1/2);
atom2677 = atom2634*atom2674;
atom2676 = atom2641*atom2674;
atom2675 = atom2674*atom2640;
atom1019 = sin(bFBOG);
atom1018 = cos(bFBOG);
atom1016 = cos(aFBOG);
atom1023 = atom1018*atom1016;
atom2741 = -L_OBOG_OWHS*atom1019;
atom22217 = atom2741+atom1023*zFWHSF;
atom1056 = atom1018*daFBOG;
atom1021 = atom1019*atom1016;
atom2733 = atom1018*L_OBOG_OWHS;
atom22214 = atom1021*zFWHSF+atom2733;
atom1057 = -atom1019*daFBOG;
atom1017 = sin(aFBOG);
atom1497 = sin(cFSLD);
atom22269 = -dzFWHSF*atom1017-atom22217*atom1056+atom22214*atom1057;
atom22215 = -zFWHSF*atom1017;
atom22268 = dbFBOG*atom22217+atom1021*dzFWHSF-atom1057*atom22215;
atom1496 = cos(cFSLD);
atom22224 = atom1496*atom22215+atom1497*atom22214;
atom22280 = atom22268*atom1496-atom22224*dcFSLD-atom1497*atom22269;
atom22221 = -atom1497*atom22215+atom22214*atom1496;
atom22281 = atom22221*dcFSLD+atom1497*atom22268+atom22269*atom1496;
atom22273 = -dbFBOG*atom22214+dzFBOG+atom1056*atom22215+atom1023*dzFWHSF;
atom22225 = -atom0+atom22221;
atom22218 = zFBOG+atom22217;
atom22230 = atom22225*atom1184+atom22218*atom1187+atom22224*atom1178;
atom22240 = atom1194*atom22225+atom22218*atom1195+atom1175*atom22224;
atom1512 = atom1194*atom1496+atom1497*atom1175;
atom2720 = uW_FFR-lW_FFR;
atom2726 = dW_FFR+(cW_FFR+(bW_FFR+aW_FFR*atom2720)*atom2720)*atom2720;
atom1530 = -atom1019*atom1195+atom1018*atom1512;
atom2727 = -sin(thetaW_FFR)*atom2726;
atom1533 = atom1018*atom1195+atom1019*atom1512;
atom1515 = atom1175*atom1496-atom1497*atom1194;
atom498 = sin(aFWHSF);
atom1551 = -atom1515*atom1017+atom1016*atom1533;
atom497 = cos(aFWHSF);
atom1548 = atom1533*atom1017+atom1515*atom1016;
atom1571 = atom497*atom1548+atom498*atom1551;
atom2729 = atom2726*cos(thetaW_FFR);
atom1574 = -atom498*atom1548+atom497*atom1551;
atom2730 = atom497*atom1702;
atom1022 = atom1018*atom1017;
atom2742 = atom2730*atom1022;
atom2731 = atom498*atom1702;
atom2732 = atom2731+zFWHSF;
atom2746 = atom2741+zFBOG+atom2742+atom1023*atom2732;
atom1020 = atom1019*atom1017;
atom2734 = atom1020*atom2730;
atom2737 = atom1021*atom2732+atom2733+atom2734;
atom2738 = atom1016*atom2730;
atom2740 = -atom2732*atom1017+atom2738;
atom2752 = atom1497*atom2737+atom2740*atom1496;
atom2753 = -atom1497*atom2740-atom0+atom2737*atom1496;
atom2786 = atom1571*uW_FFR+atom2729*atom1574+atom1530*atom2727;
atom22243 = atom22240+zWAG;
atom22169 = atom497*dbFWHSF;
atom22170 = atom498*dbFWHSF;
atom22176 = atom22169*atom1017+atom22170*atom1016;
atom22177 = daFBOG+daFWHSF;
atom22191 = -atom1019*atom22177+atom1018*atom22176+dcFSLD;
atom22180 = atom1018*atom22177+atom22176*atom1019;
atom22184 = dbFBOG-atom22170*atom1017+atom1016*atom22169;
atom22187 = atom22180*atom1496-atom1497*atom22184;
atom22197 = atom1172*atom22191-atom1173*atom22187;
atom22198 = atom1497*atom22180+atom22184*atom1496+dbWAG;
atom22201 = atom22198*atom1174-atom1175*atom22197;
atom22205 = daWAG+atom1172*atom22187+atom1173*atom22191;
atom22246 = -atom22243+atom2753*atom1194+atom2746*atom1195+atom2786+atom1175*atom2752+zWAG;
atom22208 = atom22205*atom1176-atom22201*atom1177;
atom1500 = atom1496*atom1184+atom1497*atom1178;
atom1521 = atom1019*atom1500+atom1018*atom1187;
atom1503 = atom1496*atom1178-atom1497*atom1184;
atom1539 = -atom1503*atom1017+atom1016*atom1521;
atom1536 = atom1521*atom1017+atom1503*atom1016;
atom1562 = atom497*atom1539-atom498*atom1536;
atom1559 = atom497*atom1536+atom498*atom1539;
atom1518 = atom1018*atom1500-atom1019*atom1187;
atom2776 = atom1559*uW_FFR+atom2727*atom1518+atom2729*atom1562;
atom22241 = atom22230+xWAG;
atom22212 = atom22197*atom1174+dcWAG+atom1175*atom22198;
atom22244 = -atom22241+atom2752*atom1178+atom2746*atom1187+atom2776+atom2753*atom1184+xWAG;
atom22310 = dyWAG+atom21822*atom22230+atom22273*atom1193+atom1190*atom22280-atom21818*atom22240+atom1180*atom22281;
atom2834 = (FFRends-FFRstas)^(-1);
atom2836 = atom2834*(xR_FFR-FFRstas);
atom2838 = FFRbs+atom2836*FFRas;
atom2840 = FFRcs+atom2836*atom2838;
atom2842 = FFRds+atom2836*atom2840;
atom2847 = atom2834*FFRas;
atom2850 = atom2834*atom2838+atom2836*atom2847;
atom2853 = atom2834*atom2840+atom2836*atom2850;
atom2856 = atom2836*atom2853+atom2842*atom2834;
atom2859 = atom2836*atom2856+atom2834*(FFRes+atom2836*atom2842);
atom2861 = 1+atom2859^2;
atom2862 = sqrt(atom2861);
atom2871 = atom2834*atom2850;
atom2870 = atom2834*atom2853;
atom2881 = atom2834*atom2856;
atom2883 = 2*atom2881+2*atom2836*(atom2870+atom2836*(atom2871+atom2836*atom2834*atom2847));
atom2888 = -atom2862^(-2)*atom2859*atom2861^(-1/2)*atom2883;
atom2892 = 1+(0.5)*atom2888*atom2859*L_RAIL+(0.5)*atom2862^(-1)*atom2883*L_RAIL;
atom2894 = atom2859-(0.5)*atom2888*L_RAIL;
atom2930 = atom2892^2;
atom2938 = (atom2894^2+atom2930)^(-1/2);
atom22313 = atom22310-atom22246*atom22208+atom22212*atom22244;
atom22235 = atom1193*atom22218+atom1180*atom22224+atom1190*atom22225;
atom1506 = atom1190*atom1496+atom1497*atom1180;
atom1527 = atom1019*atom1506+atom1193*atom1018;
atom1509 = atom1180*atom1496-atom1497*atom1190;
atom1545 = atom1527*atom1016-atom1017*atom1509;
atom1542 = atom1016*atom1509+atom1527*atom1017;
atom1568 = atom497*atom1545-atom498*atom1542;
atom1565 = atom497*atom1542+atom498*atom1545;
atom1524 = -atom1193*atom1019+atom1018*atom1506;
atom2781 = uW_FFR*atom1565+atom1524*atom2727+atom2729*atom1568;
atom22242 = atom22235+yWAG;
atom22245 = atom2753*atom1190+atom1180*atom2752-atom22242+atom2781+yWAG+atom2746*atom1193;
atom22211 = atom22205*atom1177+atom22201*atom1176;
atom22309 = atom1184*atom22280+atom22281*atom1178+dxWAG+atom22240*atom21821-atom21822*atom22235+atom22273*atom1187;
atom2826 = uR_FFR-lR_FFR;
atom2827 = atom2826*aR_FFR;
atom2828 = bR_FFR+atom2827;
atom2895 = atom2828+atom2827;
atom2897 = atom2826*atom2895+atom2828*atom2826+cR_FFR;
atom2943 = (1+atom2897^2)^(-1/2);
atom22311 = dzWAG+atom22273*atom1195-atom21821*atom22230+atom22281*atom1175+atom21818*atom22235+atom1194*atom22280;
atom2899 = -atom2892*atom2897;
atom2898 = atom2894*atom2897;
atom2932 = (atom2899^2+atom2930+atom2898^2)^(-1/2);
atom2933 = atom2932*atom2898;
atom2934 = atom2899*atom2932;
atom2935 = atom2932*atom2892;
atom22315 = atom1559*atom1702;
atom22317 = atom1702*atom1571;
atom22323 = -atom22317*atom22208+atom22212*atom22315;
atom22316 = atom1702*atom1565;
atom22320 = -atom22212*atom22316+atom22317*atom22211;
atom22326 = -atom22211*atom22315+atom22316*atom22208;
atom2988 = -atom2731+zFWHSF;
atom2993 = -atom1017*atom2988-atom2738;
atom2991 = atom1021*atom2988+atom2733-atom2734;
atom3003 = atom1497*atom2991+atom2993*atom1496;
atom3004 = atom2991*atom1496-atom0-atom1497*atom2993;
atom2997 = atom2741+zFBOG+atom1023*atom2988-atom2742;
atom2978 = uW_FFL-lW_FFL;
atom2984 = dW_FFL+atom2978*(atom2978*(atom2978*aW_FFL+bW_FFL)+cW_FFL);
atom2987 = cos(thetaW_FFL)*atom2984;
atom2985 = -sin(thetaW_FFL)*atom2984;
atom3037 = uW_FFL*atom1571+atom2987*atom1574+atom1530*atom2985;
atom22357 = -atom22243+atom3004*atom1194+atom1175*atom3003+zWAG+atom3037+atom2997*atom1195;
atom3032 = atom2987*atom1568+uW_FFL*atom1565+atom2985*atom1524;
atom22356 = atom3004*atom1190+atom3032+atom1193*atom2997+atom1180*atom3003-atom22242+yWAG;
atom3086 = (FFLstas-FFLends)^(-1);
atom3087 = (FFLstas-xR_FFL)*atom3086;
atom3098 = -FFLas*atom3086;
atom3089 = atom3087*FFLas+FFLbs;
atom3101 = atom3087*atom3098-atom3089*atom3086;
atom3091 = FFLcs+atom3087*atom3089;
atom3104 = atom3087*atom3101-atom3091*atom3086;
atom3124 = -atom3086*atom3101;
atom3121 = -atom3104*atom3086;
atom3093 = FFLds+atom3087*atom3091;
atom3107 = atom3087*atom3104-atom3093*atom3086;
atom3131 = -atom3107*atom3086;
atom3110 = atom3087*atom3107-(atom3087*atom3093+FFLes)*atom3086;
atom3112 = 1+atom3110^2;
atom3113 = sqrt(atom3112);
atom3134 = 2*atom3087*((atom3124-atom3087*atom3098*atom3086)*atom3087+atom3121)+2*atom3131;
atom3139 = -atom3134*atom3113^(-2)*atom3110*atom3112^(-1/2);
atom3143 = 1-(0.5)*atom3139*atom3110*L_RAIL-(0.5)*atom3134*atom3113^(-1)*L_RAIL;
atom3145 = atom3110+(0.5)*atom3139*L_RAIL;
atom3181 = atom3143^2;
atom3189 = (atom3181+atom3145^2)^(-1/2);
atom3027 = atom2987*atom1562+uW_FFL*atom1559+atom2985*atom1518;
atom22355 = -atom22241+atom3027+atom2997*atom1187+atom3003*atom1178+atom3004*atom1184+xWAG;
atom22368 = atom22212*atom22355+atom22310-atom22357*atom22208;
atom3077 = uR_FFL-lR_FFL;
atom3078 = aR_FFL*atom3077;
atom3079 = atom3078+bR_FFL;
atom3146 = atom3079+atom3078;
atom3148 = cR_FFL+atom3077*atom3146+atom3079*atom3077;
atom3194 = (1+atom3148^2)^(-1/2);
atom3149 = atom3145*atom3148;
atom3150 = -atom3143*atom3148;
atom3183 = (atom3181+atom3149^2+atom3150^2)^(-1/2);
atom3186 = atom3183*atom3143;
atom3185 = atom3150*atom3183;
atom3184 = atom3183*atom3149;
atom22412 = daFBOG+daFWHSR;
atom683 = cos(aFWHSR);
atom22404 = atom683*dbFWHSR;
atom684 = sin(aFWHSR);
atom22405 = atom684*dbFWHSR;
atom22411 = atom1016*atom22405+atom22404*atom1017;
atom22426 = atom1018*atom22411-atom1019*atom22412+dcFSLD;
atom22419 = -atom1017*atom22405+atom22404*atom1016+dbFBOG;
atom22415 = atom1018*atom22412+atom22411*atom1019;
atom22422 = atom22415*atom1496-atom22419*atom1497;
atom22432 = atom1172*atom22426-atom1173*atom22422;
atom22433 = atom1497*atom22415+atom22419*atom1496+dbWAG;
atom22452 = -atom2741+zFWHSR*atom1023;
atom22453 = zFBOG+atom22452;
atom22450 = -zFWHSR*atom1017;
atom22449 = zFWHSR*atom1021-atom2733;
atom22459 = atom22450*atom1496+atom1497*atom22449;
atom22456 = atom22449*atom1496-atom1497*atom22450;
atom22460 = atom22456-atom0;
atom22470 = atom22460*atom1190+atom1180*atom22459+atom1193*atom22453;
atom3239 = atom683*atom1702;
atom3249 = atom3239*atom1022;
atom3240 = atom684*atom1702;
atom3241 = zFWHSR+atom3240;
atom3253 = -atom2741+zFBOG+atom3241*atom1023+atom3249;
atom3246 = atom3239*atom1016;
atom3248 = -atom3241*atom1017+atom3246;
atom3242 = atom3239*atom1020;
atom3245 = -atom2733+atom3241*atom1021+atom3242;
atom3260 = -atom1497*atom3248+atom3245*atom1496-atom0;
atom3259 = atom1497*atom3245+atom3248*atom1496;
atom3229 = uW_FRR-lW_FRR;
atom3235 = atom3229*(cW_FRR+atom3229*(bW_FRR+atom3229*aW_FRR))+dW_FRR;
atom1604 = atom683*atom1545-atom684*atom1542;
atom3238 = atom3235*cos(thetaW_FRR);
atom1601 = atom683*atom1542+atom684*atom1545;
atom3236 = -sin(thetaW_FRR)*atom3235;
atom3288 = atom3236*atom1524+atom1604*atom3238+uW_FRR*atom1601;
atom22477 = atom22470+yWAG;
atom22447 = atom22432*atom1174+atom1175*atom22433+dcWAG;
atom22480 = atom1193*atom3253-atom22477+atom3288+atom1180*atom3259+atom1190*atom3260+yWAG;
atom22436 = -atom1175*atom22432+atom22433*atom1174;
atom22440 = daWAG+atom1172*atom22422+atom1173*atom22426;
atom22475 = atom22460*atom1194+atom22453*atom1195+atom1175*atom22459;
atom1607 = atom683*atom1548+atom684*atom1551;
atom1610 = -atom684*atom1548+atom683*atom1551;
atom3293 = atom1610*atom3238+atom1607*uW_FRR+atom3236*atom1530;
atom22478 = atom22475+zWAG;
atom22446 = atom22440*atom1177+atom1176*atom22436;
atom22481 = -atom22478+atom1175*atom3259+atom3293+atom1194*atom3260+zWAG+atom3253*atom1195;
atom22508 = atom1023*dzFWHSR+dzFBOG-dbFBOG*atom22449+atom22450*atom1056;
atom22504 = -dzFWHSR*atom1017-atom1056*atom22452+atom22449*atom1057;
atom22503 = -atom1057*atom22450+dbFBOG*atom22452+atom1021*dzFWHSR;
atom22516 = atom22504*atom1496+atom1497*atom22503+atom22456*dcFSLD;
atom22515 = atom1496*atom22503-atom1497*atom22504-dcFSLD*atom22459;
atom22544 = atom22475*atom21821+dxWAG+atom22515*atom1184+atom22516*atom1178+atom22508*atom1187-atom21822*atom22470;
atom3341 = (FRRstas-FRRends)^(-1);
atom3353 = -atom3341*FRRas;
atom3342 = atom3341*(FRRstas-xR_FRR);
atom3344 = FRRas*atom3342+FRRbs;
atom3356 = -atom3341*atom3344+atom3353*atom3342;
atom3346 = FRRcs+atom3344*atom3342;
atom3359 = atom3342*atom3356-atom3341*atom3346;
atom3348 = FRRds+atom3346*atom3342;
atom3362 = atom3359*atom3342-atom3341*atom3348;
atom3365 = atom3362*atom3342-atom3341*(atom3342*atom3348+FRRes);
atom3367 = 1+atom3365^2;
atom3368 = sqrt(atom3367);
atom3378 = -atom3341*atom3356;
atom3383 = -atom3341*atom3359;
atom3387 = -atom3341*atom3362;
atom3389 = 2*atom3342*(atom3383-(atom3341*atom3353*atom3342-atom3378)*atom3342)+2*atom3387;
atom3394 = -atom3368^(-2)*atom3365*atom3389*atom3367^(-1/2);
atom3398 = 1+(0.5)*atom3368^(-1)*atom3389*L_RAIL+(0.5)*atom3365*L_RAIL*atom3394;
atom3400 = -(0.5)*L_RAIL*atom3394+atom3365;
atom3436 = atom3398^2;
atom3444 = (atom3400^2+atom3436)^(-1/2);
atom1598 = atom683*atom1539-atom684*atom1536;
atom1595 = atom684*atom1539+atom683*atom1536;
atom3283 = atom3236*atom1518+uW_FRR*atom1595+atom1598*atom3238;
atom22465 = atom22453*atom1187+atom1178*atom22459+atom22460*atom1184;
atom22476 = atom22465+xWAG;
atom22479 = atom3260*atom1184+atom3253*atom1187+atom3259*atom1178-atom22476+atom3283+xWAG;
atom22443 = -atom1177*atom22436+atom22440*atom1176;
atom22545 = atom22465*atom21822+dyWAG+atom1193*atom22508+atom1180*atom22516+atom22515*atom1190-atom21818*atom22475;
atom22548 = -atom22443*atom22481+atom22447*atom22479+atom22545;
atom22546 = dzWAG+atom22508*atom1195+atom21818*atom22470+atom22515*atom1194+atom1175*atom22516-atom22465*atom21821;
atom3332 = uR_FRR-lR_FRR;
atom3333 = atom3332*aR_FRR;
atom3334 = atom3333+bR_FRR;
atom3401 = atom3333+atom3334;
atom3403 = atom3332*atom3334+cR_FRR+atom3332*atom3401;
atom3449 = (1+atom3403^2)^(-1/2);
atom3404 = atom3400*atom3403;
atom3405 = -atom3398*atom3403;
atom3438 = (atom3405^2+atom3404^2+atom3436)^(-1/2);
atom3439 = atom3404*atom3438;
atom3440 = atom3405*atom3438;
atom3441 = atom3398*atom3438;
atom22551 = atom1601*atom1702;
atom22550 = atom1702*atom1595;
atom22561 = -atom22550*atom22446+atom22443*atom22551;
atom22552 = atom1607*atom1702;
atom22555 = -atom22551*atom22447+atom22552*atom22446;
atom22558 = atom22447*atom22550-atom22443*atom22552;
atom3494 = zFWHSR-atom3240;
atom3499 = -atom3494*atom1017-atom3246;
atom3497 = atom3494*atom1021-atom2733-atom3242;
atom3510 = atom3497*atom1496-atom0-atom1497*atom3499;
atom3509 = atom1497*atom3497+atom3499*atom1496;
atom3503 = -atom2741+zFBOG+atom3494*atom1023-atom3249;
atom3484 = uW_FRL-lW_FRL;
atom3490 = atom3484*(cW_FRL+(atom3484*aW_FRL+bW_FRL)*atom3484)+dW_FRL;
atom3493 = cos(thetaW_FRL)*atom3490;
atom3491 = -sin(thetaW_FRL)*atom3490;
atom3533 = uW_FRL*atom1595+atom1598*atom3493+atom3491*atom1518;
atom22596 = atom3533+atom3509*atom1178+atom3510*atom1184+atom1187*atom3503-atom22476+xWAG;
atom3543 = atom1610*atom3493+atom1607*uW_FRL+atom1530*atom3491;
atom22598 = -atom22478+atom3543+atom1195*atom3503+atom3510*atom1194+atom1175*atom3509+zWAG;
atom3591 = (FRLstas-FRLends)^(-1);
atom3592 = atom3591*(FRLstas-xR_FRL);
atom3594 = FRLbs+atom3592*FRLas;
atom3596 = FRLcs+atom3592*atom3594;
atom3598 = FRLds+atom3596*atom3592;
atom3603 = -FRLas*atom3591;
atom3606 = -atom3594*atom3591+atom3603*atom3592;
atom3609 = -atom3596*atom3591+atom3592*atom3606;
atom3612 = -atom3598*atom3591+atom3609*atom3592;
atom3615 = -atom3591*(atom3592*atom3598+FRLes)+atom3612*atom3592;
atom3617 = 1+atom3615^2;
atom3618 = sqrt(atom3617);
atom3629 = -atom3606*atom3591;
atom3634 = -atom3609*atom3591;
atom3626 = -atom3612*atom3591;
atom3639 = 2*atom3626+2*atom3592*(atom3634+atom3592*(atom3629-atom3603*atom3592*atom3591));
atom3644 = -atom3615*atom3617^(-1/2)*atom3639*atom3618^(-2);
atom3650 = atom3615+(0.5)*atom3644*L_RAIL;
atom3648 = 1-(0.5)*atom3615*atom3644*L_RAIL-(0.5)*atom3639*L_RAIL*atom3618^(-1);
atom3686 = atom3648^2;
atom3694 = (atom3650^2+atom3686)^(-1/2);
atom22609 = -atom22443*atom22598+atom22447*atom22596+atom22545;
atom3538 = atom1604*atom3493+uW_FRL*atom1601+atom3491*atom1524;
atom22597 = atom1193*atom3503+atom1180*atom3509-atom22477+atom3510*atom1190+atom3538+yWAG;
atom3582 = uR_FRL-lR_FRL;
atom3583 = atom3582*aR_FRL;
atom3584 = atom3583+bR_FRL;
atom3653 = cR_FRL+atom3582*(atom3584+atom3583)+atom3584*atom3582;
atom3699 = (1+atom3653^2)^(-1/2);
atom3654 = atom3650*atom3653;
atom3655 = -atom3648*atom3653;
atom3688 = (atom3655^2+atom3654^2+atom3686)^(-1/2);
atom3689 = atom3654*atom3688;
atom3690 = atom3688*atom3655;
atom3691 = atom3688*atom3648;
atom5523 = 2*atom2568*aR_RRL+2*atom2637;

Output_ = [sqrt(lambda1^2);
atom1922*atom1876*(atom21850+atom21778*atom21743-atom21744*atom21777)+atom1922*atom21854*atom1878;
atom1881*atom1927*(atom21852+atom21740*atom21777-atom21776*atom21743)+atom21854*atom1927;
atom1919*atom21744+atom1918*atom21743+atom21740*atom1917;
dbRWHSF;
1/2*sqrt((atom21852+atom21867)^2+(atom21851+atom21864)^2+(atom21850+atom21861)^2)+1/2*sqrt((atom21744*atom1760-atom21740*atom1770)^2+(atom21740*atom1765-atom1760*atom21743)^2+(atom1770*atom21743-atom21744*atom1765)^2);
abs(sqrt(atom1711^2+atom1713^2))*sqrt(1-(atom1918*atom1279+atom1919*atom1285+atom1917*atom1273)^2);
10000.0;
6000000.0;
abs(2*aR_RFR*atom1810+2*atom1879)^(-1)*abs((1+atom1881^(2.0))^(1.5));
sqrt(lambda2^2);
(atom21850+atom21899*atom21743-atom21744*atom21898)*atom2127*atom2173+atom2129*atom2173*atom21910;
atom2178*atom21910+(atom21852-atom21897*atom21743+atom21740*atom21898)*atom2178*atom2132;
atom2169*atom21743+atom21744*atom2170+atom21740*atom2168;
dbRWHSF;
1/2*sqrt((atom21850-atom21861)^2+(atom21852-atom21867)^2+(atom21851-atom21864)^2)+1/2*sqrt((atom2016*atom21740-atom2011*atom21743)^2+(atom2021*atom21740-atom21744*atom2011)^2+(atom2021*atom21743-atom2016*atom21744)^2);
abs(sqrt(atom1969^2+atom1971^2))*(1-(atom2169*atom1279+atom1285*atom2170+atom1273*atom2168)^2)^(-1/2);
10000.0;
6000000.0;
abs(2*atom2130+2*atom2061*aR_RFL)^(-1)*abs((1+atom2132^(2.0))^(1.5));
sqrt(lambda3^2);
atom2429*atom2383*(atom22080-atom22016*atom21983+atom22017*atom21982)+atom2385*atom2429*atom22084;
atom2434*atom22084+(atom22016*atom21979+atom22082-atom21982*atom22015)*atom2434*atom2388;
atom2426*atom21983+atom21979*atom2424+atom2425*atom21982;
dbRWHSR;
1/2*sqrt((atom22091+atom22080)^2+(atom22081+atom22094)^2+(atom22097+atom22082)^2)+1/2*sqrt((atom2272*atom21979-atom21982*atom2267)^2+(atom21979*atom2277-atom2267*atom21983)^2+(atom2272*atom21983-atom21982*atom2277)^2);
abs(sqrt(atom2222^2+atom2220^2))*(1-(atom2426*atom1322+atom1316*atom2425+atom2424*atom1310)^2)^(-1/2);
10000.0;
6000000.0;
abs((1+atom2388^(2.0))^(1.5))*abs(2*atom2317*aR_RRR+2*atom2386)^(-1);
sqrt(lambda4^2);
atom22139*atom2680*atom2636+(atom22080+atom21982*atom22128-atom22127*atom21983)*atom2634*atom2680;
atom22139*atom2685-(atom22126*atom21982-atom22082-atom22127*atom21979)*atom2639*atom2685;
atom2675*atom21979+atom21982*atom2676+atom2677*atom21983;
dbRWHSR;
1/2*sqrt((atom22081-atom22094)^2+(atom22097-atom22082)^2+(atom22091-atom22080)^2)+1/2*sqrt((atom2518*atom21983-atom2528*atom21979)^2+(atom21982*atom2518-atom2523*atom21979)^2+(atom2528*atom21982-atom2523*atom21983)^2);
(1-(atom2675*atom1310+atom1316*atom2676+atom2677*atom1322)^2)^(-1/2)*abs(sqrt(atom2476^2+atom2478^2));
10000.0;
6000000.0;
abs((1+atom2639^(2.0))^(1.5))*abs(atom5523)^(-1);
sqrt(lambda5^2);
atom2894*atom22313*atom2938+(atom22309+atom22211*atom22246-atom22212*atom22245)*atom2892*atom2938;
atom2943*atom2897*(atom22311-atom22211*atom22244+atom22245*atom22208)+atom2943*atom22313;
atom2934*atom22211+atom2933*atom22208+atom2935*atom22212;
dbFWHSF;
1/2*sqrt((atom2781*atom22208-atom22211*atom2776)^2+(atom22212*atom2776-atom2786*atom22208)^2+(atom22212*atom2781-atom2786*atom22211)^2)+1/2*sqrt((atom22323+atom22310)^2+(atom22326+atom22311)^2+(atom22309+atom22320)^2);
abs(sqrt(atom2729^2+atom2727^2))*(1-(atom1559*atom2933+atom2935*atom1571+atom2934*atom1565)^2)^(-1/2);
10000.0;
6000000.0;
abs(2*atom2895+2*atom2826*aR_FFR)^(-1)*abs((1+atom2897^(2.0))^(1.5));
sqrt(lambda6^2);
atom3145*atom3189*atom22368-atom3189*(atom22356*atom22212-atom22309-atom22357*atom22211)*atom3143;
(atom22311-atom22211*atom22355+atom22356*atom22208)*atom3194*atom3148+atom3194*atom22368;
atom3186*atom22212+atom3185*atom22211+atom22208*atom3184;
dbFWHSF;
1/2*sqrt((atom22326-atom22311)^2+(atom22309-atom22320)^2+(atom22323-atom22310)^2)+1/2*sqrt((atom22211*atom3037-atom22212*atom3032)^2+(atom3032*atom22208-atom3027*atom22211)^2+(atom22212*atom3027-atom3037*atom22208)^2);
abs(sqrt(atom2987^2+atom2985^2))*(1-(atom3186*atom1571+atom3185*atom1565+atom1559*atom3184)^2)^(-1/2);
10000.0;
6000000.0;
abs((1+atom3148^(2.0))^(1.5))*abs(2*aR_FFL*atom3077+2*atom3146)^(-1);
sqrt(lambda7^2);
-atom3444*atom3398*(atom22447*atom22480-atom22544-atom22446*atom22481)+atom3444*atom3400*atom22548;
(atom22546+atom22443*atom22480-atom22479*atom22446)*atom3403*atom3449+atom22548*atom3449;
atom3440*atom22446+atom22447*atom3441+atom22443*atom3439;
dbFWHSR;
1/2*sqrt((atom22558+atom22545)^2+(atom22561+atom22546)^2+(atom22544+atom22555)^2)+1/2*sqrt((atom22447*atom3283-atom22443*atom3293)^2+(atom3293*atom22446-atom22447*atom3288)^2+(atom22443*atom3288-atom3283*atom22446)^2);
(1-(atom3439*atom1595+atom3440*atom1601+atom1607*atom3441)^2)^(-1/2)*abs(sqrt(atom3236^2+atom3238^2));
10000.0;
6000000.0;
abs((1+atom3403^(2.0))^(1.5))*abs(2*atom3401+2*atom3332*aR_FRR)^(-1);
sqrt(lambda8^2);
(atom22544+atom22598*atom22446-atom22597*atom22447)*atom3694*atom3648+atom3650*atom3694*atom22609;
atom3699*atom22609+atom3699*atom3653*(atom22597*atom22443+atom22546-atom22596*atom22446);
atom3690*atom22446+atom22447*atom3691+atom22443*atom3689;
dbFWHSR;
1/2*sqrt((atom22447*atom3538-atom3543*atom22446)^2+(atom22443*atom3538-atom3533*atom22446)^2+(atom22443*atom3543-atom3533*atom22447)^2)+1/2*sqrt((atom22558-atom22545)^2+(atom22561-atom22546)^2+(atom22544-atom22555)^2);
(1-(atom3689*atom1595+atom1607*atom3691+atom3690*atom1601)^2)^(-1/2)*abs(sqrt(atom3493^2+atom3491^2));
10000.0;
6000000.0;
abs((1+atom2639^(2.0))^(1.5))*abs(atom5523)^(-1)];

%endfunction
