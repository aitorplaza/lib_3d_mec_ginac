/* ********************************************************************************************* */
/*  Solve_N_R_while_splines */ 
/* ********************************************************************************************* */
int			Solve_N_R_while_splines(int N, int M, double * (* Vector_Eq)(), double * (* Matrix_Jac)(), double * Vector, double * Inverse, double * delta)
{
int			iteration = 0, iterate = 1, i;
/*double		delta[M];*/
double		conv_err = 1.;
double	* _Vector_Eq;
double	* _Matrix_Jac;

double Buffer[2*N*N];
double BufferJT[2*N*M];
double BufferAUXCols[2*M*M];
double BufferAUXRows[2*N*N];
double BufferIAUXCols[2*M*M];
double BufferIAUXRows[2*N*N];

#define MY_CONV_CRITERION		(1e-12) /* As eq have dim of mm^2 this implies an error of 10^-4mm */
#define FAIL_CONV_ITERATIONS	150
#define LARGE_CONV_ERROR		10000

#ifndef NEWTON_RAPHSON_TOLERANCE
#define NEWTON_RAPHSON_TOLERANCE 1.0e-16
#endif

double conv_criterion = NEWTON_RAPHSON_TOLERANCE;

while (iterate) {					/* check for large error and return error flag if no convergence */
	if ((conv_err > +LARGE_CONV_ERROR) || (conv_err < -LARGE_CONV_ERROR)) {		/* we can't converge */
		return -2;
	};

	iteration++;		/* check iteration to see if the kinematics can reach the convergence criteria */
	if (iteration > FAIL_CONV_ITERATIONS) {										/* we can't converge */
		return -5;
	}

	_Vector_Eq=Vector_Eq();
	_Matrix_Jac=Matrix_Jac();		

	if(N==M){
	  Mat_Inv( N, _Matrix_Jac, Inverse, Buffer);}
	else{
	  Mat_PInv( N, M, _Matrix_Jac, Inverse, BufferJT,BufferAUXCols,BufferAUXRows,BufferIAUXCols,BufferIAUXRows);}
    
	Mat_Vect_Mult(M, N, Inverse, _Vector_Eq, +1, delta);

	for (i=0; i<M; i++) {							/* subtract delta from last iterations pos values */
		Vector[(i)] -= delta[i];						/* Re-calculate dep coord. */
	}

	conv_err = 0.0;		
	for (i = 0; i < N; i++) {	/* determine value of conv_error (used to determine if no convergence) */
		conv_err += fabs(_Vector_Eq[i]);
	}

	iterate = 0;			/* assume iteration is done */
	for (i = 0; i < N; i++) {
		if (fabs(_Vector_Eq[i]) > conv_criterion) {				/* check if needs another iteration */
			iterate = 1;
		}
	}
}
return 0;
}
/* ********************************************************************************************* */
