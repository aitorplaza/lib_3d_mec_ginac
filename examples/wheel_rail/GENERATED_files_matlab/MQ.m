function MQ_ = MQ(q,qaux,dq,dqaux,time,param,inputs)

x = q( 1 ); 
y = q( 2 ); 
b = q( 3 ); 
c = q( 4 ); 
z = q( 5 ); 
a = q( 6 ); 

thetaW_R = qaux( 1 ); 
uW_R = qaux( 2 ); 
uR_R = qaux( 3 ); 
sR_R = qaux( 4 ); 
thetaW_L = qaux( 5 ); 
uW_L = qaux( 6 ); 
uR_L = qaux( 7 ); 
sR_L = qaux( 8 ); 

dx = dq( 1 ); 
dy = dq( 2 ); 
db = dq( 3 ); 
dc = dq( 4 ); 
dz = dq( 5 ); 
da = dq( 6 ); 

dthetaW_R = dqaux( 1 ); 
duW_R = dqaux( 2 ); 
duR_R = dqaux( 3 ); 
dsR_R = dqaux( 4 ); 
dthetaW_L = dqaux( 5 ); 
duW_L = dqaux( 6 ); 
duR_L = dqaux( 7 ); 
dsR_L = dqaux( 8 ); 

t= time ;

g = param( 1 ); 
a_pend = param( 2 ); 
b_pend = param( 3 ); 
L_R = param( 4 ); 
L_WHS = param( 5 ); 
a_rail = param( 6 ); 
mWHS = param( 7 ); 
I_WHSx = param( 8 ); 
I_WHSy = param( 9 ); 
I_WHSz = param( 10 ); 
tor = param( 11 ); 
asR = param( 12 ); 
bsR = param( 13 ); 
csR = param( 14 ); 
dsR = param( 15 ); 
esR = param( 16 ); 
fsR = param( 17 ); 
stasR = param( 18 ); 
endsR = param( 19 ); 
usRz = param( 20 ); 
aW_R = param( 21 ); 
bW_R = param( 22 ); 
cW_R = param( 23 ); 
dW_R = param( 24 ); 
lW_R = param( 25 ); 
aR_R = param( 26 ); 
bR_R = param( 27 ); 
cR_R = param( 28 ); 
dR_R = param( 29 ); 
lR_R = param( 30 ); 
asL = param( 31 ); 
bsL = param( 32 ); 
csL = param( 33 ); 
dsL = param( 34 ); 
esL = param( 35 ); 
fsL = param( 36 ); 
stasL = param( 37 ); 
endsL = param( 38 ); 
usLz = param( 39 ); 
aW_L = param( 40 ); 
bW_L = param( 41 ); 
cW_L = param( 42 ); 
dW_L = param( 43 ); 
lW_L = param( 44 ); 
aR_L = param( 45 ); 
bR_L = param( 46 ); 
cR_L = param( 47 ); 
dR_L = param( 48 ); 
lR_L = param( 49 ); 
E_elastic = param( 50 ); 
nu_poisson = param( 51 ); 
G_elastic = param( 52 ); 
aR = param( 53 ); 
bR = param( 54 ); 
aL = param( 55 ); 
bL = param( 56 ); 
C11R = param( 57 ); 
C22R = param( 58 ); 
C23R = param( 59 ); 
C33R = param( 60 ); 
C11L = param( 61 ); 
C22L = param( 62 ); 
C23L = param( 63 ); 
C33L = param( 64 ); 
y0 = param( 65 ); 
b0 = param( 66 ); 

Fx_R = inputs( 1 ); 
Fy_R = inputs( 2 ); 
Mz_R = inputs( 3 ); 
Fx_L = inputs( 4 ); 
Fy_L = inputs( 5 ); 
Mz_L = inputs( 6 ); 

atom9 = cos(a_pend);
atom8 = sin(b_pend);
atom13 = -atom9*atom8;
atom65 = -mWHS*g;
atom381 = (endsR-stasR)^(-1);
atom382 = (sR_R-stasR)*atom381;
atom384 = bsR+atom382*asR;
atom386 = atom382*atom384+csR;
atom393 = atom381*asR;
atom396 = atom381*atom384+atom393*atom382;
atom399 = atom382*atom396+atom386*atom381;
atom388 = atom386*atom382+dsR;
atom402 = atom399*atom382+atom381*atom388;
atom405 = (atom388*atom382+esR)*atom381+atom402*atom382;
atom407 = 1+atom405^2;
atom416 = atom381*atom396;
atom422 = atom381*atom399;
atom426 = atom381*atom402;
atom429 = 2*atom426+2*(atom422+(atom393*atom381*atom382+atom416)*atom382)*atom382;
atom408 = sqrt(atom407);
atom434 = -atom408^(-2)*atom429*atom405*atom407^(-1/2);
atom440 = atom405-(0.5)*atom434*L_R;
atom438 = 1+(0.5)*atom408^(-1)*atom429*L_R+(0.5)*atom405*atom434*L_R;
atom449 = atom438^2;
atom457 = (atom440^2+atom449)^(-1/2);
atom10 = sin(a_pend);
atom469 = atom457*atom438*Fx_R;
atom11 = atom10*atom8;
atom372 = uR_R-lR_R;
atom373 = atom372*aR_R;
atom374 = bR_R+atom373;
atom443 = atom374*atom372+cR_R+atom372*(atom374+atom373);
atom462 = (1+atom443^2)^(-1/2);
atom471 = atom457*Fx_R*atom440+Fy_R*atom462;
atom7 = cos(b_pend);
atom12 = -atom10*atom7;
atom468 = Fy_R*atom462*atom443;
atom820 = atom471*atom9+atom12*atom468+atom469*atom11;
atom815 = atom468*atom8+atom469*atom7;
atom14 = atom9*atom7;
atom825 = atom469*atom13+atom14*atom468+atom471*atom10;
atom830 = atom13*atom825+atom7*atom815+atom820*atom11;
atom557 = uR_L-lR_L;
atom558 = aR_L*atom557;
atom559 = bR_L+atom558;
atom628 = atom559*atom557+cR_L+(atom559+atom558)*atom557;
atom647 = (1+atom628^2)^(-1/2);
atom653 = atom647*Fy_L*atom628;
atom566 = (endsL-stasL)^(-1);
atom567 = (sR_L-stasL)*atom566;
atom569 = bsL+atom567*asL;
atom571 = atom567*atom569+csL;
atom573 = atom567*atom571+dsL;
atom578 = atom566*asL;
atom581 = atom567*atom578+atom569*atom566;
atom584 = atom571*atom566+atom581*atom567;
atom587 = atom573*atom566+atom584*atom567;
atom590 = (esL+atom567*atom573)*atom566+atom567*atom587;
atom592 = 1+atom590^2;
atom593 = sqrt(atom592);
atom605 = atom581*atom566;
atom609 = atom584*atom566;
atom601 = atom587*atom566;
atom614 = 2*(atom567*(atom605+atom567*atom578*atom566)+atom609)*atom567+2*atom601;
atom619 = -atom593^(-2)*atom614*atom590*atom592^(-1/2);
atom625 = atom590+(0.5)*L_R*atom619;
atom623 = 1-(0.5)*atom590*L_R*atom619-(0.5)*atom593^(-1)*atom614*L_R;
atom634 = atom623^2;
atom642 = (atom634+atom625^2)^(-1/2);
atom654 = atom642*Fx_L*atom623;
atom952 = atom653*atom8+atom654*atom7;
atom656 = atom625*atom642*Fx_L+atom647*Fy_L;
atom957 = atom9*atom656+atom654*atom11+atom12*atom653;
atom962 = atom13*atom654+atom10*atom656+atom14*atom653;
atom967 = atom952*atom7+atom13*atom962+atom11*atom957;
atom833 = atom825*atom10+atom9*atom820;
atom970 = atom10*atom962+atom9*atom957;
atom4 = sin(a);
atom497 = uW_L-lW_L;
atom503 = dW_L+atom497*(atom497*(atom497*aW_L+bW_L)+cW_L);
atom5 = cos(c);
atom506 = cos(thetaW_L)*atom503;
atom147 = -atom5*atom4;
atom6 = sin(c);
atom504 = -atom503*sin(thetaW_L);
atom3 = cos(a);
atom146 = atom5*atom3;
atom307 = -(0.5)*L_WHS;
atom320 = atom307*atom146;
atom923 = -atom320+uW_L*atom146+atom506*atom147+atom6*atom504;
atom321 = atom307*atom4;
atom924 = uW_L*atom4-atom321+atom506*atom3;
atom144 = -atom6*atom3;
atom145 = atom6*atom4;
atom319 = atom144*atom307;
atom922 = atom5*atom504+atom506*atom145+atom144*uW_L-atom319;
atom1024 = atom952*atom8+atom14*atom962+atom12*atom957;
atom309 = uW_R-lW_R;
atom315 = atom309*(cW_R+(aW_R*atom309+bW_R)*atom309)+dW_R;
atom316 = -atom315*sin(thetaW_R);
atom318 = atom315*cos(thetaW_R);
atom780 = atom320+uW_R*atom146+atom6*atom316+atom318*atom147;
atom781 = uW_R*atom4+atom321+atom318*atom3;
atom779 = atom5*atom316+atom318*atom145+uW_R*atom144+atom319;
atom887 = atom14*atom825+atom12*atom820+atom815*atom8;
atom28 = -atom13*atom6+atom5*atom10;
atom445 = -atom438*atom443;
atom444 = atom443*atom440;
atom451 = (atom444^2+atom445^2+atom449)^(-1/2);
atom474 = Mz_R*atom438*atom451;
atom473 = Mz_R*atom451*atom445;
atom472 = atom444*Mz_R*atom451;
atom43 = atom28*atom3+atom14*atom4;
atom812 = atom13*atom472+atom10*atom473+atom474*atom14;
atom16 = -atom6*atom7;
atom802 = atom474*atom8+atom7*atom472;
atom31 = atom16*atom3+atom4*atom8;
atom22 = -atom6*atom11+atom5*atom9;
atom807 = atom11*atom472+atom474*atom12+atom9*atom473;
atom37 = atom22*atom3+atom12*atom4;
atom1 = cos(b);
atom1158 = atom3*dc;
atom2 = sin(b);
atom1161 = -atom1158*atom2+atom1*da;
atom1164 = atom1*atom1158+atom2*da;
atom758 = tor*atom31;
atom759 = tor*atom37;
atom760 = tor*atom43;
atom1279 = atom1164*atom1161*I_WHSx+atom1158*da*I_WHSy-atom1164*I_WHSz*atom1161;
atom765 = atom759*atom37+atom43*atom760+atom758*atom31;
atom838 = atom802*atom31+atom807*atom37+atom43*atom812;
atom630 = -atom623*atom628;
atom629 = atom625*atom628;
atom636 = (atom634+atom629^2+atom630^2)^(-1/2);
atom658 = atom630*Mz_L*atom636;
atom657 = Mz_L*atom629*atom636;
atom659 = Mz_L*atom623*atom636;
atom949 = atom10*atom658+atom657*atom13+atom14*atom659;
atom939 = atom659*atom8+atom657*atom7;
atom944 = atom657*atom11+atom9*atom658+atom12*atom659;
atom975 = atom944*atom37+atom949*atom43+atom939*atom31;
atom71 = -atom2*atom3;
atom78 = I_WHSx*atom71;
atom79 = atom4*I_WHSy;
atom72 = atom1*atom3;
atom80 = I_WHSz*atom72;
atom156 = atom1*atom6-atom2*atom147;
atom159 = atom2*atom6+atom1*atom147;
atom1382 = atom4*atom146+atom159*atom72+atom71*atom156;
atom1376 = atom4^2+atom71^2+atom72^2;
atom150 = -atom2*atom145+atom5*atom1;
atom153 = atom5*atom2+atom1*atom145;
atom1389 = atom144*atom4+atom72*atom153+atom71*atom150;
atom46 = -atom28*atom4+atom14*atom3;
atom25 = atom5*atom13+atom10*atom6;
atom64 = atom25*atom2+atom1*atom46;
atom19 = atom5*atom11+atom9*atom6;
atom40 = atom12*atom3-atom22*atom4;
atom58 = atom1*atom40+atom2*atom19;
atom15 = atom5*atom7;
atom34 = atom3*atom8-atom16*atom4;
atom52 = atom2*atom15+atom34*atom1;
atom1454 = atom949*atom64+atom52*atom939+atom58*atom944;
atom55 = -atom2*atom40+atom1*atom19;
atom49 = -atom34*atom2+atom1*atom15;
atom61 = atom1*atom25-atom2*atom46;
atom1449 = atom939*atom49+atom55*atom944+atom61*atom949;
atom1361 = atom802*atom52+atom807*atom58+atom64*atom812;
atom1356 = atom807*atom55+atom61*atom812+atom802*atom49;
atom1157 = dc*atom4;
atom1165 = db+atom1157;
atom1280 = -atom1161*I_WHSx*atom1165+atom1161*atom1165*I_WHSy+I_WHSz*(atom1161*db-atom1*da*atom1157);
atom1278 = atom1164*I_WHSz*atom1165+(atom2*da*atom1157-atom1164*db)*I_WHSx-atom1164*atom1165*I_WHSy;
atom1313 = atom759*atom58+atom52*atom758+atom760*atom64;
atom1308 = atom61*atom760+atom49*atom758+atom759*atom55;
atom1410 = atom1*atom156+atom2*atom159;
atom1406 = atom2*atom72+atom1*atom71;
atom1415 = atom1*atom150+atom2*atom153;
atom105 = atom78*atom1+atom80*atom2;

MQ_ = [-mWHS , 0 , 0 , 0 , 0 , 0 , -atom830-atom967-atom13*atom65;
0 , -mWHS , 0 , 0 , 0 , 0 , -atom10*atom65-atom833-atom970;
0 , 0 , -I_WHSy , -atom79 , 0 , 0 , (atom4*atom780-atom781*atom146)*atom830+atom1279+atom967*(atom4*atom923-atom924*atom146)-atom765-atom970*(atom922*atom4-atom924*atom144)-(atom144*atom923-atom922*atom146)*atom1024-atom833*(atom779*atom4-atom781*atom144)-atom838-atom887*(atom144*atom780-atom779*atom146)-atom975;
0 , 0 , -atom79 , -atom79*atom4-atom80*atom72-atom78*atom71 , 0 , -atom105 , -(atom1376*atom922-atom924*atom1389)*atom970+atom1279*atom4-atom887*(atom1389*atom780-atom1382*atom779)-atom967*(atom924*atom1382-atom1376*atom923)-atom830*(atom781*atom1382-atom1376*atom780)-atom4*atom975-atom1449*atom71-atom1454*atom72-atom72*atom1313-atom838*atom4+atom72*atom1280+atom1278*atom71-atom765*atom4-(atom1389*atom923-atom1382*atom922)*atom1024-atom1308*atom71+atom833*(atom781*atom1389-atom1376*atom779)-atom1361*atom72-atom1356*atom71;
0 , 0 , 0 , 0 , -mWHS , 0 , -atom887-atom14*atom65-atom1024;
0 , 0 , 0 , -atom105 , 0 , -I_WHSz*atom2^2-atom1^2*I_WHSx , -(atom924*atom1410-atom1406*atom923)*atom967+atom833*(atom781*atom1415-atom1406*atom779)-atom2*atom1313+atom970*(atom924*atom1415-atom1406*atom922)-atom1361*atom2+atom2*atom1280-atom887*(atom780*atom1415-atom1410*atom779)-atom1*atom1356+atom1*atom1278+(atom1406*atom780-atom781*atom1410)*atom830+atom1024*(atom1410*atom922-atom923*atom1415)-atom1454*atom2-atom1*atom1449-atom1308*atom1];

%endfunction
